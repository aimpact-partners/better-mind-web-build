System.register([], (_exports, _context) => {

const bimport = specifier => {
	const dependencies = new Map([["apexcharts","3.54.1"]]);
	return globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));
};


var dependencies = new Map();
var require = dependency => dependencies.get(dependency);
return {
setters: [],
execute: function() {
// Prevent esbuild from considering the context to be amd
const define = void 0;
const module = {};

const code = (module, require) => {
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
    exports: {}
  }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
  value: mod,
  enumerable: true
}) : target, mod));
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// node_modules/apexcharts/dist/apexcharts.common.js
var require_apexcharts_common = __commonJS({
  "node_modules/apexcharts/dist/apexcharts.common.js"(exports, module2) {
    "use strict";

    function t(t2, e2) {
      (null == e2 || e2 > t2.length) && (e2 = t2.length);
      for (var i2 = 0, a2 = Array(e2); i2 < e2; i2++) a2[i2] = t2[i2];
      return a2;
    }
    function e(t2) {
      if (void 0 === t2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t2;
    }
    function i(t2, e2) {
      if (!(t2 instanceof e2)) throw new TypeError("Cannot call a class as a function");
    }
    function a(t2, e2) {
      for (var i2 = 0; i2 < e2.length; i2++) {
        var a2 = e2[i2];
        a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(t2, x(a2.key), a2);
      }
    }
    function s(t2, e2, i2) {
      return e2 && a(t2.prototype, e2), i2 && a(t2, i2), Object.defineProperty(t2, "prototype", {
        writable: false
      }), t2;
    }
    function r(t2, e2) {
      var i2 = "undefined" != typeof Symbol && t2[Symbol.iterator] || t2["@@iterator"];
      if (!i2) {
        if (Array.isArray(t2) || (i2 = v(t2)) || e2 && t2 && "number" == typeof t2.length) {
          i2 && (t2 = i2);
          var a2 = 0,
            s2 = function () {};
          return {
            s: s2,
            n: function () {
              return a2 >= t2.length ? {
                done: true
              } : {
                done: false,
                value: t2[a2++]
              };
            },
            e: function (t3) {
              throw t3;
            },
            f: s2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var r2,
        o2 = true,
        n2 = false;
      return {
        s: function () {
          i2 = i2.call(t2);
        },
        n: function () {
          var t3 = i2.next();
          return o2 = t3.done, t3;
        },
        e: function (t3) {
          n2 = true, r2 = t3;
        },
        f: function () {
          try {
            o2 || null == i2.return || i2.return();
          } finally {
            if (n2) throw r2;
          }
        }
      };
    }
    function o(t2) {
      var i2 = c();
      return function () {
        var a2,
          s2 = l(t2);
        if (i2) {
          var r2 = l(this).constructor;
          a2 = Reflect.construct(s2, arguments, r2);
        } else a2 = s2.apply(this, arguments);
        return function (t3, i3) {
          if (i3 && ("object" == typeof i3 || "function" == typeof i3)) return i3;
          if (void 0 !== i3) throw new TypeError("Derived constructors may only return object or undefined");
          return e(t3);
        }(this, a2);
      };
    }
    function n(t2, e2, i2) {
      return (e2 = x(e2)) in t2 ? Object.defineProperty(t2, e2, {
        value: i2,
        enumerable: true,
        configurable: true,
        writable: true
      }) : t2[e2] = i2, t2;
    }
    function l(t2) {
      return l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t3) {
        return t3.__proto__ || Object.getPrototypeOf(t3);
      }, l(t2);
    }
    function h(t2, e2) {
      if ("function" != typeof e2 && null !== e2) throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, {
        constructor: {
          value: t2,
          writable: true,
          configurable: true
        }
      }), Object.defineProperty(t2, "prototype", {
        writable: false
      }), e2 && u(t2, e2);
    }
    function c() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      } catch (t3) {}
      return (c = function () {
        return !!t2;
      })();
    }
    function d(t2, e2) {
      var i2 = Object.keys(t2);
      if (Object.getOwnPropertySymbols) {
        var a2 = Object.getOwnPropertySymbols(t2);
        e2 && (a2 = a2.filter(function (e3) {
          return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
        })), i2.push.apply(i2, a2);
      }
      return i2;
    }
    function g(t2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var i2 = null != arguments[e2] ? arguments[e2] : {};
        e2 % 2 ? d(Object(i2), true).forEach(function (e3) {
          n(t2, e3, i2[e3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i2)) : d(Object(i2)).forEach(function (e3) {
          Object.defineProperty(t2, e3, Object.getOwnPropertyDescriptor(i2, e3));
        });
      }
      return t2;
    }
    function u(t2, e2) {
      return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t3, e3) {
        return t3.__proto__ = e3, t3;
      }, u(t2, e2);
    }
    function f(t2, e2) {
      return function (t3) {
        if (Array.isArray(t3)) return t3;
      }(t2) || function (t3, e3) {
        var i2 = null == t3 ? null : "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
        if (null != i2) {
          var a2,
            s2,
            r2,
            o2,
            n2 = [],
            l2 = true,
            h2 = false;
          try {
            if (r2 = (i2 = i2.call(t3)).next, 0 === e3) {
              if (Object(i2) !== i2) return;
              l2 = false;
            } else for (; !(l2 = (a2 = r2.call(i2)).done) && (n2.push(a2.value), n2.length !== e3); l2 = true);
          } catch (t4) {
            h2 = true, s2 = t4;
          } finally {
            try {
              if (!l2 && null != i2.return && (o2 = i2.return(), Object(o2) !== o2)) return;
            } finally {
              if (h2) throw s2;
            }
          }
          return n2;
        }
      }(t2, e2) || v(t2, e2) || function () {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function p(e2) {
      return function (e3) {
        if (Array.isArray(e3)) return t(e3);
      }(e2) || function (t2) {
        if ("undefined" != typeof Symbol && null != t2[Symbol.iterator] || null != t2["@@iterator"]) return Array.from(t2);
      }(e2) || v(e2) || function () {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function x(t2) {
      var e2 = function (t3, e3) {
        if ("object" != typeof t3 || !t3) return t3;
        var i2 = t3[Symbol.toPrimitive];
        if (void 0 !== i2) {
          var a2 = i2.call(t3, e3 || "default");
          if ("object" != typeof a2) return a2;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === e3 ? String : Number)(t3);
      }(t2, "string");
      return "symbol" == typeof e2 ? e2 : e2 + "";
    }
    function b(t2) {
      return b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t3) {
        return typeof t3;
      } : function (t3) {
        return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
      }, b(t2);
    }
    function v(e2, i2) {
      if (e2) {
        if ("string" == typeof e2) return t(e2, i2);
        var a2 = {}.toString.call(e2).slice(8, -1);
        return "Object" === a2 && e2.constructor && (a2 = e2.constructor.name), "Map" === a2 || "Set" === a2 ? Array.from(e2) : "Arguments" === a2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a2) ? t(e2, i2) : void 0;
      }
    }
    var m = function () {
        function t2() {
          i(this, t2);
        }
        return s(t2, [{
          key: "shadeRGBColor",
          value: function (t3, e2) {
            var i2 = e2.split(","),
              a2 = t3 < 0 ? 0 : 255,
              s2 = t3 < 0 ? -1 * t3 : t3,
              r2 = parseInt(i2[0].slice(4), 10),
              o2 = parseInt(i2[1], 10),
              n2 = parseInt(i2[2], 10);
            return "rgb(" + (Math.round((a2 - r2) * s2) + r2) + "," + (Math.round((a2 - o2) * s2) + o2) + "," + (Math.round((a2 - n2) * s2) + n2) + ")";
          }
        }, {
          key: "shadeHexColor",
          value: function (t3, e2) {
            var i2 = parseInt(e2.slice(1), 16),
              a2 = t3 < 0 ? 0 : 255,
              s2 = t3 < 0 ? -1 * t3 : t3,
              r2 = i2 >> 16,
              o2 = i2 >> 8 & 255,
              n2 = 255 & i2;
            return "#" + (16777216 + 65536 * (Math.round((a2 - r2) * s2) + r2) + 256 * (Math.round((a2 - o2) * s2) + o2) + (Math.round((a2 - n2) * s2) + n2)).toString(16).slice(1);
          }
        }, {
          key: "shadeColor",
          value: function (e2, i2) {
            return t2.isColorHex(i2) ? this.shadeHexColor(e2, i2) : this.shadeRGBColor(e2, i2);
          }
        }], [{
          key: "bind",
          value: function (t3, e2) {
            return function () {
              return t3.apply(e2, arguments);
            };
          }
        }, {
          key: "isObject",
          value: function (t3) {
            return t3 && "object" === b(t3) && !Array.isArray(t3) && null != t3;
          }
        }, {
          key: "is",
          value: function (t3, e2) {
            return Object.prototype.toString.call(e2) === "[object " + t3 + "]";
          }
        }, {
          key: "listToArray",
          value: function (t3) {
            var e2,
              i2 = [];
            for (e2 = 0; e2 < t3.length; e2++) i2[e2] = t3[e2];
            return i2;
          }
        }, {
          key: "extend",
          value: function (t3, e2) {
            var i2 = this;
            "function" != typeof Object.assign && (Object.assign = function (t4) {
              if (null == t4) throw new TypeError("Cannot convert undefined or null to object");
              for (var e3 = Object(t4), i3 = 1; i3 < arguments.length; i3++) {
                var a3 = arguments[i3];
                if (null != a3) for (var s2 in a3) a3.hasOwnProperty(s2) && (e3[s2] = a3[s2]);
              }
              return e3;
            });
            var a2 = Object.assign({}, t3);
            return this.isObject(t3) && this.isObject(e2) && Object.keys(e2).forEach(function (s2) {
              i2.isObject(e2[s2]) && s2 in t3 ? a2[s2] = i2.extend(t3[s2], e2[s2]) : Object.assign(a2, n({}, s2, e2[s2]));
            }), a2;
          }
        }, {
          key: "extendArray",
          value: function (e2, i2) {
            var a2 = [];
            return e2.map(function (e3) {
              a2.push(t2.extend(i2, e3));
            }), e2 = a2;
          }
        }, {
          key: "monthMod",
          value: function (t3) {
            return t3 % 12;
          }
        }, {
          key: "clone",
          value: function (e2) {
            if (t2.is("Array", e2)) {
              for (var i2 = [], a2 = 0; a2 < e2.length; a2++) i2[a2] = this.clone(e2[a2]);
              return i2;
            }
            if (t2.is("Null", e2)) return null;
            if (t2.is("Date", e2)) return e2;
            if ("object" === b(e2)) {
              var s2 = {};
              for (var r2 in e2) e2.hasOwnProperty(r2) && (s2[r2] = this.clone(e2[r2]));
              return s2;
            }
            return e2;
          }
        }, {
          key: "log10",
          value: function (t3) {
            return Math.log(t3) / Math.LN10;
          }
        }, {
          key: "roundToBase10",
          value: function (t3) {
            return Math.pow(10, Math.floor(Math.log10(t3)));
          }
        }, {
          key: "roundToBase",
          value: function (t3, e2) {
            return Math.pow(e2, Math.floor(Math.log(t3) / Math.log(e2)));
          }
        }, {
          key: "parseNumber",
          value: function (t3) {
            return null === t3 ? t3 : parseFloat(t3);
          }
        }, {
          key: "stripNumber",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
            return Number.isInteger(t3) ? t3 : parseFloat(t3.toPrecision(e2));
          }
        }, {
          key: "randomId",
          value: function () {
            return (Math.random() + 1).toString(36).substring(4);
          }
        }, {
          key: "noExponents",
          value: function (t3) {
            var e2 = String(t3).split(/[eE]/);
            if (1 === e2.length) return e2[0];
            var i2 = "",
              a2 = t3 < 0 ? "-" : "",
              s2 = e2[0].replace(".", ""),
              r2 = Number(e2[1]) + 1;
            if (r2 < 0) {
              for (i2 = a2 + "0."; r2++;) i2 += "0";
              return i2 + s2.replace(/^-/, "");
            }
            for (r2 -= s2.length; r2--;) i2 += "0";
            return s2 + i2;
          }
        }, {
          key: "getDimensions",
          value: function (t3) {
            var e2 = getComputedStyle(t3, null),
              i2 = t3.clientHeight,
              a2 = t3.clientWidth;
            return i2 -= parseFloat(e2.paddingTop) + parseFloat(e2.paddingBottom), [a2 -= parseFloat(e2.paddingLeft) + parseFloat(e2.paddingRight), i2];
          }
        }, {
          key: "getBoundingClientRect",
          value: function (t3) {
            var e2 = t3.getBoundingClientRect();
            return {
              top: e2.top,
              right: e2.right,
              bottom: e2.bottom,
              left: e2.left,
              width: t3.clientWidth,
              height: t3.clientHeight,
              x: e2.left,
              y: e2.top
            };
          }
        }, {
          key: "getLargestStringFromArr",
          value: function (t3) {
            return t3.reduce(function (t4, e2) {
              return Array.isArray(e2) && (e2 = e2.reduce(function (t5, e3) {
                return t5.length > e3.length ? t5 : e3;
              })), t4.length > e2.length ? t4 : e2;
            }, 0);
          }
        }, {
          key: "hexToRgba",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999",
              e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
            "#" !== t3.substring(0, 1) && (t3 = "#999999");
            var i2 = t3.replace("#", "");
            i2 = i2.match(new RegExp("(.{" + i2.length / 3 + "})", "g"));
            for (var a2 = 0; a2 < i2.length; a2++) i2[a2] = parseInt(1 === i2[a2].length ? i2[a2] + i2[a2] : i2[a2], 16);
            return void 0 !== e2 && i2.push(e2), "rgba(" + i2.join(",") + ")";
          }
        }, {
          key: "getOpacityFromRGBA",
          value: function (t3) {
            return parseFloat(t3.replace(/^.*,(.+)\)/, "$1"));
          }
        }, {
          key: "rgb2hex",
          value: function (t3) {
            return (t3 = t3.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t3.length ? "#" + ("0" + parseInt(t3[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[3], 10).toString(16)).slice(-2) : "";
          }
        }, {
          key: "isColorHex",
          value: function (t3) {
            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t3);
          }
        }, {
          key: "getPolygonPos",
          value: function (t3, e2) {
            for (var i2 = [], a2 = 2 * Math.PI / e2, s2 = 0; s2 < e2; s2++) {
              var r2 = {};
              r2.x = t3 * Math.sin(s2 * a2), r2.y = -t3 * Math.cos(s2 * a2), i2.push(r2);
            }
            return i2;
          }
        }, {
          key: "polarToCartesian",
          value: function (t3, e2, i2, a2) {
            var s2 = (a2 - 90) * Math.PI / 180;
            return {
              x: t3 + i2 * Math.cos(s2),
              y: e2 + i2 * Math.sin(s2)
            };
          }
        }, {
          key: "escapeString",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x",
              i2 = t3.toString().slice();
            return i2 = i2.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e2);
          }
        }, {
          key: "negToZero",
          value: function (t3) {
            return t3 < 0 ? 0 : t3;
          }
        }, {
          key: "moveIndexInArray",
          value: function (t3, e2, i2) {
            if (i2 >= t3.length) for (var a2 = i2 - t3.length + 1; a2--;) t3.push(void 0);
            return t3.splice(i2, 0, t3.splice(e2, 1)[0]), t3;
          }
        }, {
          key: "extractNumber",
          value: function (t3) {
            return parseFloat(t3.replace(/[^\d.]*/g, ""));
          }
        }, {
          key: "findAncestor",
          value: function (t3, e2) {
            for (; (t3 = t3.parentElement) && !t3.classList.contains(e2););
            return t3;
          }
        }, {
          key: "setELstyles",
          value: function (t3, e2) {
            for (var i2 in e2) e2.hasOwnProperty(i2) && (t3.style.key = e2[i2]);
          }
        }, {
          key: "preciseAddition",
          value: function (t3, e2) {
            var i2 = (String(t3).split(".")[1] || "").length,
              a2 = (String(e2).split(".")[1] || "").length,
              s2 = Math.pow(10, Math.max(i2, a2));
            return (Math.round(t3 * s2) + Math.round(e2 * s2)) / s2;
          }
        }, {
          key: "isNumber",
          value: function (t3) {
            return !isNaN(t3) && parseFloat(Number(t3)) === t3 && !isNaN(parseInt(t3, 10));
          }
        }, {
          key: "isFloat",
          value: function (t3) {
            return Number(t3) === t3 && t3 % 1 != 0;
          }
        }, {
          key: "isSafari",
          value: function () {
            return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          }
        }, {
          key: "isFirefox",
          value: function () {
            return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
          }
        }, {
          key: "isMsEdge",
          value: function () {
            var t3 = window.navigator.userAgent,
              e2 = t3.indexOf("Edge/");
            return e2 > 0 && parseInt(t3.substring(e2 + 5, t3.indexOf(".", e2)), 10);
          }
        }, {
          key: "getGCD",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7,
              a2 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t3, e2))));
            for (t3 = Math.round(Math.abs(t3) * a2), e2 = Math.round(Math.abs(e2) * a2); e2;) {
              var s2 = e2;
              e2 = t3 % e2, t3 = s2;
            }
            return t3 / a2;
          }
        }, {
          key: "getPrimeFactors",
          value: function (t3) {
            for (var e2 = [], i2 = 2; t3 >= 2;) t3 % i2 == 0 ? (e2.push(i2), t3 /= i2) : i2++;
            return e2;
          }
        }, {
          key: "mod",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7,
              a2 = Math.pow(10, i2 - Math.floor(Math.log10(Math.max(t3, e2))));
            return (t3 = Math.round(Math.abs(t3) * a2)) % (e2 = Math.round(Math.abs(e2) * a2)) / a2;
          }
        }]), t2;
      }(),
      y = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.setEasingFunctions();
        }
        return s(t2, [{
          key: "setEasingFunctions",
          value: function () {
            var t3;
            if (!this.w.globals.easing) {
              switch (this.w.config.chart.animations.easing) {
                case "linear":
                  t3 = "-";
                  break;
                case "easein":
                  t3 = "<";
                  break;
                case "easeout":
                  t3 = ">";
                  break;
                case "easeinout":
                default:
                  t3 = "<>";
                  break;
                case "swing":
                  t3 = function (t4) {
                    var e2 = 1.70158;
                    return (t4 -= 1) * t4 * ((e2 + 1) * t4 + e2) + 1;
                  };
                  break;
                case "bounce":
                  t3 = function (t4) {
                    return t4 < 1 / 2.75 ? 7.5625 * t4 * t4 : t4 < 2 / 2.75 ? 7.5625 * (t4 -= 1.5 / 2.75) * t4 + 0.75 : t4 < 2.5 / 2.75 ? 7.5625 * (t4 -= 2.25 / 2.75) * t4 + 0.9375 : 7.5625 * (t4 -= 2.625 / 2.75) * t4 + 0.984375;
                  };
                  break;
                case "elastic":
                  t3 = function (t4) {
                    return t4 === !!t4 ? t4 : Math.pow(2, -10 * t4) * Math.sin((t4 - 0.075) * (2 * Math.PI) / 0.3) + 1;
                  };
              }
              this.w.globals.easing = t3;
            }
          }
        }, {
          key: "animateLine",
          value: function (t3, e2, i2, a2) {
            t3.attr(e2).animate(a2).attr(i2);
          }
        }, {
          key: "animateMarker",
          value: function (t3, e2, i2, a2) {
            t3.attr({
              opacity: 0
            }).animate(e2, i2).attr({
              opacity: 1
            }).afterAll(function () {
              a2();
            });
          }
        }, {
          key: "animateRect",
          value: function (t3, e2, i2, a2, s2) {
            t3.attr(e2).animate(a2).attr(i2).afterAll(function () {
              return s2();
            });
          }
        }, {
          key: "animatePathsGradually",
          value: function (t3) {
            var e2 = t3.el,
              i2 = t3.realIndex,
              a2 = t3.j,
              s2 = t3.fill,
              r2 = t3.pathFrom,
              o2 = t3.pathTo,
              n2 = t3.speed,
              l2 = t3.delay,
              h2 = this.w,
              c2 = 0;
            h2.config.chart.animations.animateGradually.enabled && (c2 = h2.config.chart.animations.animateGradually.delay), h2.config.chart.animations.dynamicAnimation.enabled && h2.globals.dataChanged && "bar" !== h2.config.chart.type && (c2 = 0), this.morphSVG(e2, i2, a2, "line" !== h2.config.chart.type || h2.globals.comboCharts ? s2 : "stroke", r2, o2, n2, l2 * c2);
          }
        }, {
          key: "showDelayedElements",
          value: function () {
            this.w.globals.delayedElements.forEach(function (t3) {
              var e2 = t3.el;
              e2.classList.remove("apexcharts-element-hidden"), e2.classList.add("apexcharts-hidden-element-shown");
            });
          }
        }, {
          key: "animationCompleted",
          value: function (t3) {
            var e2 = this.w;
            e2.globals.animationEnded || (e2.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e2.config.chart.events.animationEnd && e2.config.chart.events.animationEnd(this.ctx, {
              el: t3,
              w: e2
            }));
          }
        }, {
          key: "morphSVG",
          value: function (t3, e2, i2, a2, s2, r2, o2, n2) {
            var l2 = this,
              h2 = this.w;
            s2 || (s2 = t3.attr("pathFrom")), r2 || (r2 = t3.attr("pathTo"));
            var c2 = function (t4) {
              return "radar" === h2.config.chart.type && (o2 = 1), "M 0 ".concat(h2.globals.gridHeight);
            };
            (!s2 || s2.indexOf("undefined") > -1 || s2.indexOf("NaN") > -1) && (s2 = c2()), (!r2 || r2.indexOf("undefined") > -1 || r2.indexOf("NaN") > -1) && (r2 = c2()), h2.globals.shouldAnimate || (o2 = 1), t3.plot(s2).animate(1, h2.globals.easing, n2).plot(s2).animate(o2, h2.globals.easing, n2).plot(r2).afterAll(function () {
              m.isNumber(i2) ? i2 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t3) : "none" !== a2 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e2 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t3), l2.showDelayedElements();
            });
          }
        }]), t2;
      }(),
      w = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "getDefaultFilter",
          value: function (t3, e2) {
            var i2 = this.w;
            t3.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i2.config.states.normal.filter ? this.applyFilter(t3, e2, i2.config.states.normal.filter.type, i2.config.states.normal.filter.value) : i2.config.chart.dropShadow.enabled && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
          }
        }, {
          key: "addNormalFilter",
          value: function (t3, e2) {
            var i2 = this.w;
            i2.config.chart.dropShadow.enabled && !t3.node.classList.contains("apexcharts-marker") && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
          }
        }, {
          key: "addLightenFilter",
          value: function (t3, e2, i2) {
            var a2 = this,
              s2 = this.w,
              r2 = i2.intensity;
            t3.unfilter(true);
            new window.SVG.Filter();
            t3.filter(function (t4) {
              var i3 = s2.config.chart.dropShadow;
              (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({
                rgb: {
                  type: "linear",
                  slope: 1.5,
                  intercept: r2
                }
              });
            }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
          }
        }, {
          key: "addDarkenFilter",
          value: function (t3, e2, i2) {
            var a2 = this,
              s2 = this.w,
              r2 = i2.intensity;
            t3.unfilter(true);
            new window.SVG.Filter();
            t3.filter(function (t4) {
              var i3 = s2.config.chart.dropShadow;
              (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({
                rgb: {
                  type: "linear",
                  slope: r2
                }
              });
            }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
          }
        }, {
          key: "applyFilter",
          value: function (t3, e2, i2) {
            var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
            switch (i2) {
              case "none":
                this.addNormalFilter(t3, e2);
                break;
              case "lighten":
                this.addLightenFilter(t3, e2, {
                  intensity: a2
                });
                break;
              case "darken":
                this.addDarkenFilter(t3, e2, {
                  intensity: a2
                });
            }
          }
        }, {
          key: "addShadow",
          value: function (t3, e2, i2) {
            var a2,
              s2 = this.w,
              r2 = i2.blur,
              o2 = i2.top,
              n2 = i2.left,
              l2 = i2.color,
              h2 = i2.opacity;
            if ((null === (a2 = s2.config.chart.dropShadow.enabledOnSeries) || void 0 === a2 ? void 0 : a2.length) > 0 && -1 === s2.config.chart.dropShadow.enabledOnSeries.indexOf(e2)) return t3;
            var c2 = t3.flood(Array.isArray(l2) ? l2[e2] : l2, h2).composite(t3.sourceAlpha, "in").offset(n2, o2).gaussianBlur(r2).merge(t3.source);
            return t3.blend(t3.source, c2);
          }
        }, {
          key: "dropShadow",
          value: function (t3, e2) {
            var i2,
              a2,
              s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
              r2 = e2.top,
              o2 = e2.left,
              n2 = e2.blur,
              l2 = e2.color,
              h2 = e2.opacity,
              c2 = e2.noUserSpaceOnUse,
              d2 = this.w;
            if (t3.unfilter(true), m.isMsEdge() && "radialBar" === d2.config.chart.type) return t3;
            if ((null === (i2 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === i2 ? void 0 : i2.length) > 0 && -1 === (null === (a2 = d2.config.chart.dropShadow.enabledOnSeries) || void 0 === a2 ? void 0 : a2.indexOf(s2))) return t3;
            return l2 = Array.isArray(l2) ? l2[s2] : l2, t3.filter(function (t4) {
              var e3 = null;
              e3 = m.isSafari() || m.isFirefox() || m.isMsEdge() ? t4.flood(l2, h2).composite(t4.sourceAlpha, "in").offset(o2, r2).gaussianBlur(n2) : t4.flood(l2, h2).composite(t4.sourceAlpha, "in").offset(o2, r2).gaussianBlur(n2).merge(t4.source), t4.blend(t4.source, e3);
            }), c2 || t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node), t3;
          }
        }, {
          key: "setSelectionFilter",
          value: function (t3, e2, i2) {
            var a2 = this.w;
            if (void 0 !== a2.globals.selectedDataPoints[e2] && a2.globals.selectedDataPoints[e2].indexOf(i2) > -1) {
              t3.node.setAttribute("selected", true);
              var s2 = a2.config.states.active.filter;
              "none" !== s2 && this.applyFilter(t3, e2, s2.type, s2.value);
            }
          }
        }, {
          key: "_scaleFilterSize",
          value: function (t3) {
            !function (e2) {
              for (var i2 in e2) e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
            }({
              width: "200%",
              height: "200%",
              x: "-50%",
              y: "-50%"
            });
          }
        }]), t2;
      }(),
      k = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "roundPathCorners",
          value: function (t3, e2) {
            function i2(t4, e3, i3) {
              var s3 = e3.x - t4.x,
                r3 = e3.y - t4.y,
                o3 = Math.sqrt(s3 * s3 + r3 * r3);
              return a2(t4, e3, Math.min(1, i3 / o3));
            }
            function a2(t4, e3, i3) {
              return {
                x: t4.x + (e3.x - t4.x) * i3,
                y: t4.y + (e3.y - t4.y) * i3
              };
            }
            function s2(t4, e3) {
              t4.length > 2 && (t4[t4.length - 2] = e3.x, t4[t4.length - 1] = e3.y);
            }
            function r2(t4) {
              return {
                x: parseFloat(t4[t4.length - 2]),
                y: parseFloat(t4[t4.length - 1])
              };
            }
            t3.indexOf("NaN") > -1 && (t3 = "");
            var o2 = t3.split(/[,\s]/).reduce(function (t4, e3) {
                var i3 = e3.match("([a-zA-Z])(.+)");
                return i3 ? (t4.push(i3[1]), t4.push(i3[2])) : t4.push(e3), t4;
              }, []).reduce(function (t4, e3) {
                return parseFloat(e3) == e3 && t4.length ? t4[t4.length - 1].push(e3) : t4.push([e3]), t4;
              }, []),
              n2 = [];
            if (o2.length > 1) {
              var l2 = r2(o2[0]),
                h2 = null;
              "Z" == o2[o2.length - 1][0] && o2[0].length > 2 && (h2 = ["L", l2.x, l2.y], o2[o2.length - 1] = h2), n2.push(o2[0]);
              for (var c2 = 1; c2 < o2.length; c2++) {
                var d2 = n2[n2.length - 1],
                  g2 = o2[c2],
                  u2 = g2 == h2 ? o2[1] : o2[c2 + 1];
                if (u2 && d2 && d2.length > 2 && "L" == g2[0] && u2.length > 2 && "L" == u2[0]) {
                  var f2,
                    p2,
                    x2 = r2(d2),
                    b2 = r2(g2),
                    v2 = r2(u2);
                  f2 = i2(b2, x2, e2), p2 = i2(b2, v2, e2), s2(g2, f2), g2.origPoint = b2, n2.push(g2);
                  var m2 = a2(f2, b2, 0.5),
                    y2 = a2(b2, p2, 0.5),
                    w2 = ["C", m2.x, m2.y, y2.x, y2.y, p2.x, p2.y];
                  w2.origPoint = b2, n2.push(w2);
                } else n2.push(g2);
              }
              if (h2) {
                var k2 = r2(n2[n2.length - 1]);
                n2.push(["Z"]), s2(n2[0], k2);
              }
            } else n2 = o2;
            return n2.reduce(function (t4, e3) {
              return t4 + e3.join(" ") + " ";
            }, "");
          }
        }, {
          key: "drawLine",
          value: function (t3, e2, i2, a2) {
            var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8",
              r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
              o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
              n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
            return this.w.globals.dom.Paper.line().attr({
              x1: t3,
              y1: e2,
              x2: i2,
              y2: a2,
              stroke: s2,
              "stroke-dasharray": r2,
              "stroke-width": o2,
              "stroke-linecap": n2
            });
          }
        }, {
          key: "drawRect",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
              e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
              i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
              a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
              s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
              r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe",
              o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,
              n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
              l2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
              h2 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
              c2 = this.w.globals.dom.Paper.rect();
            return c2.attr({
              x: t3,
              y: e2,
              width: i2 > 0 ? i2 : 0,
              height: a2 > 0 ? a2 : 0,
              rx: s2,
              ry: s2,
              opacity: o2,
              "stroke-width": null !== n2 ? n2 : 0,
              stroke: null !== l2 ? l2 : "none",
              "stroke-dasharray": h2
            }), c2.node.setAttribute("fill", r2), c2;
          }
        }, {
          key: "drawPolygon",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1",
              i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,
              a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
            return this.w.globals.dom.Paper.polygon(t3).attr({
              fill: a2,
              stroke: e2,
              "stroke-width": i2
            });
          }
        }, {
          key: "drawCircle",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
            t3 < 0 && (t3 = 0);
            var i2 = this.w.globals.dom.Paper.circle(2 * t3);
            return null !== e2 && i2.attr(e2), i2;
          }
        }, {
          key: "drawPath",
          value: function (t3) {
            var e2 = t3.d,
              i2 = void 0 === e2 ? "" : e2,
              a2 = t3.stroke,
              s2 = void 0 === a2 ? "#a8a8a8" : a2,
              r2 = t3.strokeWidth,
              o2 = void 0 === r2 ? 1 : r2,
              n2 = t3.fill,
              l2 = t3.fillOpacity,
              h2 = void 0 === l2 ? 1 : l2,
              c2 = t3.strokeOpacity,
              d2 = void 0 === c2 ? 1 : c2,
              g2 = t3.classes,
              u2 = t3.strokeLinecap,
              f2 = void 0 === u2 ? null : u2,
              p2 = t3.strokeDashArray,
              x2 = void 0 === p2 ? 0 : p2,
              b2 = this.w;
            return null === f2 && (f2 = b2.config.stroke.lineCap), (i2.indexOf("undefined") > -1 || i2.indexOf("NaN") > -1) && (i2 = "M 0 ".concat(b2.globals.gridHeight)), b2.globals.dom.Paper.path(i2).attr({
              fill: n2,
              "fill-opacity": h2,
              stroke: s2,
              "stroke-opacity": d2,
              "stroke-linecap": f2,
              "stroke-width": o2,
              "stroke-dasharray": x2,
              class: g2
            });
          }
        }, {
          key: "group",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
              e2 = this.w.globals.dom.Paper.group();
            return null !== t3 && e2.attr(t3), e2;
          }
        }, {
          key: "move",
          value: function (t3, e2) {
            var i2 = ["M", t3, e2].join(" ");
            return i2;
          }
        }, {
          key: "line",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
              a2 = null;
            return null === i2 ? a2 = [" L", t3, e2].join(" ") : "H" === i2 ? a2 = [" H", t3].join(" ") : "V" === i2 && (a2 = [" V", e2].join(" ")), a2;
          }
        }, {
          key: "curve",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2 = ["C", t3, e2, i2, a2, s2, r2].join(" ");
            return o2;
          }
        }, {
          key: "quadraticCurve",
          value: function (t3, e2, i2, a2) {
            return ["Q", t3, e2, i2, a2].join(" ");
          }
        }, {
          key: "arc",
          value: function (t3, e2, i2, a2, s2, r2, o2) {
            var n2 = "A";
            arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n2 = "a");
            var l2 = [n2, t3, e2, i2, a2, s2, r2, o2].join(" ");
            return l2;
          }
        }, {
          key: "renderPaths",
          value: function (t3) {
            var e2,
              i2 = t3.j,
              a2 = t3.realIndex,
              s2 = t3.pathFrom,
              r2 = t3.pathTo,
              o2 = t3.stroke,
              n2 = t3.strokeWidth,
              l2 = t3.strokeLinecap,
              h2 = t3.fill,
              c2 = t3.animationDelay,
              d2 = t3.initialSpeed,
              u2 = t3.dataChangeSpeed,
              f2 = t3.className,
              p2 = t3.chartType,
              x2 = t3.shouldClipToGrid,
              b2 = void 0 === x2 || x2,
              v2 = t3.bindEventsOnPaths,
              m2 = void 0 === v2 || v2,
              k2 = t3.drawShadow,
              A2 = void 0 === k2 || k2,
              S2 = this.w,
              C2 = new w(this.ctx),
              L2 = new y(this.ctx),
              P2 = this.w.config.chart.animations.enabled,
              M2 = P2 && this.w.config.chart.animations.dynamicAnimation.enabled,
              I2 = !!(P2 && !S2.globals.resized || M2 && S2.globals.dataChanged && S2.globals.shouldAnimate);
            I2 ? e2 = s2 : (e2 = r2, S2.globals.animationEnded = true);
            var T2 = S2.config.stroke.dashArray,
              z2 = 0;
            z2 = Array.isArray(T2) ? T2[a2] : S2.config.stroke.dashArray;
            var X2 = this.drawPath({
              d: e2,
              stroke: o2,
              strokeWidth: n2,
              fill: h2,
              fillOpacity: 1,
              classes: f2,
              strokeLinecap: l2,
              strokeDashArray: z2
            });
            if (X2.attr("index", a2), b2 && ("bar" === p2 && !S2.globals.isHorizontal || S2.globals.comboCharts ? X2.attr({
              "clip-path": "url(#gridRectBarMask".concat(S2.globals.cuid, ")")
            }) : X2.attr({
              "clip-path": "url(#gridRectMask".concat(S2.globals.cuid, ")")
            })), "none" !== S2.config.states.normal.filter.type) C2.getDefaultFilter(X2, a2);else if (S2.config.chart.dropShadow.enabled && A2) {
              var E2 = S2.config.chart.dropShadow;
              C2.dropShadow(X2, E2, a2);
            }
            m2 && (X2.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, X2)), X2.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, X2)), X2.node.addEventListener("mousedown", this.pathMouseDown.bind(this, X2))), X2.attr({
              pathTo: r2,
              pathFrom: s2
            });
            var Y2 = {
              el: X2,
              j: i2,
              realIndex: a2,
              pathFrom: s2,
              pathTo: r2,
              fill: h2,
              strokeWidth: n2,
              delay: c2
            };
            return !P2 || S2.globals.resized || S2.globals.dataChanged ? !S2.globals.resized && S2.globals.dataChanged || L2.showDelayedElements() : L2.animatePathsGradually(g(g({}, Y2), {}, {
              speed: d2
            })), S2.globals.dataChanged && M2 && I2 && L2.animatePathsGradually(g(g({}, Y2), {}, {
              speed: u2
            })), X2;
          }
        }, {
          key: "drawPattern",
          value: function (t3, e2, i2) {
            var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8",
              s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
            return this.w.globals.dom.Paper.pattern(e2, i2, function (r2) {
              "horizontalLines" === t3 ? r2.line(0, 0, i2, 0).stroke({
                color: a2,
                width: s2 + 1
              }) : "verticalLines" === t3 ? r2.line(0, 0, 0, e2).stroke({
                color: a2,
                width: s2 + 1
              }) : "slantedLines" === t3 ? r2.line(0, 0, e2, i2).stroke({
                color: a2,
                width: s2
              }) : "squares" === t3 ? r2.rect(e2, i2).fill("none").stroke({
                color: a2,
                width: s2
              }) : "circles" === t3 && r2.circle(e2).fill("none").stroke({
                color: a2,
                width: s2
              });
            });
          }
        }, {
          key: "drawGradient",
          value: function (t3, e2, i2, a2, s2) {
            var r2,
              o2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
              n2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
              l2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
              h2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
              c2 = this.w;
            e2.length < 9 && 0 === e2.indexOf("#") && (e2 = m.hexToRgba(e2, a2)), i2.length < 9 && 0 === i2.indexOf("#") && (i2 = m.hexToRgba(i2, s2));
            var d2 = 0,
              g2 = 1,
              u2 = 1,
              f2 = null;
            null !== n2 && (d2 = void 0 !== n2[0] ? n2[0] / 100 : 0, g2 = void 0 !== n2[1] ? n2[1] / 100 : 1, u2 = void 0 !== n2[2] ? n2[2] / 100 : 1, f2 = void 0 !== n2[3] ? n2[3] / 100 : null);
            var p2 = !("donut" !== c2.config.chart.type && "pie" !== c2.config.chart.type && "polarArea" !== c2.config.chart.type && "bubble" !== c2.config.chart.type);
            if (r2 = null === l2 || 0 === l2.length ? c2.globals.dom.Paper.gradient(p2 ? "radial" : "linear", function (t4) {
              t4.at(d2, e2, a2), t4.at(g2, i2, s2), t4.at(u2, i2, s2), null !== f2 && t4.at(f2, e2, a2);
            }) : c2.globals.dom.Paper.gradient(p2 ? "radial" : "linear", function (t4) {
              (Array.isArray(l2[h2]) ? l2[h2] : l2).forEach(function (e3) {
                t4.at(e3.offset / 100, e3.color, e3.opacity);
              });
            }), p2) {
              var x2 = c2.globals.gridWidth / 2,
                b2 = c2.globals.gridHeight / 2;
              "bubble" !== c2.config.chart.type ? r2.attr({
                gradientUnits: "userSpaceOnUse",
                cx: x2,
                cy: b2,
                r: o2
              }) : r2.attr({
                cx: 0.5,
                cy: 0.5,
                r: 0.8,
                fx: 0.2,
                fy: 0.2
              });
            } else "vertical" === t3 ? r2.from(0, 0).to(0, 1) : "diagonal" === t3 ? r2.from(0, 0).to(1, 1) : "horizontal" === t3 ? r2.from(0, 1).to(1, 1) : "diagonal2" === t3 && r2.from(1, 0).to(0, 1);
            return r2;
          }
        }, {
          key: "getTextBasedOnMaxWidth",
          value: function (t3) {
            var e2 = t3.text,
              i2 = t3.maxWidth,
              a2 = t3.fontSize,
              s2 = t3.fontFamily,
              r2 = this.getTextRects(e2, a2, s2),
              o2 = r2.width / e2.length,
              n2 = Math.floor(i2 / o2);
            return i2 < r2.width ? e2.slice(0, n2 - 3) + "..." : e2;
          }
        }, {
          key: "drawText",
          value: function (t3) {
            var e2 = this,
              i2 = t3.x,
              a2 = t3.y,
              s2 = t3.text,
              r2 = t3.textAnchor,
              o2 = t3.fontSize,
              n2 = t3.fontFamily,
              l2 = t3.fontWeight,
              h2 = t3.foreColor,
              c2 = t3.opacity,
              d2 = t3.maxWidth,
              u2 = t3.cssClass,
              f2 = void 0 === u2 ? "" : u2,
              p2 = t3.isPlainText,
              x2 = void 0 === p2 || p2,
              b2 = t3.dominantBaseline,
              v2 = void 0 === b2 ? "auto" : b2,
              m2 = this.w;
            void 0 === s2 && (s2 = "");
            var y2 = s2;
            r2 || (r2 = "start"), h2 && h2.length || (h2 = m2.config.chart.foreColor), n2 = n2 || m2.config.chart.fontFamily, l2 = l2 || "regular";
            var w2,
              k2 = {
                maxWidth: d2,
                fontSize: o2 = o2 || "11px",
                fontFamily: n2
              };
            return Array.isArray(s2) ? w2 = m2.globals.dom.Paper.text(function (t4) {
              for (var i3 = 0; i3 < s2.length; i3++) y2 = s2[i3], d2 && (y2 = e2.getTextBasedOnMaxWidth(g({
                text: s2[i3]
              }, k2))), 0 === i3 ? t4.tspan(y2) : t4.tspan(y2).newLine();
            }) : (d2 && (y2 = this.getTextBasedOnMaxWidth(g({
              text: s2
            }, k2))), w2 = x2 ? m2.globals.dom.Paper.plain(s2) : m2.globals.dom.Paper.text(function (t4) {
              return t4.tspan(y2);
            })), w2.attr({
              x: i2,
              y: a2,
              "text-anchor": r2,
              "dominant-baseline": v2,
              "font-size": o2,
              "font-family": n2,
              "font-weight": l2,
              fill: h2,
              class: "apexcharts-text " + f2
            }), w2.node.style.fontFamily = n2, w2.node.style.opacity = c2, w2;
          }
        }, {
          key: "getMarkerPath",
          value: function (t3, e2, i2, a2) {
            var s2 = "";
            switch (i2) {
              case "cross":
                s2 = "M ".concat(t3 - (a2 /= 1.4), " ").concat(e2 - a2, " L ").concat(t3 + a2, " ").concat(e2 + a2, "  M ").concat(t3 - a2, " ").concat(e2 + a2, " L ").concat(t3 + a2, " ").concat(e2 - a2);
                break;
              case "plus":
                s2 = "M ".concat(t3 - (a2 /= 1.12), " ").concat(e2, " L ").concat(t3 + a2, " ").concat(e2, "  M ").concat(t3, " ").concat(e2 - a2, " L ").concat(t3, " ").concat(e2 + a2);
                break;
              case "star":
              case "sparkle":
                var r2 = 5;
                a2 *= 1.15, "sparkle" === i2 && (a2 /= 1.1, r2 = 4);
                for (var o2 = Math.PI / r2, n2 = 0; n2 <= 2 * r2; n2++) {
                  var l2 = n2 * o2,
                    h2 = n2 % 2 == 0 ? a2 : a2 / 2;
                  s2 += (0 === n2 ? "M" : "L") + (t3 + h2 * Math.sin(l2)) + "," + (e2 - h2 * Math.cos(l2));
                }
                s2 += "Z";
                break;
              case "triangle":
                s2 = "M ".concat(t3, " ").concat(e2 - a2, " \n             L ").concat(t3 + a2, " ").concat(e2 + a2, " \n             L ").concat(t3 - a2, " ").concat(e2 + a2, " \n             Z");
                break;
              case "square":
              case "rect":
                s2 = "M ".concat(t3 - (a2 /= 1.125), " ").concat(e2 - a2, " \n           L ").concat(t3 + a2, " ").concat(e2 - a2, " \n           L ").concat(t3 + a2, " ").concat(e2 + a2, " \n           L ").concat(t3 - a2, " ").concat(e2 + a2, " \n           Z");
                break;
              case "diamond":
                a2 *= 1.05, s2 = "M ".concat(t3, " ").concat(e2 - a2, " \n             L ").concat(t3 + a2, " ").concat(e2, " \n             L ").concat(t3, " ").concat(e2 + a2, " \n             L ").concat(t3 - a2, " ").concat(e2, " \n            Z");
                break;
              case "line":
                s2 = "M ".concat(t3 - (a2 /= 1.1), " ").concat(e2, " \n           L ").concat(t3 + a2, " ").concat(e2);
                break;
              default:
                a2 *= 2, s2 = "M ".concat(t3, ", ").concat(e2, " \n           m -").concat(a2 / 2, ", 0 \n           a ").concat(a2 / 2, ",").concat(a2 / 2, " 0 1,0 ").concat(a2, ",0 \n           a ").concat(a2 / 2, ",").concat(a2 / 2, " 0 1,0 -").concat(a2, ",0");
            }
            return s2;
          }
        }, {
          key: "drawMarkerShape",
          value: function (t3, e2, i2, a2, s2) {
            var r2 = this.drawPath({
              d: this.getMarkerPath(t3, e2, i2, a2, s2),
              stroke: s2.pointStrokeColor,
              strokeDashArray: s2.pointStrokeDashArray,
              strokeWidth: s2.pointStrokeWidth,
              fill: s2.pointFillColor,
              fillOpacity: s2.pointFillOpacity,
              strokeOpacity: s2.pointStrokeOpacity
            });
            return r2.attr({
              cx: t3,
              cy: e2,
              shape: s2.shape,
              class: s2.class ? s2.class : ""
            }), r2;
          }
        }, {
          key: "drawMarker",
          value: function (t3, e2, i2) {
            t3 = t3 || 0;
            var a2 = i2.pSize || 0;
            return m.isNumber(e2) || (a2 = 0, e2 = 0), this.drawMarkerShape(t3, e2, null == i2 ? void 0 : i2.shape, a2, g(g({}, i2), "line" === i2.shape || "plus" === i2.shape || "cross" === i2.shape ? {
              pointStrokeColor: i2.pointFillColor,
              pointStrokeOpacity: i2.pointFillOpacity
            } : {}));
          }
        }, {
          key: "pathMouseEnter",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new w(this.ctx),
              s2 = parseInt(t3.node.getAttribute("index"), 10),
              r2 = parseInt(t3.node.getAttribute("j"), 10);
            if ("function" == typeof i2.config.chart.events.dataPointMouseEnter && i2.config.chart.events.dataPointMouseEnter(e2, this.ctx, {
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }), this.ctx.events.fireEvent("dataPointMouseEnter", [e2, this.ctx, {
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }]), ("none" === i2.config.states.active.filter.type || "true" !== t3.node.getAttribute("selected")) && "none" !== i2.config.states.hover.filter.type && !i2.globals.isTouchDevice) {
              var o2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, o2.type, o2.value);
            }
          }
        }, {
          key: "pathMouseLeave",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new w(this.ctx),
              s2 = parseInt(t3.node.getAttribute("index"), 10),
              r2 = parseInt(t3.node.getAttribute("j"), 10);
            "function" == typeof i2.config.chart.events.dataPointMouseLeave && i2.config.chart.events.dataPointMouseLeave(e2, this.ctx, {
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }), this.ctx.events.fireEvent("dataPointMouseLeave", [e2, this.ctx, {
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }]), "none" !== i2.config.states.active.filter.type && "true" === t3.node.getAttribute("selected") || "none" !== i2.config.states.hover.filter.type && a2.getDefaultFilter(t3, s2);
          }
        }, {
          key: "pathMouseDown",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new w(this.ctx),
              s2 = parseInt(t3.node.getAttribute("index"), 10),
              r2 = parseInt(t3.node.getAttribute("j"), 10),
              o2 = "false";
            if ("true" === t3.node.getAttribute("selected")) {
              if (t3.node.setAttribute("selected", "false"), i2.globals.selectedDataPoints[s2].indexOf(r2) > -1) {
                var n2 = i2.globals.selectedDataPoints[s2].indexOf(r2);
                i2.globals.selectedDataPoints[s2].splice(n2, 1);
              }
            } else {
              if (!i2.config.states.active.allowMultipleDataPointsSelection && i2.globals.selectedDataPoints.length > 0) {
                i2.globals.selectedDataPoints = [];
                var l2 = i2.globals.dom.Paper.select(".apexcharts-series path").members,
                  h2 = i2.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,
                  c2 = function (t4) {
                    Array.prototype.forEach.call(t4, function (t5) {
                      t5.node.setAttribute("selected", "false"), a2.getDefaultFilter(t5, s2);
                    });
                  };
                c2(l2), c2(h2);
              }
              t3.node.setAttribute("selected", "true"), o2 = "true", void 0 === i2.globals.selectedDataPoints[s2] && (i2.globals.selectedDataPoints[s2] = []), i2.globals.selectedDataPoints[s2].push(r2);
            }
            if ("true" === o2) {
              var d2 = i2.config.states.active.filter;
              if ("none" !== d2) a2.applyFilter(t3, s2, d2.type, d2.value);else if ("none" !== i2.config.states.hover.filter && !i2.globals.isTouchDevice) {
                var g2 = i2.config.states.hover.filter;
                a2.applyFilter(t3, s2, g2.type, g2.value);
              }
            } else if ("none" !== i2.config.states.active.filter.type) if ("none" === i2.config.states.hover.filter.type || i2.globals.isTouchDevice) a2.getDefaultFilter(t3, s2);else {
              g2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, g2.type, g2.value);
            }
            "function" == typeof i2.config.chart.events.dataPointSelection && i2.config.chart.events.dataPointSelection(e2, this.ctx, {
              selectedDataPoints: i2.globals.selectedDataPoints,
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }), e2 && this.ctx.events.fireEvent("dataPointSelection", [e2, this.ctx, {
              selectedDataPoints: i2.globals.selectedDataPoints,
              seriesIndex: s2,
              dataPointIndex: r2,
              w: i2
            }]);
          }
        }, {
          key: "rotateAroundCenter",
          value: function (t3) {
            var e2 = {};
            return t3 && "function" == typeof t3.getBBox && (e2 = t3.getBBox()), {
              x: e2.x + e2.width / 2,
              y: e2.y + e2.height / 2
            };
          }
        }, {
          key: "getTextRects",
          value: function (t3, e2, i2, a2) {
            var s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
              r2 = this.w,
              o2 = this.drawText({
                x: -200,
                y: -200,
                text: t3,
                textAnchor: "start",
                fontSize: e2,
                fontFamily: i2,
                foreColor: "#fff",
                opacity: 0
              });
            a2 && o2.attr("transform", a2), r2.globals.dom.Paper.add(o2);
            var n2 = o2.bbox();
            return s2 || (n2 = o2.node.getBoundingClientRect()), o2.remove(), {
              width: n2.width,
              height: n2.height
            };
          }
        }, {
          key: "placeTextWithEllipsis",
          value: function (t3, e2, i2) {
            if ("function" == typeof t3.getComputedTextLength && (t3.textContent = e2, e2.length > 0 && t3.getComputedTextLength() >= i2 / 1.1)) {
              for (var a2 = e2.length - 3; a2 > 0; a2 -= 3) if (t3.getSubStringLength(0, a2) <= i2 / 1.1) return void (t3.textContent = e2.substring(0, a2) + "...");
              t3.textContent = ".";
            }
          }
        }], [{
          key: "setAttrs",
          value: function (t3, e2) {
            for (var i2 in e2) e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
          }
        }]), t2;
      }(),
      A = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "getStackedSeriesTotals",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
              e2 = this.w,
              i2 = [];
            if (0 === e2.globals.series.length) return i2;
            for (var a2 = 0; a2 < e2.globals.series[e2.globals.maxValsInArrayIndex].length; a2++) {
              for (var s2 = 0, r2 = 0; r2 < e2.globals.series.length; r2++) void 0 !== e2.globals.series[r2][a2] && -1 === t3.indexOf(r2) && (s2 += e2.globals.series[r2][a2]);
              i2.push(s2);
            }
            return i2;
          }
        }, {
          key: "getSeriesTotalByIndex",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
            return null === t3 ? this.w.config.series.reduce(function (t4, e2) {
              return t4 + e2;
            }, 0) : this.w.globals.series[t3].reduce(function (t4, e2) {
              return t4 + e2;
            }, 0);
          }
        }, {
          key: "getStackedSeriesTotalsByGroups",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = [];
            return e2.globals.seriesGroups.forEach(function (a2) {
              var s2 = [];
              e2.config.series.forEach(function (t4, i3) {
                a2.indexOf(e2.globals.seriesNames[i3]) > -1 && s2.push(i3);
              });
              var r2 = e2.globals.series.map(function (t4, e3) {
                return -1 === s2.indexOf(e3) ? e3 : -1;
              }).filter(function (t4) {
                return -1 !== t4;
              });
              i2.push(t3.getStackedSeriesTotals(r2));
            }), i2;
          }
        }, {
          key: "setSeriesYAxisMappings",
          value: function () {
            var t3 = this.w.globals,
              e2 = this.w.config,
              i2 = [],
              a2 = [],
              s2 = [],
              r2 = t3.series.length > e2.yaxis.length || e2.yaxis.some(function (t4) {
                return Array.isArray(t4.seriesName);
              });
            e2.series.forEach(function (t4, e3) {
              s2.push(e3), a2.push(null);
            }), e2.yaxis.forEach(function (t4, e3) {
              i2[e3] = [];
            });
            var o2 = [];
            e2.yaxis.forEach(function (t4, a3) {
              var n3 = false;
              if (t4.seriesName) {
                var l3 = [];
                Array.isArray(t4.seriesName) ? l3 = t4.seriesName : l3.push(t4.seriesName), l3.forEach(function (t5) {
                  e2.series.forEach(function (e3, o3) {
                    if (e3.name === t5) {
                      var l4 = o3;
                      a3 === o3 || r2 ? !r2 || s2.indexOf(o3) > -1 ? i2[a3].push([a3, o3]) : console.warn("Series '" + e3.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i2[o3].push([o3, a3]), l4 = a3), n3 = true, -1 !== (l4 = s2.indexOf(l4)) && s2.splice(l4, 1);
                    }
                  });
                });
              }
              n3 || o2.push(a3);
            }), i2 = i2.map(function (t4, e3) {
              var i3 = [];
              return t4.forEach(function (t5) {
                a2[t5[1]] = t5[0], i3.push(t5[1]);
              }), i3;
            });
            for (var n2 = e2.yaxis.length - 1, l2 = 0; l2 < o2.length && (n2 = o2[l2], i2[n2] = [], s2); l2++) {
              var h2 = s2[0];
              s2.shift(), i2[n2].push(h2), a2[h2] = n2;
            }
            s2.forEach(function (t4) {
              i2[n2].push(t4), a2[t4] = n2;
            }), t3.seriesYAxisMap = i2.map(function (t4) {
              return t4;
            }), t3.seriesYAxisReverseMap = a2.map(function (t4) {
              return t4;
            }), t3.seriesYAxisMap.forEach(function (t4, i3) {
              t4.forEach(function (t5) {
                e2.series[t5] && void 0 === e2.series[t5].group && (e2.series[t5].group = "apexcharts-axis-".concat(i3.toString()));
              });
            });
          }
        }, {
          key: "isSeriesNull",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
            return 0 === (null === t3 ? this.w.config.series.filter(function (t4) {
              return null !== t4;
            }) : this.w.config.series[t3].data.filter(function (t4) {
              return null !== t4;
            })).length;
          }
        }, {
          key: "seriesHaveSameValues",
          value: function (t3) {
            return this.w.globals.series[t3].every(function (t4, e2, i2) {
              return t4 === i2[0];
            });
          }
        }, {
          key: "getCategoryLabels",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3.slice();
            return e2.config.xaxis.convertedCatToNumeric && (i2 = t3.map(function (t4, i3) {
              return e2.config.xaxis.labels.formatter(t4 - e2.globals.minX + 1);
            })), i2;
          }
        }, {
          key: "getLargestSeries",
          value: function () {
            var t3 = this.w;
            t3.globals.maxValsInArrayIndex = t3.globals.series.map(function (t4) {
              return t4.length;
            }).indexOf(Math.max.apply(Math, t3.globals.series.map(function (t4) {
              return t4.length;
            })));
          }
        }, {
          key: "getLargestMarkerSize",
          value: function () {
            var t3 = this.w,
              e2 = 0;
            return t3.globals.markers.size.forEach(function (t4) {
              e2 = Math.max(e2, t4);
            }), t3.config.markers.discrete && t3.config.markers.discrete.length && t3.config.markers.discrete.forEach(function (t4) {
              e2 = Math.max(e2, t4.size);
            }), e2 > 0 && (t3.config.markers.hover.size > 0 ? e2 = t3.config.markers.hover.size : e2 += t3.config.markers.hover.sizeOffset), t3.globals.markers.largestSize = e2, e2;
          }
        }, {
          key: "getSeriesTotals",
          value: function () {
            var t3 = this.w;
            t3.globals.seriesTotals = t3.globals.series.map(function (t4, e2) {
              var i2 = 0;
              if (Array.isArray(t4)) for (var a2 = 0; a2 < t4.length; a2++) i2 += t4[a2];else i2 += t4;
              return i2;
            });
          }
        }, {
          key: "getSeriesTotalsXRange",
          value: function (t3, e2) {
            var i2 = this.w;
            return i2.globals.series.map(function (a2, s2) {
              for (var r2 = 0, o2 = 0; o2 < a2.length; o2++) i2.globals.seriesX[s2][o2] > t3 && i2.globals.seriesX[s2][o2] < e2 && (r2 += a2[o2]);
              return r2;
            });
          }
        }, {
          key: "getPercentSeries",
          value: function () {
            var t3 = this.w;
            t3.globals.seriesPercent = t3.globals.series.map(function (e2, i2) {
              var a2 = [];
              if (Array.isArray(e2)) for (var s2 = 0; s2 < e2.length; s2++) {
                var r2 = t3.globals.stackedSeriesTotals[s2],
                  o2 = 0;
                r2 && (o2 = 100 * e2[s2] / r2), a2.push(o2);
              } else {
                var n2 = 100 * e2 / t3.globals.seriesTotals.reduce(function (t4, e3) {
                  return t4 + e3;
                }, 0);
                a2.push(n2);
              }
              return a2;
            });
          }
        }, {
          key: "getCalculatedRatios",
          value: function () {
            var t3,
              e2,
              i2,
              a2 = this,
              s2 = this.w,
              r2 = s2.globals,
              o2 = [],
              n2 = 0,
              l2 = [],
              h2 = 0.1,
              c2 = 0;
            if (r2.yRange = [], r2.isMultipleYAxis) for (var d2 = 0; d2 < r2.minYArr.length; d2++) r2.yRange.push(Math.abs(r2.minYArr[d2] - r2.maxYArr[d2])), l2.push(0);else r2.yRange.push(Math.abs(r2.minY - r2.maxY));
            r2.xRange = Math.abs(r2.maxX - r2.minX), r2.zRange = Math.abs(r2.maxZ - r2.minZ);
            for (var g2 = 0; g2 < r2.yRange.length; g2++) o2.push(r2.yRange[g2] / r2.gridHeight);
            if (e2 = r2.xRange / r2.gridWidth, t3 = r2.yRange / r2.gridWidth, i2 = r2.xRange / r2.gridHeight, (n2 = r2.zRange / r2.gridHeight * 16) || (n2 = 1), r2.minY !== Number.MIN_VALUE && 0 !== Math.abs(r2.minY) && (r2.hasNegs = true), s2.globals.seriesYAxisReverseMap.length > 0) {
              var u2 = function (t4, e3) {
                var i3 = s2.config.yaxis[s2.globals.seriesYAxisReverseMap[e3]],
                  r3 = t4 < 0 ? -1 : 1;
                return t4 = Math.abs(t4), i3.logarithmic && (t4 = a2.getBaseLog(i3.logBase, t4)), -r3 * t4 / o2[e3];
              };
              if (r2.isMultipleYAxis) {
                l2 = [];
                for (var f2 = 0; f2 < o2.length; f2++) l2.push(u2(r2.minYArr[f2], f2));
              } else (l2 = []).push(u2(r2.minY, 0)), r2.minY !== Number.MIN_VALUE && 0 !== Math.abs(r2.minY) && (h2 = -r2.minY / t3, c2 = r2.minX / e2);
            } else (l2 = []).push(0), h2 = 0, c2 = 0;
            return {
              yRatio: o2,
              invertedYRatio: t3,
              zRatio: n2,
              xRatio: e2,
              invertedXRatio: i2,
              baseLineInvertedY: h2,
              baseLineY: l2,
              baseLineX: c2
            };
          }
        }, {
          key: "getLogSeries",
          value: function (t3) {
            var e2 = this,
              i2 = this.w;
            return i2.globals.seriesLog = t3.map(function (t4, a2) {
              var s2 = i2.globals.seriesYAxisReverseMap[a2];
              return i2.config.yaxis[s2] && i2.config.yaxis[s2].logarithmic ? t4.map(function (t5) {
                return null === t5 ? null : e2.getLogVal(i2.config.yaxis[s2].logBase, t5, a2);
              }) : t4;
            }), i2.globals.invalidLogScale ? t3 : i2.globals.seriesLog;
          }
        }, {
          key: "getBaseLog",
          value: function (t3, e2) {
            return Math.log(e2) / Math.log(t3);
          }
        }, {
          key: "getLogVal",
          value: function (t3, e2, i2) {
            if (e2 <= 0) return 0;
            var a2 = this.w,
              s2 = 0 === a2.globals.minYArr[i2] ? -1 : this.getBaseLog(t3, a2.globals.minYArr[i2]),
              r2 = (0 === a2.globals.maxYArr[i2] ? 0 : this.getBaseLog(t3, a2.globals.maxYArr[i2])) - s2;
            return e2 < 1 ? e2 / r2 : (this.getBaseLog(t3, e2) - s2) / r2;
          }
        }, {
          key: "getLogYRatios",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = this.w.globals;
            return a2.yLogRatio = t3.slice(), a2.logYRange = a2.yRange.map(function (t4, s2) {
              var r2 = i2.globals.seriesYAxisReverseMap[s2];
              if (i2.config.yaxis[r2] && e2.w.config.yaxis[r2].logarithmic) {
                var o2,
                  n2 = -Number.MAX_VALUE,
                  l2 = Number.MIN_VALUE;
                return a2.seriesLog.forEach(function (t5, e3) {
                  t5.forEach(function (t6) {
                    i2.config.yaxis[e3] && i2.config.yaxis[e3].logarithmic && (n2 = Math.max(t6, n2), l2 = Math.min(t6, l2));
                  });
                }), o2 = Math.pow(a2.yRange[s2], Math.abs(l2 - n2) / a2.yRange[s2]), a2.yLogRatio[s2] = o2 / a2.gridHeight, o2;
              }
            }), a2.invalidLogScale ? t3.slice() : a2.yLogRatio;
          }
        }, {
          key: "drawSeriesByGroup",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = [];
            return t3.series.length > 0 && e2.forEach(function (e3) {
              var o2 = [],
                n2 = [];
              t3.i.forEach(function (i3, a3) {
                s2.config.series[i3].group === e3 && (o2.push(t3.series[a3]), n2.push(i3));
              }), o2.length > 0 && r2.push(a2.draw(o2, i2, n2));
            }), r2;
          }
        }], [{
          key: "checkComboSeries",
          value: function (t3, e2) {
            var i2 = false,
              a2 = 0,
              s2 = 0;
            return void 0 === e2 && (e2 = "line"), t3.length && void 0 !== t3[0].type && t3.forEach(function (t4) {
              "bar" !== t4.type && "column" !== t4.type && "candlestick" !== t4.type && "boxPlot" !== t4.type || a2++, void 0 !== t4.type && t4.type !== e2 && s2++;
            }), s2 > 0 && (i2 = true), {
              comboBarCount: a2,
              comboCharts: i2
            };
          }
        }, {
          key: "extendArrayProps",
          value: function (t3, e2, i2) {
            var a2, s2, r2, o2, n2, l2;
            (null !== (a2 = e2) && void 0 !== a2 && a2.yaxis && (e2 = t3.extendYAxis(e2, i2)), null !== (s2 = e2) && void 0 !== s2 && s2.annotations) && (e2.annotations.yaxis && (e2 = t3.extendYAxisAnnotations(e2)), null !== (r2 = e2) && void 0 !== r2 && null !== (o2 = r2.annotations) && void 0 !== o2 && o2.xaxis && (e2 = t3.extendXAxisAnnotations(e2)), null !== (n2 = e2) && void 0 !== n2 && null !== (l2 = n2.annotations) && void 0 !== l2 && l2.points && (e2 = t3.extendPointAnnotations(e2)));
            return e2;
          }
        }]), t2;
      }(),
      S = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.annoCtx = e2;
        }
        return s(t2, [{
          key: "setOrientations",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
              i2 = this.w;
            if ("vertical" === t3.label.orientation) {
              var a2 = null !== e2 ? e2 : 0,
                s2 = i2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a2, "']"));
              if (null !== s2) {
                var r2 = s2.getBoundingClientRect();
                s2.setAttribute("x", parseFloat(s2.getAttribute("x")) - r2.height + 4);
                var o2 = "top" === t3.label.position ? r2.width : -r2.width;
                s2.setAttribute("y", parseFloat(s2.getAttribute("y")) + o2);
                var n2 = this.annoCtx.graphics.rotateAroundCenter(s2),
                  l2 = n2.x,
                  h2 = n2.y;
                s2.setAttribute("transform", "rotate(-90 ".concat(l2, " ").concat(h2, ")"));
              }
            }
          }
        }, {
          key: "addBackgroundToAnno",
          value: function (t3, e2) {
            var i2 = this.w;
            if (!t3 || !e2.label.text || !String(e2.label.text).trim()) return null;
            var a2 = i2.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),
              s2 = t3.getBoundingClientRect(),
              r2 = e2.label.style.padding,
              o2 = r2.left,
              n2 = r2.right,
              l2 = r2.top,
              h2 = r2.bottom;
            if ("vertical" === e2.label.orientation) {
              var c2 = [o2, n2, l2, h2];
              l2 = c2[0], h2 = c2[1], o2 = c2[2], n2 = c2[3];
            }
            var d2 = s2.left - a2.left - o2,
              g2 = s2.top - a2.top - l2,
              u2 = this.annoCtx.graphics.drawRect(d2 - i2.globals.barPadForNumericAxis, g2, s2.width + o2 + n2, s2.height + l2 + h2, e2.label.borderRadius, e2.label.style.background, 1, e2.label.borderWidth, e2.label.borderColor, 0);
            return e2.id && u2.node.classList.add(e2.id), u2;
          }
        }, {
          key: "annotationsBackground",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = function (i3, a2, s2) {
                var r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(a2, "']"));
                if (r2) {
                  var o2 = r2.parentNode,
                    n2 = t3.addBackgroundToAnno(r2, i3);
                  n2 && (o2.insertBefore(n2.node, r2), i3.label.mouseEnter && n2.node.addEventListener("mouseenter", i3.label.mouseEnter.bind(t3, i3)), i3.label.mouseLeave && n2.node.addEventListener("mouseleave", i3.label.mouseLeave.bind(t3, i3)), i3.label.click && n2.node.addEventListener("click", i3.label.click.bind(t3, i3)));
                }
              };
            e2.config.annotations.xaxis.forEach(function (t4, e3) {
              return i2(t4, e3, "xaxis");
            }), e2.config.annotations.yaxis.forEach(function (t4, e3) {
              return i2(t4, e3, "yaxis");
            }), e2.config.annotations.points.forEach(function (t4, e3) {
              return i2(t4, e3, "point");
            });
          }
        }, {
          key: "getY1Y2",
          value: function (t3, e2) {
            var i2,
              a2 = this.w,
              s2 = "y1" === t3 ? e2.y : e2.y2,
              r2 = false;
            if (this.annoCtx.invertAxis) {
              var o2 = a2.config.xaxis.convertedCatToNumeric ? a2.globals.categoryLabels : a2.globals.labels,
                n2 = o2.indexOf(s2),
                l2 = a2.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(".concat(n2 + 1, ")"));
              i2 = l2 ? parseFloat(l2.getAttribute("y")) : (a2.globals.gridHeight / o2.length - 1) * (n2 + 1) - a2.globals.barHeight, void 0 !== e2.seriesIndex && a2.globals.barHeight && (i2 -= a2.globals.barHeight / 2 * (a2.globals.series.length - 1) - a2.globals.barHeight * e2.seriesIndex);
            } else {
              var h2,
                c2 = a2.globals.seriesYAxisMap[e2.yAxisIndex][0],
                d2 = a2.config.yaxis[e2.yAxisIndex].logarithmic ? new A(this.annoCtx.ctx).getLogVal(a2.config.yaxis[e2.yAxisIndex].logBase, s2, c2) / a2.globals.yLogRatio[c2] : (s2 - a2.globals.minYArr[c2]) / (a2.globals.yRange[c2] / a2.globals.gridHeight);
              i2 = a2.globals.gridHeight - Math.min(Math.max(d2, 0), a2.globals.gridHeight), r2 = d2 > a2.globals.gridHeight || d2 < 0, !e2.marker || void 0 !== e2.y && null !== e2.y || (i2 = 0), null !== (h2 = a2.config.yaxis[e2.yAxisIndex]) && void 0 !== h2 && h2.reversed && (i2 = d2);
            }
            return "string" == typeof s2 && s2.includes("px") && (i2 = parseFloat(s2)), {
              yP: i2,
              clipped: r2
            };
          }
        }, {
          key: "getX1X2",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = "x1" === t3 ? e2.x : e2.x2,
              s2 = this.annoCtx.invertAxis ? i2.globals.minY : i2.globals.minX,
              r2 = this.annoCtx.invertAxis ? i2.globals.maxY : i2.globals.maxX,
              o2 = this.annoCtx.invertAxis ? i2.globals.yRange[0] : i2.globals.xRange,
              n2 = false,
              l2 = this.annoCtx.inversedReversedAxis ? (r2 - a2) / (o2 / i2.globals.gridWidth) : (a2 - s2) / (o2 / i2.globals.gridWidth);
            return "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i2.globals.dataFormatXNumeric || i2.config.chart.sparkline.enabled || (l2 = this.getStringX(a2)), "string" == typeof a2 && a2.includes("px") && (l2 = parseFloat(a2)), null == a2 && e2.marker && (l2 = i2.globals.gridWidth), void 0 !== e2.seriesIndex && i2.globals.barWidth && !this.annoCtx.invertAxis && (l2 -= i2.globals.barWidth / 2 * (i2.globals.series.length - 1) - i2.globals.barWidth * e2.seriesIndex), l2 > i2.globals.gridWidth ? (l2 = i2.globals.gridWidth, n2 = true) : l2 < 0 && (l2 = 0, n2 = true), {
              x: l2,
              clipped: n2
            };
          }
        }, {
          key: "getStringX",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3;
            e2.config.xaxis.convertedCatToNumeric && e2.globals.categoryLabels.length && (t3 = e2.globals.categoryLabels.indexOf(t3) + 1);
            var a2 = e2.globals.labels.map(function (t4) {
                return Array.isArray(t4) ? t4.join(" ") : t4;
              }).indexOf(t3),
              s2 = e2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(".concat(a2 + 1, ")"));
            return s2 && (i2 = parseFloat(s2.getAttribute("x"))), i2;
          }
        }]), t2;
      }(),
      C = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.annoCtx = e2, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new S(this.annoCtx);
        }
        return s(t2, [{
          key: "addXaxisAnnotation",
          value: function (t3, e2, i2) {
            var a2,
              s2 = this.w,
              r2 = this.helpers.getX1X2("x1", t3),
              o2 = r2.x,
              n2 = r2.clipped,
              l2 = true,
              h2 = t3.label.text,
              c2 = t3.strokeDashArray;
            if (m.isNumber(o2)) {
              if (null === t3.x2 || void 0 === t3.x2) {
                if (!n2) {
                  var d2 = this.annoCtx.graphics.drawLine(o2 + t3.offsetX, 0 + t3.offsetY, o2 + t3.offsetX, s2.globals.gridHeight + t3.offsetY, t3.borderColor, c2, t3.borderWidth);
                  e2.appendChild(d2.node), t3.id && d2.node.classList.add(t3.id);
                }
              } else {
                var g2 = this.helpers.getX1X2("x2", t3);
                if (a2 = g2.x, l2 = g2.clipped, !n2 || !l2) {
                  if (a2 < o2) {
                    var u2 = o2;
                    o2 = a2, a2 = u2;
                  }
                  var f2 = this.annoCtx.graphics.drawRect(o2 + t3.offsetX, 0 + t3.offsetY, a2 - o2, s2.globals.gridHeight + t3.offsetY, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, c2);
                  f2.node.classList.add("apexcharts-annotation-rect"), f2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(f2.node), t3.id && f2.node.classList.add(t3.id);
                }
              }
              if (!n2 || !l2) {
                var p2 = this.annoCtx.graphics.getTextRects(h2, parseFloat(t3.label.style.fontSize)),
                  x2 = "top" === t3.label.position ? 4 : "center" === t3.label.position ? s2.globals.gridHeight / 2 + ("vertical" === t3.label.orientation ? p2.width / 2 : 0) : s2.globals.gridHeight,
                  b2 = this.annoCtx.graphics.drawText({
                    x: o2 + t3.label.offsetX,
                    y: x2 + t3.label.offsetY - ("vertical" === t3.label.orientation ? "top" === t3.label.position ? p2.width / 2 - 12 : -p2.width / 2 : 0),
                    text: h2,
                    textAnchor: t3.label.textAnchor,
                    fontSize: t3.label.style.fontSize,
                    fontFamily: t3.label.style.fontFamily,
                    fontWeight: t3.label.style.fontWeight,
                    foreColor: t3.label.style.color,
                    cssClass: "apexcharts-xaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "")
                  });
                b2.attr({
                  rel: i2
                }), e2.appendChild(b2.node), this.annoCtx.helpers.setOrientations(t3, i2);
              }
            }
          }
        }, {
          key: "drawXAxisAnnotations",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = this.annoCtx.graphics.group({
                class: "apexcharts-xaxis-annotations"
              });
            return e2.config.annotations.xaxis.map(function (e3, a2) {
              t3.addXaxisAnnotation(e3, i2.node, a2);
            }), i2;
          }
        }]), t2;
      }(),
      L = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        }
        return s(t2, [{
          key: "isValidDate",
          value: function (t3) {
            return "number" != typeof t3 && !isNaN(this.parseDate(t3));
          }
        }, {
          key: "getTimeStamp",
          value: function (t3) {
            return Date.parse(t3) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toISOString().substr(0, 25)).getTime() : new Date(t3).getTime() : t3;
          }
        }, {
          key: "getDate",
          value: function (t3) {
            return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toUTCString()) : new Date(t3);
          }
        }, {
          key: "parseDate",
          value: function (t3) {
            var e2 = Date.parse(t3);
            if (!isNaN(e2)) return this.getTimeStamp(t3);
            var i2 = Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
            return i2 = this.getTimeStamp(i2);
          }
        }, {
          key: "parseDateWithTimezone",
          value: function (t3) {
            return Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
          }
        }, {
          key: "formatDate",
          value: function (t3, e2) {
            var i2 = this.w.globals.locale,
              a2 = this.w.config.xaxis.labels.datetimeUTC,
              s2 = ["\0"].concat(p(i2.months)),
              r2 = [""].concat(p(i2.shortMonths)),
              o2 = [""].concat(p(i2.days)),
              n2 = [""].concat(p(i2.shortDays));
            function l2(t4, e3) {
              var i3 = t4 + "";
              for (e3 = e3 || 2; i3.length < e3;) i3 = "0" + i3;
              return i3;
            }
            var h2 = a2 ? t3.getUTCFullYear() : t3.getFullYear();
            e2 = (e2 = (e2 = e2.replace(/(^|[^\\])yyyy+/g, "$1" + h2)).replace(/(^|[^\\])yy/g, "$1" + h2.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h2);
            var c2 = (a2 ? t3.getUTCMonth() : t3.getMonth()) + 1;
            e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])MMMM+/g, "$1" + s2[0])).replace(/(^|[^\\])MMM/g, "$1" + r2[0])).replace(/(^|[^\\])MM/g, "$1" + l2(c2))).replace(/(^|[^\\])M/g, "$1" + c2);
            var d2 = a2 ? t3.getUTCDate() : t3.getDate();
            e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])dddd+/g, "$1" + o2[0])).replace(/(^|[^\\])ddd/g, "$1" + n2[0])).replace(/(^|[^\\])dd/g, "$1" + l2(d2))).replace(/(^|[^\\])d/g, "$1" + d2);
            var g2 = a2 ? t3.getUTCHours() : t3.getHours(),
              u2 = g2 > 12 ? g2 - 12 : 0 === g2 ? 12 : g2;
            e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])HH+/g, "$1" + l2(g2))).replace(/(^|[^\\])H/g, "$1" + g2)).replace(/(^|[^\\])hh+/g, "$1" + l2(u2))).replace(/(^|[^\\])h/g, "$1" + u2);
            var f2 = a2 ? t3.getUTCMinutes() : t3.getMinutes();
            e2 = (e2 = e2.replace(/(^|[^\\])mm+/g, "$1" + l2(f2))).replace(/(^|[^\\])m/g, "$1" + f2);
            var x2 = a2 ? t3.getUTCSeconds() : t3.getSeconds();
            e2 = (e2 = e2.replace(/(^|[^\\])ss+/g, "$1" + l2(x2))).replace(/(^|[^\\])s/g, "$1" + x2);
            var b2 = a2 ? t3.getUTCMilliseconds() : t3.getMilliseconds();
            e2 = e2.replace(/(^|[^\\])fff+/g, "$1" + l2(b2, 3)), b2 = Math.round(b2 / 10), e2 = e2.replace(/(^|[^\\])ff/g, "$1" + l2(b2)), b2 = Math.round(b2 / 10);
            var v2 = g2 < 12 ? "AM" : "PM";
            e2 = (e2 = (e2 = e2.replace(/(^|[^\\])f/g, "$1" + b2)).replace(/(^|[^\\])TT+/g, "$1" + v2)).replace(/(^|[^\\])T/g, "$1" + v2.charAt(0));
            var m2 = v2.toLowerCase();
            e2 = (e2 = e2.replace(/(^|[^\\])tt+/g, "$1" + m2)).replace(/(^|[^\\])t/g, "$1" + m2.charAt(0));
            var y2 = -t3.getTimezoneOffset(),
              w2 = a2 || !y2 ? "Z" : y2 > 0 ? "+" : "-";
            if (!a2) {
              var k2 = (y2 = Math.abs(y2)) % 60;
              w2 += l2(Math.floor(y2 / 60)) + ":" + l2(k2);
            }
            e2 = e2.replace(/(^|[^\\])K/g, "$1" + w2);
            var A2 = (a2 ? t3.getUTCDay() : t3.getDay()) + 1;
            return e2 = (e2 = (e2 = (e2 = (e2 = e2.replace(new RegExp(o2[0], "g"), o2[A2])).replace(new RegExp(n2[0], "g"), n2[A2])).replace(new RegExp(s2[0], "g"), s2[c2])).replace(new RegExp(r2[0], "g"), r2[c2])).replace(/\\(.)/g, "$1");
          }
        }, {
          key: "getTimeUnitsfromTimestamp",
          value: function (t3, e2, i2) {
            var a2 = this.w;
            void 0 !== a2.config.xaxis.min && (t3 = a2.config.xaxis.min), void 0 !== a2.config.xaxis.max && (e2 = a2.config.xaxis.max);
            var s2 = this.getDate(t3),
              r2 = this.getDate(e2),
              o2 = this.formatDate(s2, "yyyy MM dd HH mm ss fff").split(" "),
              n2 = this.formatDate(r2, "yyyy MM dd HH mm ss fff").split(" ");
            return {
              minMillisecond: parseInt(o2[6], 10),
              maxMillisecond: parseInt(n2[6], 10),
              minSecond: parseInt(o2[5], 10),
              maxSecond: parseInt(n2[5], 10),
              minMinute: parseInt(o2[4], 10),
              maxMinute: parseInt(n2[4], 10),
              minHour: parseInt(o2[3], 10),
              maxHour: parseInt(n2[3], 10),
              minDate: parseInt(o2[2], 10),
              maxDate: parseInt(n2[2], 10),
              minMonth: parseInt(o2[1], 10) - 1,
              maxMonth: parseInt(n2[1], 10) - 1,
              minYear: parseInt(o2[0], 10),
              maxYear: parseInt(n2[0], 10)
            };
          }
        }, {
          key: "isLeapYear",
          value: function (t3) {
            return t3 % 4 == 0 && t3 % 100 != 0 || t3 % 400 == 0;
          }
        }, {
          key: "calculcateLastDaysOfMonth",
          value: function (t3, e2, i2) {
            return this.determineDaysOfMonths(t3, e2) - i2;
          }
        }, {
          key: "determineDaysOfYear",
          value: function (t3) {
            var e2 = 365;
            return this.isLeapYear(t3) && (e2 = 366), e2;
          }
        }, {
          key: "determineRemainingDaysOfYear",
          value: function (t3, e2, i2) {
            var a2 = this.daysCntOfYear[e2] + i2;
            return e2 > 1 && this.isLeapYear() && a2++, a2;
          }
        }, {
          key: "determineDaysOfMonths",
          value: function (t3, e2) {
            var i2 = 30;
            switch (t3 = m.monthMod(t3), true) {
              case this.months30.indexOf(t3) > -1:
                2 === t3 && (i2 = this.isLeapYear(e2) ? 29 : 28);
                break;
              case this.months31.indexOf(t3) > -1:
              default:
                i2 = 31;
            }
            return i2;
          }
        }]), t2;
      }(),
      P = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.tooltipKeyFormat = "dd MMM";
        }
        return s(t2, [{
          key: "xLabelFormat",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w;
            if ("datetime" === s2.config.xaxis.type && void 0 === s2.config.xaxis.labels.formatter && void 0 === s2.config.tooltip.x.formatter) {
              var r2 = new L(this.ctx);
              return r2.formatDate(r2.getDate(e2), s2.config.tooltip.x.format);
            }
            return t3(e2, i2, a2);
          }
        }, {
          key: "defaultGeneralFormatter",
          value: function (t3) {
            return Array.isArray(t3) ? t3.map(function (t4) {
              return t4;
            }) : t3;
          }
        }, {
          key: "defaultYFormatter",
          value: function (t3, e2, i2) {
            var a2 = this.w;
            if (m.isNumber(t3)) if (0 !== a2.globals.yValueDecimal) t3 = t3.toFixed(void 0 !== e2.decimalsInFloat ? e2.decimalsInFloat : a2.globals.yValueDecimal);else {
              var s2 = t3.toFixed(0);
              t3 = t3 == s2 ? s2 : t3.toFixed(1);
            }
            return t3;
          }
        }, {
          key: "setLabelFormatters",
          value: function () {
            var t3 = this,
              e2 = this.w;
            return e2.globals.xaxisTooltipFormatter = function (e3) {
              return t3.defaultGeneralFormatter(e3);
            }, e2.globals.ttKeyFormatter = function (e3) {
              return t3.defaultGeneralFormatter(e3);
            }, e2.globals.ttZFormatter = function (t4) {
              return t4;
            }, e2.globals.legendFormatter = function (e3) {
              return t3.defaultGeneralFormatter(e3);
            }, void 0 !== e2.config.xaxis.labels.formatter ? e2.globals.xLabelFormatter = e2.config.xaxis.labels.formatter : e2.globals.xLabelFormatter = function (t4) {
              if (m.isNumber(t4)) {
                if (!e2.config.xaxis.convertedCatToNumeric && "numeric" === e2.config.xaxis.type) {
                  if (m.isNumber(e2.config.xaxis.decimalsInFloat)) return t4.toFixed(e2.config.xaxis.decimalsInFloat);
                  var i2 = e2.globals.maxX - e2.globals.minX;
                  return i2 > 0 && i2 < 100 ? t4.toFixed(1) : t4.toFixed(0);
                }
                if (e2.globals.isBarHorizontal) {
                  if (e2.globals.maxY - e2.globals.minYArr < 4) return t4.toFixed(1);
                }
                return t4.toFixed(0);
              }
              return t4;
            }, "function" == typeof e2.config.tooltip.x.formatter ? e2.globals.ttKeyFormatter = e2.config.tooltip.x.formatter : e2.globals.ttKeyFormatter = e2.globals.xLabelFormatter, "function" == typeof e2.config.xaxis.tooltip.formatter && (e2.globals.xaxisTooltipFormatter = e2.config.xaxis.tooltip.formatter), (Array.isArray(e2.config.tooltip.y) || void 0 !== e2.config.tooltip.y.formatter) && (e2.globals.ttVal = e2.config.tooltip.y), void 0 !== e2.config.tooltip.z.formatter && (e2.globals.ttZFormatter = e2.config.tooltip.z.formatter), void 0 !== e2.config.legend.formatter && (e2.globals.legendFormatter = e2.config.legend.formatter), e2.config.yaxis.forEach(function (i2, a2) {
              void 0 !== i2.labels.formatter ? e2.globals.yLabelFormatters[a2] = i2.labels.formatter : e2.globals.yLabelFormatters[a2] = function (s2) {
                return e2.globals.xyCharts ? Array.isArray(s2) ? s2.map(function (e3) {
                  return t3.defaultYFormatter(e3, i2, a2);
                }) : t3.defaultYFormatter(s2, i2, a2) : s2;
              };
            }), e2.globals;
          }
        }, {
          key: "heatmapLabelFormatters",
          value: function () {
            var t3 = this.w;
            if ("heatmap" === t3.config.chart.type) {
              t3.globals.yAxisScale[0].result = t3.globals.seriesNames.slice();
              var e2 = t3.globals.seriesNames.reduce(function (t4, e3) {
                return t4.length > e3.length ? t4 : e3;
              }, 0);
              t3.globals.yAxisScale[0].niceMax = e2, t3.globals.yAxisScale[0].niceMin = e2;
            }
          }
        }]), t2;
      }(),
      M = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "getLabel",
          value: function (t3, e2, i2, a2) {
            var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],
              r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px",
              o2 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6],
              n2 = this.w,
              l2 = void 0 === t3[a2] ? "" : t3[a2],
              h2 = l2,
              c2 = n2.globals.xLabelFormatter,
              d2 = n2.config.xaxis.labels.formatter,
              g2 = false,
              u2 = new P(this.ctx),
              f2 = l2;
            o2 && (h2 = u2.xLabelFormat(c2, l2, f2, {
              i: a2,
              dateFormatter: new L(this.ctx).formatDate,
              w: n2
            }), void 0 !== d2 && (h2 = d2(l2, t3[a2], {
              i: a2,
              dateFormatter: new L(this.ctx).formatDate,
              w: n2
            })));
            var p2, x2;
            e2.length > 0 ? (p2 = e2[a2].unit, x2 = null, e2.forEach(function (t4) {
              "month" === t4.unit ? x2 = "year" : "day" === t4.unit ? x2 = "month" : "hour" === t4.unit ? x2 = "day" : "minute" === t4.unit && (x2 = "hour");
            }), g2 = x2 === p2, i2 = e2[a2].position, h2 = e2[a2].value) : "datetime" === n2.config.xaxis.type && void 0 === d2 && (h2 = ""), void 0 === h2 && (h2 = ""), h2 = Array.isArray(h2) ? h2 : h2.toString();
            var b2 = new k(this.ctx),
              v2 = {};
            v2 = n2.globals.rotateXLabels && o2 ? b2.getTextRects(h2, parseInt(r2, 10), null, "rotate(".concat(n2.config.xaxis.labels.rotate, " 0 0)"), false) : b2.getTextRects(h2, parseInt(r2, 10));
            var m2 = !n2.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
            return !Array.isArray(h2) && ("NaN" === String(h2) || s2.indexOf(h2) >= 0 && m2) && (h2 = ""), {
              x: i2,
              text: h2,
              textRect: v2,
              isBold: g2
            };
          }
        }, {
          key: "checkLabelBasedOnTickamount",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = a2.config.xaxis.tickAmount;
            return "dataPoints" === s2 && (s2 = Math.round(a2.globals.gridWidth / 120)), s2 > i2 || t3 % Math.round(i2 / (s2 + 1)) == 0 || (e2.text = ""), e2;
          }
        }, {
          key: "checkForOverflowingLabels",
          value: function (t3, e2, i2, a2, s2) {
            var r2 = this.w;
            if (0 === t3 && r2.globals.skipFirstTimelinelabel && (e2.text = ""), t3 === i2 - 1 && r2.globals.skipLastTimelinelabel && (e2.text = ""), r2.config.xaxis.labels.hideOverlappingLabels && a2.length > 0) {
              var o2 = s2[s2.length - 1];
              e2.x < o2.textRect.width / (r2.globals.rotateXLabels ? Math.abs(r2.config.xaxis.labels.rotate) / 12 : 1.01) + o2.x && (e2.text = "");
            }
            return e2;
          }
        }, {
          key: "checkForReversedLabels",
          value: function (t3, e2) {
            var i2 = this.w;
            return i2.config.yaxis[t3] && i2.config.yaxis[t3].reversed && e2.reverse(), e2;
          }
        }, {
          key: "yAxisAllSeriesCollapsed",
          value: function (t3) {
            var e2 = this.w.globals;
            return !e2.seriesYAxisMap[t3].some(function (t4) {
              return -1 === e2.collapsedSeriesIndices.indexOf(t4);
            });
          }
        }, {
          key: "translateYAxisIndex",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.globals,
              a2 = e2.config.yaxis;
            return i2.series.length > a2.length || a2.some(function (t4) {
              return Array.isArray(t4.seriesName);
            }) ? t3 : i2.seriesYAxisReverseMap[t3];
          }
        }, {
          key: "isYAxisHidden",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config.yaxis[t3];
            if (!i2.show || this.yAxisAllSeriesCollapsed(t3)) return true;
            if (!i2.showForNullSeries) {
              var a2 = e2.globals.seriesYAxisMap[t3],
                s2 = new A(this.ctx);
              return a2.every(function (t4) {
                return s2.isSeriesNull(t4);
              });
            }
            return false;
          }
        }, {
          key: "getYAxisForeColor",
          value: function (t3, e2) {
            var i2 = this.w;
            return Array.isArray(t3) && i2.globals.yAxisScale[e2] && this.ctx.theme.pushExtraColors(t3, i2.globals.yAxisScale[e2].result.length, false), t3;
          }
        }, {
          key: "drawYAxisTicks",
          value: function (t3, e2, i2, a2, s2, r2, o2) {
            var n2 = this.w,
              l2 = new k(this.ctx),
              h2 = n2.globals.translateY + n2.config.yaxis[s2].labels.offsetY;
            if (n2.globals.isBarHorizontal ? h2 = 0 : "heatmap" === n2.config.chart.type && (h2 += r2 / 2), a2.show && e2 > 0) {
              true === n2.config.yaxis[s2].opposite && (t3 += a2.width);
              for (var c2 = e2; c2 >= 0; c2--) {
                var d2 = l2.drawLine(t3 + i2.offsetX - a2.width + a2.offsetX, h2 + a2.offsetY, t3 + i2.offsetX + a2.offsetX, h2 + a2.offsetY, a2.color);
                o2.add(d2), h2 += r2;
              }
            }
          }
        }]), t2;
      }(),
      I = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new S(this.annoCtx), this.axesUtils = new M(this.annoCtx);
        }
        return s(t2, [{
          key: "addYaxisAnnotation",
          value: function (t3, e2, i2) {
            var a2,
              s2 = this.w,
              r2 = t3.strokeDashArray,
              o2 = this.helpers.getY1Y2("y1", t3),
              n2 = o2.yP,
              l2 = o2.clipped,
              h2 = true,
              c2 = false,
              d2 = t3.label.text;
            if (null === t3.y2 || void 0 === t3.y2) {
              if (!l2) {
                c2 = true;
                var g2 = this.annoCtx.graphics.drawLine(0 + t3.offsetX, n2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), n2 + t3.offsetY, t3.borderColor, r2, t3.borderWidth);
                e2.appendChild(g2.node), t3.id && g2.node.classList.add(t3.id);
              }
            } else {
              if (a2 = (o2 = this.helpers.getY1Y2("y2", t3)).yP, h2 = o2.clipped, a2 > n2) {
                var u2 = n2;
                n2 = a2, a2 = u2;
              }
              if (!l2 || !h2) {
                c2 = true;
                var f2 = this.annoCtx.graphics.drawRect(0 + t3.offsetX, a2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), n2 - a2, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, r2);
                f2.node.classList.add("apexcharts-annotation-rect"), f2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(f2.node), t3.id && f2.node.classList.add(t3.id);
              }
            }
            if (c2) {
              var p2 = "right" === t3.label.position ? s2.globals.gridWidth : "center" === t3.label.position ? s2.globals.gridWidth / 2 : 0,
                x2 = this.annoCtx.graphics.drawText({
                  x: p2 + t3.label.offsetX,
                  y: (null != a2 ? a2 : n2) + t3.label.offsetY - 3,
                  text: d2,
                  textAnchor: t3.label.textAnchor,
                  fontSize: t3.label.style.fontSize,
                  fontFamily: t3.label.style.fontFamily,
                  fontWeight: t3.label.style.fontWeight,
                  foreColor: t3.label.style.color,
                  cssClass: "apexcharts-yaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "")
                });
              x2.attr({
                rel: i2
              }), e2.appendChild(x2.node);
            }
          }
        }, {
          key: "_getYAxisAnnotationWidth",
          value: function (t3) {
            var e2 = this.w;
            e2.globals.gridWidth;
            return (t3.width.indexOf("%") > -1 ? e2.globals.gridWidth * parseInt(t3.width, 10) / 100 : parseInt(t3.width, 10)) + t3.offsetX;
          }
        }, {
          key: "drawYAxisAnnotations",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = this.annoCtx.graphics.group({
                class: "apexcharts-yaxis-annotations"
              });
            return e2.config.annotations.yaxis.forEach(function (e3, a2) {
              e3.yAxisIndex = t3.axesUtils.translateYAxisIndex(e3.yAxisIndex), t3.axesUtils.isYAxisHidden(e3.yAxisIndex) && t3.axesUtils.yAxisAllSeriesCollapsed(e3.yAxisIndex) || t3.addYaxisAnnotation(e3, i2.node, a2);
            }), i2;
          }
        }]), t2;
      }(),
      T = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new S(this.annoCtx);
        }
        return s(t2, [{
          key: "addPointAnnotation",
          value: function (t3, e2, i2) {
            if (!(this.w.globals.collapsedSeriesIndices.indexOf(t3.seriesIndex) > -1)) {
              var a2 = this.helpers.getX1X2("x1", t3),
                s2 = a2.x,
                r2 = a2.clipped,
                o2 = (a2 = this.helpers.getY1Y2("y1", t3)).yP,
                n2 = a2.clipped;
              if (m.isNumber(s2) && !n2 && !r2) {
                var l2 = {
                    pSize: t3.marker.size,
                    pointStrokeWidth: t3.marker.strokeWidth,
                    pointFillColor: t3.marker.fillColor,
                    pointStrokeColor: t3.marker.strokeColor,
                    shape: t3.marker.shape,
                    pRadius: t3.marker.radius,
                    class: "apexcharts-point-annotation-marker ".concat(t3.marker.cssClass, " ").concat(t3.id ? t3.id : "")
                  },
                  h2 = this.annoCtx.graphics.drawMarker(s2 + t3.marker.offsetX, o2 + t3.marker.offsetY, l2);
                e2.appendChild(h2.node);
                var c2 = t3.label.text ? t3.label.text : "",
                  d2 = this.annoCtx.graphics.drawText({
                    x: s2 + t3.label.offsetX,
                    y: o2 + t3.label.offsetY - t3.marker.size - parseFloat(t3.label.style.fontSize) / 1.6,
                    text: c2,
                    textAnchor: t3.label.textAnchor,
                    fontSize: t3.label.style.fontSize,
                    fontFamily: t3.label.style.fontFamily,
                    fontWeight: t3.label.style.fontWeight,
                    foreColor: t3.label.style.color,
                    cssClass: "apexcharts-point-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "")
                  });
                if (d2.attr({
                  rel: i2
                }), e2.appendChild(d2.node), t3.customSVG.SVG) {
                  var g2 = this.annoCtx.graphics.group({
                    class: "apexcharts-point-annotations-custom-svg " + t3.customSVG.cssClass
                  });
                  g2.attr({
                    transform: "translate(".concat(s2 + t3.customSVG.offsetX, ", ").concat(o2 + t3.customSVG.offsetY, ")")
                  }), g2.node.innerHTML = t3.customSVG.SVG, e2.appendChild(g2.node);
                }
                if (t3.image.path) {
                  var u2 = t3.image.width ? t3.image.width : 20,
                    f2 = t3.image.height ? t3.image.height : 20;
                  h2 = this.annoCtx.addImage({
                    x: s2 + t3.image.offsetX - u2 / 2,
                    y: o2 + t3.image.offsetY - f2 / 2,
                    width: u2,
                    height: f2,
                    path: t3.image.path,
                    appendTo: ".apexcharts-point-annotations"
                  });
                }
                t3.mouseEnter && h2.node.addEventListener("mouseenter", t3.mouseEnter.bind(this, t3)), t3.mouseLeave && h2.node.addEventListener("mouseleave", t3.mouseLeave.bind(this, t3)), t3.click && h2.node.addEventListener("click", t3.click.bind(this, t3));
              }
            }
          }
        }, {
          key: "drawPointAnnotations",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = this.annoCtx.graphics.group({
                class: "apexcharts-point-annotations"
              });
            return e2.config.annotations.points.map(function (e3, a2) {
              t3.addPointAnnotation(e3, i2.node, a2);
            }), i2;
          }
        }]), t2;
      }();
    var z = {
        name: "en",
        options: {
          months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
          days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
          shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          toolbar: {
            exportToSVG: "Download SVG",
            exportToPNG: "Download PNG",
            exportToCSV: "Download CSV",
            menu: "Menu",
            selection: "Selection",
            selectionZoom: "Selection Zoom",
            zoomIn: "Zoom In",
            zoomOut: "Zoom Out",
            pan: "Panning",
            reset: "Reset Zoom"
          }
        }
      },
      X = function () {
        function t2() {
          i(this, t2), this.yAxis = {
            show: true,
            showAlways: false,
            showForNullSeries: true,
            seriesName: void 0,
            opposite: false,
            reversed: false,
            logarithmic: false,
            logBase: 10,
            tickAmount: void 0,
            stepSize: void 0,
            forceNiceScale: false,
            max: void 0,
            min: void 0,
            floating: false,
            decimalsInFloat: void 0,
            labels: {
              show: true,
              showDuplicates: false,
              minWidth: 0,
              maxWidth: 160,
              offsetX: 0,
              offsetY: 0,
              align: void 0,
              rotate: 0,
              padding: 20,
              style: {
                colors: [],
                fontSize: "11px",
                fontWeight: 400,
                fontFamily: void 0,
                cssClass: ""
              },
              formatter: void 0
            },
            axisBorder: {
              show: false,
              color: "#e0e0e0",
              width: 1,
              offsetX: 0,
              offsetY: 0
            },
            axisTicks: {
              show: false,
              color: "#e0e0e0",
              width: 6,
              offsetX: 0,
              offsetY: 0
            },
            title: {
              text: void 0,
              rotate: -90,
              offsetY: 0,
              offsetX: 0,
              style: {
                color: void 0,
                fontSize: "11px",
                fontWeight: 900,
                fontFamily: void 0,
                cssClass: ""
              }
            },
            tooltip: {
              enabled: false,
              offsetX: 0
            },
            crosshairs: {
              show: true,
              position: "front",
              stroke: {
                color: "#b6b6b6",
                width: 1,
                dashArray: 0
              }
            }
          }, this.pointAnnotation = {
            id: void 0,
            x: 0,
            y: null,
            yAxisIndex: 0,
            seriesIndex: void 0,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            marker: {
              size: 4,
              fillColor: "#fff",
              strokeWidth: 2,
              strokeColor: "#333",
              shape: "circle",
              offsetX: 0,
              offsetY: 0,
              cssClass: ""
            },
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "middle",
              offsetX: 0,
              offsetY: 0,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: {
                  left: 5,
                  right: 5,
                  top: 2,
                  bottom: 2
                }
              }
            },
            customSVG: {
              SVG: void 0,
              cssClass: void 0,
              offsetX: 0,
              offsetY: 0
            },
            image: {
              path: void 0,
              width: 20,
              height: 20,
              offsetX: 0,
              offsetY: 0
            }
          }, this.yAxisAnnotation = {
            id: void 0,
            y: 0,
            y2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: 0.3,
            offsetX: 0,
            offsetY: 0,
            width: "100%",
            yAxisIndex: 0,
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "end",
              position: "right",
              offsetX: 0,
              offsetY: -3,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: {
                  left: 5,
                  right: 5,
                  top: 2,
                  bottom: 2
                }
              }
            }
          }, this.xAxisAnnotation = {
            id: void 0,
            x: 0,
            x2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: 0.3,
            offsetX: 0,
            offsetY: 0,
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "middle",
              orientation: "vertical",
              position: "top",
              offsetX: 0,
              offsetY: 0,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: {
                  left: 5,
                  right: 5,
                  top: 2,
                  bottom: 2
                }
              }
            }
          }, this.text = {
            x: 0,
            y: 0,
            text: "",
            textAnchor: "start",
            foreColor: void 0,
            fontSize: "13px",
            fontFamily: void 0,
            fontWeight: 400,
            appendTo: ".apexcharts-annotations",
            backgroundColor: "transparent",
            borderColor: "#c2c2c2",
            borderRadius: 0,
            borderWidth: 0,
            paddingLeft: 4,
            paddingRight: 4,
            paddingTop: 2,
            paddingBottom: 2
          };
        }
        return s(t2, [{
          key: "init",
          value: function () {
            return {
              annotations: {
                yaxis: [this.yAxisAnnotation],
                xaxis: [this.xAxisAnnotation],
                points: [this.pointAnnotation],
                texts: [],
                images: [],
                shapes: []
              },
              chart: {
                animations: {
                  enabled: true,
                  easing: "easeinout",
                  speed: 800,
                  animateGradually: {
                    delay: 150,
                    enabled: true
                  },
                  dynamicAnimation: {
                    enabled: true,
                    speed: 350
                  }
                },
                background: "",
                locales: [z],
                defaultLocale: "en",
                dropShadow: {
                  enabled: false,
                  enabledOnSeries: void 0,
                  top: 2,
                  left: 2,
                  blur: 4,
                  color: "#000",
                  opacity: 0.35
                },
                events: {
                  animationEnd: void 0,
                  beforeMount: void 0,
                  mounted: void 0,
                  updated: void 0,
                  click: void 0,
                  mouseMove: void 0,
                  mouseLeave: void 0,
                  xAxisLabelClick: void 0,
                  legendClick: void 0,
                  markerClick: void 0,
                  selection: void 0,
                  dataPointSelection: void 0,
                  dataPointMouseEnter: void 0,
                  dataPointMouseLeave: void 0,
                  beforeZoom: void 0,
                  beforeResetZoom: void 0,
                  zoomed: void 0,
                  scrolled: void 0,
                  brushScrolled: void 0
                },
                foreColor: "#373d3f",
                fontFamily: "Helvetica, Arial, sans-serif",
                height: "auto",
                parentHeightOffset: 15,
                redrawOnParentResize: true,
                redrawOnWindowResize: true,
                id: void 0,
                group: void 0,
                nonce: void 0,
                offsetX: 0,
                offsetY: 0,
                selection: {
                  enabled: false,
                  type: "x",
                  fill: {
                    color: "#24292e",
                    opacity: 0.1
                  },
                  stroke: {
                    width: 1,
                    color: "#24292e",
                    opacity: 0.4,
                    dashArray: 3
                  },
                  xaxis: {
                    min: void 0,
                    max: void 0
                  },
                  yaxis: {
                    min: void 0,
                    max: void 0
                  }
                },
                sparkline: {
                  enabled: false
                },
                brush: {
                  enabled: false,
                  autoScaleYaxis: true,
                  target: void 0,
                  targets: void 0
                },
                stacked: false,
                stackOnlyBar: true,
                stackType: "normal",
                toolbar: {
                  show: true,
                  offsetX: 0,
                  offsetY: 0,
                  tools: {
                    download: true,
                    selection: true,
                    zoom: true,
                    zoomin: true,
                    zoomout: true,
                    pan: true,
                    reset: true,
                    customIcons: []
                  },
                  export: {
                    csv: {
                      filename: void 0,
                      columnDelimiter: ",",
                      headerCategory: "category",
                      headerValue: "value",
                      categoryFormatter: void 0,
                      valueFormatter: void 0
                    },
                    png: {
                      filename: void 0
                    },
                    svg: {
                      filename: void 0
                    },
                    scale: void 0,
                    width: void 0
                  },
                  autoSelected: "zoom"
                },
                type: "line",
                width: "100%",
                zoom: {
                  enabled: true,
                  type: "x",
                  autoScaleYaxis: false,
                  allowMouseWheelZoom: true,
                  zoomedArea: {
                    fill: {
                      color: "#90CAF9",
                      opacity: 0.4
                    },
                    stroke: {
                      color: "#0D47A1",
                      opacity: 0.4,
                      width: 1
                    }
                  }
                }
              },
              plotOptions: {
                line: {
                  isSlopeChart: false
                },
                area: {
                  fillTo: "origin"
                },
                bar: {
                  horizontal: false,
                  columnWidth: "70%",
                  barHeight: "70%",
                  distributed: false,
                  borderRadius: 0,
                  borderRadiusApplication: "around",
                  borderRadiusWhenStacked: "last",
                  rangeBarOverlap: true,
                  rangeBarGroupRows: false,
                  hideZeroBarsWhenGrouped: false,
                  isDumbbell: false,
                  dumbbellColors: void 0,
                  isFunnel: false,
                  isFunnel3d: true,
                  colors: {
                    ranges: [],
                    backgroundBarColors: [],
                    backgroundBarOpacity: 1,
                    backgroundBarRadius: 0
                  },
                  dataLabels: {
                    position: "top",
                    maxItems: 100,
                    hideOverflowingLabels: true,
                    orientation: "horizontal",
                    total: {
                      enabled: false,
                      formatter: void 0,
                      offsetX: 0,
                      offsetY: 0,
                      style: {
                        color: "#373d3f",
                        fontSize: "12px",
                        fontFamily: void 0,
                        fontWeight: 600
                      }
                    }
                  }
                },
                bubble: {
                  zScaling: true,
                  minBubbleRadius: void 0,
                  maxBubbleRadius: void 0
                },
                candlestick: {
                  colors: {
                    upward: "#00B746",
                    downward: "#EF403C"
                  },
                  wick: {
                    useFillColor: true
                  }
                },
                boxPlot: {
                  colors: {
                    upper: "#00E396",
                    lower: "#008FFB"
                  }
                },
                heatmap: {
                  radius: 2,
                  enableShades: true,
                  shadeIntensity: 0.5,
                  reverseNegativeShade: false,
                  distributed: false,
                  useFillColorAsStroke: false,
                  colorScale: {
                    inverse: false,
                    ranges: [],
                    min: void 0,
                    max: void 0
                  }
                },
                treemap: {
                  enableShades: true,
                  shadeIntensity: 0.5,
                  distributed: false,
                  reverseNegativeShade: false,
                  useFillColorAsStroke: false,
                  borderRadius: 4,
                  dataLabels: {
                    format: "scale"
                  },
                  colorScale: {
                    inverse: false,
                    ranges: [],
                    min: void 0,
                    max: void 0
                  }
                },
                radialBar: {
                  inverseOrder: false,
                  startAngle: 0,
                  endAngle: 360,
                  offsetX: 0,
                  offsetY: 0,
                  hollow: {
                    margin: 5,
                    size: "50%",
                    background: "transparent",
                    image: void 0,
                    imageWidth: 150,
                    imageHeight: 150,
                    imageOffsetX: 0,
                    imageOffsetY: 0,
                    imageClipped: true,
                    position: "front",
                    dropShadow: {
                      enabled: false,
                      top: 0,
                      left: 0,
                      blur: 3,
                      color: "#000",
                      opacity: 0.5
                    }
                  },
                  track: {
                    show: true,
                    startAngle: void 0,
                    endAngle: void 0,
                    background: "#f2f2f2",
                    strokeWidth: "97%",
                    opacity: 1,
                    margin: 5,
                    dropShadow: {
                      enabled: false,
                      top: 0,
                      left: 0,
                      blur: 3,
                      color: "#000",
                      opacity: 0.5
                    }
                  },
                  dataLabels: {
                    show: true,
                    name: {
                      show: true,
                      fontSize: "16px",
                      fontFamily: void 0,
                      fontWeight: 600,
                      color: void 0,
                      offsetY: 0,
                      formatter: function (t3) {
                        return t3;
                      }
                    },
                    value: {
                      show: true,
                      fontSize: "14px",
                      fontFamily: void 0,
                      fontWeight: 400,
                      color: void 0,
                      offsetY: 16,
                      formatter: function (t3) {
                        return t3 + "%";
                      }
                    },
                    total: {
                      show: false,
                      label: "Total",
                      fontSize: "16px",
                      fontWeight: 600,
                      fontFamily: void 0,
                      color: void 0,
                      formatter: function (t3) {
                        return t3.globals.seriesTotals.reduce(function (t4, e2) {
                          return t4 + e2;
                        }, 0) / t3.globals.series.length + "%";
                      }
                    }
                  },
                  barLabels: {
                    enabled: false,
                    offsetX: 0,
                    offsetY: 0,
                    useSeriesColors: true,
                    fontFamily: void 0,
                    fontWeight: 600,
                    fontSize: "16px",
                    formatter: function (t3) {
                      return t3;
                    },
                    onClick: void 0
                  }
                },
                pie: {
                  customScale: 1,
                  offsetX: 0,
                  offsetY: 0,
                  startAngle: 0,
                  endAngle: 360,
                  expandOnClick: true,
                  dataLabels: {
                    offset: 0,
                    minAngleToShowLabel: 10
                  },
                  donut: {
                    size: "65%",
                    background: "transparent",
                    labels: {
                      show: false,
                      name: {
                        show: true,
                        fontSize: "16px",
                        fontFamily: void 0,
                        fontWeight: 600,
                        color: void 0,
                        offsetY: -10,
                        formatter: function (t3) {
                          return t3;
                        }
                      },
                      value: {
                        show: true,
                        fontSize: "20px",
                        fontFamily: void 0,
                        fontWeight: 400,
                        color: void 0,
                        offsetY: 10,
                        formatter: function (t3) {
                          return t3;
                        }
                      },
                      total: {
                        show: false,
                        showAlways: false,
                        label: "Total",
                        fontSize: "16px",
                        fontWeight: 400,
                        fontFamily: void 0,
                        color: void 0,
                        formatter: function (t3) {
                          return t3.globals.seriesTotals.reduce(function (t4, e2) {
                            return t4 + e2;
                          }, 0);
                        }
                      }
                    }
                  }
                },
                polarArea: {
                  rings: {
                    strokeWidth: 1,
                    strokeColor: "#e8e8e8"
                  },
                  spokes: {
                    strokeWidth: 1,
                    connectorColors: "#e8e8e8"
                  }
                },
                radar: {
                  size: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  polygons: {
                    strokeWidth: 1,
                    strokeColors: "#e8e8e8",
                    connectorColors: "#e8e8e8",
                    fill: {
                      colors: void 0
                    }
                  }
                }
              },
              colors: void 0,
              dataLabels: {
                enabled: true,
                enabledOnSeries: void 0,
                formatter: function (t3) {
                  return null !== t3 ? t3 : "";
                },
                textAnchor: "middle",
                distributed: false,
                offsetX: 0,
                offsetY: 0,
                style: {
                  fontSize: "12px",
                  fontFamily: void 0,
                  fontWeight: 600,
                  colors: void 0
                },
                background: {
                  enabled: true,
                  foreColor: "#fff",
                  borderRadius: 2,
                  padding: 4,
                  opacity: 0.9,
                  borderWidth: 1,
                  borderColor: "#fff",
                  dropShadow: {
                    enabled: false,
                    top: 1,
                    left: 1,
                    blur: 1,
                    color: "#000",
                    opacity: 0.45
                  }
                },
                dropShadow: {
                  enabled: false,
                  top: 1,
                  left: 1,
                  blur: 1,
                  color: "#000",
                  opacity: 0.45
                }
              },
              fill: {
                type: "solid",
                colors: void 0,
                opacity: 0.85,
                gradient: {
                  shade: "dark",
                  type: "horizontal",
                  shadeIntensity: 0.5,
                  gradientToColors: void 0,
                  inverseColors: true,
                  opacityFrom: 1,
                  opacityTo: 1,
                  stops: [0, 50, 100],
                  colorStops: []
                },
                image: {
                  src: [],
                  width: void 0,
                  height: void 0
                },
                pattern: {
                  style: "squares",
                  width: 6,
                  height: 6,
                  strokeWidth: 2
                }
              },
              forecastDataPoints: {
                count: 0,
                fillOpacity: 0.5,
                strokeWidth: void 0,
                dashArray: 4
              },
              grid: {
                show: true,
                borderColor: "#e0e0e0",
                strokeDashArray: 0,
                position: "back",
                xaxis: {
                  lines: {
                    show: false
                  }
                },
                yaxis: {
                  lines: {
                    show: true
                  }
                },
                row: {
                  colors: void 0,
                  opacity: 0.5
                },
                column: {
                  colors: void 0,
                  opacity: 0.5
                },
                padding: {
                  top: 0,
                  right: 10,
                  bottom: 0,
                  left: 12
                }
              },
              labels: [],
              legend: {
                show: true,
                showForSingleSeries: false,
                showForNullSeries: true,
                showForZeroSeries: true,
                floating: false,
                position: "bottom",
                horizontalAlign: "center",
                inverseOrder: false,
                fontSize: "12px",
                fontFamily: void 0,
                fontWeight: 400,
                width: void 0,
                height: void 0,
                formatter: void 0,
                tooltipHoverFormatter: void 0,
                offsetX: -20,
                offsetY: 4,
                customLegendItems: [],
                labels: {
                  colors: void 0,
                  useSeriesColors: false
                },
                markers: {
                  size: 7,
                  fillColors: void 0,
                  strokeWidth: 1,
                  shape: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  customHTML: void 0,
                  onClick: void 0
                },
                itemMargin: {
                  horizontal: 5,
                  vertical: 4
                },
                onItemClick: {
                  toggleDataSeries: true
                },
                onItemHover: {
                  highlightDataSeries: true
                }
              },
              markers: {
                discrete: [],
                size: 0,
                colors: void 0,
                strokeColors: "#fff",
                strokeWidth: 2,
                strokeOpacity: 0.9,
                strokeDashArray: 0,
                fillOpacity: 1,
                shape: "circle",
                offsetX: 0,
                offsetY: 0,
                showNullDataPoints: true,
                onClick: void 0,
                onDblClick: void 0,
                hover: {
                  size: void 0,
                  sizeOffset: 3
                }
              },
              noData: {
                text: void 0,
                align: "center",
                verticalAlign: "middle",
                offsetX: 0,
                offsetY: 0,
                style: {
                  color: void 0,
                  fontSize: "14px",
                  fontFamily: void 0
                }
              },
              responsive: [],
              series: void 0,
              states: {
                normal: {
                  filter: {
                    type: "none",
                    value: 0
                  }
                },
                hover: {
                  filter: {
                    type: "lighten",
                    value: 0.1
                  }
                },
                active: {
                  allowMultipleDataPointsSelection: false,
                  filter: {
                    type: "darken",
                    value: 0.5
                  }
                }
              },
              title: {
                text: void 0,
                align: "left",
                margin: 5,
                offsetX: 0,
                offsetY: 0,
                floating: false,
                style: {
                  fontSize: "14px",
                  fontWeight: 900,
                  fontFamily: void 0,
                  color: void 0
                }
              },
              subtitle: {
                text: void 0,
                align: "left",
                margin: 5,
                offsetX: 0,
                offsetY: 30,
                floating: false,
                style: {
                  fontSize: "12px",
                  fontWeight: 400,
                  fontFamily: void 0,
                  color: void 0
                }
              },
              stroke: {
                show: true,
                curve: "smooth",
                lineCap: "butt",
                width: 2,
                colors: void 0,
                dashArray: 0,
                fill: {
                  type: "solid",
                  colors: void 0,
                  opacity: 0.85,
                  gradient: {
                    shade: "dark",
                    type: "horizontal",
                    shadeIntensity: 0.5,
                    gradientToColors: void 0,
                    inverseColors: true,
                    opacityFrom: 1,
                    opacityTo: 1,
                    stops: [0, 50, 100],
                    colorStops: []
                  }
                }
              },
              tooltip: {
                enabled: true,
                enabledOnSeries: void 0,
                shared: true,
                hideEmptySeries: false,
                followCursor: false,
                intersect: false,
                inverseOrder: false,
                custom: void 0,
                fillSeriesColor: false,
                theme: "light",
                cssClass: "",
                style: {
                  fontSize: "12px",
                  fontFamily: void 0
                },
                onDatasetHover: {
                  highlightDataSeries: false
                },
                x: {
                  show: true,
                  format: "dd MMM",
                  formatter: void 0
                },
                y: {
                  formatter: void 0,
                  title: {
                    formatter: function (t3) {
                      return t3 ? t3 + ": " : "";
                    }
                  }
                },
                z: {
                  formatter: void 0,
                  title: "Size: "
                },
                marker: {
                  show: true,
                  fillColors: void 0
                },
                items: {
                  display: "flex"
                },
                fixed: {
                  enabled: false,
                  position: "topRight",
                  offsetX: 0,
                  offsetY: 0
                }
              },
              xaxis: {
                type: "category",
                categories: [],
                convertedCatToNumeric: false,
                offsetX: 0,
                offsetY: 0,
                overwriteCategories: void 0,
                labels: {
                  show: true,
                  rotate: -45,
                  rotateAlways: false,
                  hideOverlappingLabels: true,
                  trim: false,
                  minHeight: void 0,
                  maxHeight: 120,
                  showDuplicates: true,
                  style: {
                    colors: [],
                    fontSize: "12px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    cssClass: ""
                  },
                  offsetX: 0,
                  offsetY: 0,
                  format: void 0,
                  formatter: void 0,
                  datetimeUTC: true,
                  datetimeFormatter: {
                    year: "yyyy",
                    month: "MMM 'yy",
                    day: "dd MMM",
                    hour: "HH:mm",
                    minute: "HH:mm:ss",
                    second: "HH:mm:ss"
                  }
                },
                group: {
                  groups: [],
                  style: {
                    colors: [],
                    fontSize: "12px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    cssClass: ""
                  }
                },
                axisBorder: {
                  show: true,
                  color: "#e0e0e0",
                  width: "100%",
                  height: 1,
                  offsetX: 0,
                  offsetY: 0
                },
                axisTicks: {
                  show: true,
                  color: "#e0e0e0",
                  height: 6,
                  offsetX: 0,
                  offsetY: 0
                },
                stepSize: void 0,
                tickAmount: void 0,
                tickPlacement: "on",
                min: void 0,
                max: void 0,
                range: void 0,
                floating: false,
                decimalsInFloat: void 0,
                position: "bottom",
                title: {
                  text: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  style: {
                    color: void 0,
                    fontSize: "12px",
                    fontWeight: 900,
                    fontFamily: void 0,
                    cssClass: ""
                  }
                },
                crosshairs: {
                  show: true,
                  width: 1,
                  position: "back",
                  opacity: 0.9,
                  stroke: {
                    color: "#b6b6b6",
                    width: 1,
                    dashArray: 3
                  },
                  fill: {
                    type: "solid",
                    color: "#B1B9C4",
                    gradient: {
                      colorFrom: "#D8E3F0",
                      colorTo: "#BED1E6",
                      stops: [0, 100],
                      opacityFrom: 0.4,
                      opacityTo: 0.5
                    }
                  },
                  dropShadow: {
                    enabled: false,
                    left: 0,
                    top: 0,
                    blur: 1,
                    opacity: 0.4
                  }
                },
                tooltip: {
                  enabled: true,
                  offsetY: 0,
                  formatter: void 0,
                  style: {
                    fontSize: "12px",
                    fontFamily: void 0
                  }
                }
              },
              yaxis: this.yAxis,
              theme: {
                mode: "",
                palette: "palette1",
                monochrome: {
                  enabled: false,
                  color: "#008FFB",
                  shadeTo: "light",
                  shadeIntensity: 0.65
                }
              }
            };
          }
        }]), t2;
      }(),
      E = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.graphics = new k(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new S(this), this.xAxisAnnotations = new C(this), this.yAxisAnnotations = new I(this), this.pointsAnnotations = new T(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
        }
        return s(t2, [{
          key: "drawAxesAnnotations",
          value: function () {
            var t3 = this.w;
            if (t3.globals.axisCharts && t3.globals.dataPoints) {
              for (var e2 = this.yAxisAnnotations.drawYAxisAnnotations(), i2 = this.xAxisAnnotations.drawXAxisAnnotations(), a2 = this.pointsAnnotations.drawPointAnnotations(), s2 = t3.config.chart.animations.enabled, r2 = [e2, i2, a2], o2 = [i2.node, e2.node, a2.node], n2 = 0; n2 < 3; n2++) t3.globals.dom.elGraphical.add(r2[n2]), !s2 || t3.globals.resized || t3.globals.dataChanged || "scatter" !== t3.config.chart.type && "bubble" !== t3.config.chart.type && t3.globals.dataPoints > 1 && o2[n2].classList.add("apexcharts-element-hidden"), t3.globals.delayedElements.push({
                el: o2[n2],
                index: 0
              });
              this.helpers.annotationsBackground();
            }
          }
        }, {
          key: "drawImageAnnos",
          value: function () {
            var t3 = this;
            this.w.config.annotations.images.map(function (e2, i2) {
              t3.addImage(e2, i2);
            });
          }
        }, {
          key: "drawTextAnnos",
          value: function () {
            var t3 = this;
            this.w.config.annotations.texts.map(function (e2, i2) {
              t3.addText(e2, i2);
            });
          }
        }, {
          key: "addXaxisAnnotation",
          value: function (t3, e2, i2) {
            this.xAxisAnnotations.addXaxisAnnotation(t3, e2, i2);
          }
        }, {
          key: "addYaxisAnnotation",
          value: function (t3, e2, i2) {
            this.yAxisAnnotations.addYaxisAnnotation(t3, e2, i2);
          }
        }, {
          key: "addPointAnnotation",
          value: function (t3, e2, i2) {
            this.pointsAnnotations.addPointAnnotation(t3, e2, i2);
          }
        }, {
          key: "addText",
          value: function (t3, e2) {
            var i2 = t3.x,
              a2 = t3.y,
              s2 = t3.text,
              r2 = t3.textAnchor,
              o2 = t3.foreColor,
              n2 = t3.fontSize,
              l2 = t3.fontFamily,
              h2 = t3.fontWeight,
              c2 = t3.cssClass,
              d2 = t3.backgroundColor,
              g2 = t3.borderWidth,
              u2 = t3.strokeDashArray,
              f2 = t3.borderRadius,
              p2 = t3.borderColor,
              x2 = t3.appendTo,
              b2 = void 0 === x2 ? ".apexcharts-svg" : x2,
              v2 = t3.paddingLeft,
              m2 = void 0 === v2 ? 4 : v2,
              y2 = t3.paddingRight,
              w2 = void 0 === y2 ? 4 : y2,
              k2 = t3.paddingBottom,
              A2 = void 0 === k2 ? 2 : k2,
              S2 = t3.paddingTop,
              C2 = void 0 === S2 ? 2 : S2,
              L2 = this.w,
              P2 = this.graphics.drawText({
                x: i2,
                y: a2,
                text: s2,
                textAnchor: r2 || "start",
                fontSize: n2 || "12px",
                fontWeight: h2 || "regular",
                fontFamily: l2 || L2.config.chart.fontFamily,
                foreColor: o2 || L2.config.chart.foreColor,
                cssClass: c2
              }),
              M2 = L2.globals.dom.baseEl.querySelector(b2);
            M2 && M2.appendChild(P2.node);
            var I2 = P2.bbox();
            if (s2) {
              var T2 = this.graphics.drawRect(I2.x - m2, I2.y - C2, I2.width + m2 + w2, I2.height + A2 + C2, f2, d2 || "transparent", 1, g2, p2, u2);
              M2.insertBefore(T2.node, P2.node);
            }
          }
        }, {
          key: "addImage",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = t3.path,
              s2 = t3.x,
              r2 = void 0 === s2 ? 0 : s2,
              o2 = t3.y,
              n2 = void 0 === o2 ? 0 : o2,
              l2 = t3.width,
              h2 = void 0 === l2 ? 20 : l2,
              c2 = t3.height,
              d2 = void 0 === c2 ? 20 : c2,
              g2 = t3.appendTo,
              u2 = void 0 === g2 ? ".apexcharts-svg" : g2,
              f2 = i2.globals.dom.Paper.image(a2);
            f2.size(h2, d2).move(r2, n2);
            var p2 = i2.globals.dom.baseEl.querySelector(u2);
            return p2 && p2.appendChild(f2.node), f2;
          }
        }, {
          key: "addXaxisAnnotationExternal",
          value: function (t3, e2, i2) {
            return this.addAnnotationExternal({
              params: t3,
              pushToMemory: e2,
              context: i2,
              type: "xaxis",
              contextMethod: i2.addXaxisAnnotation
            }), i2;
          }
        }, {
          key: "addYaxisAnnotationExternal",
          value: function (t3, e2, i2) {
            return this.addAnnotationExternal({
              params: t3,
              pushToMemory: e2,
              context: i2,
              type: "yaxis",
              contextMethod: i2.addYaxisAnnotation
            }), i2;
          }
        }, {
          key: "addPointAnnotationExternal",
          value: function (t3, e2, i2) {
            return void 0 === this.invertAxis && (this.invertAxis = i2.w.globals.isBarHorizontal), this.addAnnotationExternal({
              params: t3,
              pushToMemory: e2,
              context: i2,
              type: "point",
              contextMethod: i2.addPointAnnotation
            }), i2;
          }
        }, {
          key: "addAnnotationExternal",
          value: function (t3) {
            var e2 = t3.params,
              i2 = t3.pushToMemory,
              a2 = t3.context,
              s2 = t3.type,
              r2 = t3.contextMethod,
              o2 = a2,
              n2 = o2.w,
              l2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations")),
              h2 = l2.childNodes.length + 1,
              c2 = new X(),
              d2 = Object.assign({}, "xaxis" === s2 ? c2.xAxisAnnotation : "yaxis" === s2 ? c2.yAxisAnnotation : c2.pointAnnotation),
              g2 = m.extend(d2, e2);
            switch (s2) {
              case "xaxis":
                this.addXaxisAnnotation(g2, l2, h2);
                break;
              case "yaxis":
                this.addYaxisAnnotation(g2, l2, h2);
                break;
              case "point":
                this.addPointAnnotation(g2, l2, h2);
            }
            var u2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(h2, "']")),
              f2 = this.helpers.addBackgroundToAnno(u2, g2);
            return f2 && l2.insertBefore(f2.node, u2), i2 && n2.globals.memory.methodsToExec.push({
              context: o2,
              id: g2.id ? g2.id : m.randomId(),
              method: r2,
              label: "addAnnotation",
              params: e2
            }), a2;
          }
        }, {
          key: "clearAnnotations",
          value: function (t3) {
            for (var e2 = t3.w, i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"), a2 = e2.globals.memory.methodsToExec.length - 1; a2 >= 0; a2--) "addText" !== e2.globals.memory.methodsToExec[a2].label && "addAnnotation" !== e2.globals.memory.methodsToExec[a2].label || e2.globals.memory.methodsToExec.splice(a2, 1);
            i2 = m.listToArray(i2), Array.prototype.forEach.call(i2, function (t4) {
              for (; t4.firstChild;) t4.removeChild(t4.firstChild);
            });
          }
        }, {
          key: "removeAnnotation",
          value: function (t3, e2) {
            var i2 = t3.w,
              a2 = i2.globals.dom.baseEl.querySelectorAll(".".concat(e2));
            a2 && (i2.globals.memory.methodsToExec.map(function (t4, a3) {
              t4.id === e2 && i2.globals.memory.methodsToExec.splice(a3, 1);
            }), Array.prototype.forEach.call(a2, function (t4) {
              t4.parentElement.removeChild(t4);
            }));
          }
        }]), t2;
      }(),
      Y = function (t2) {
        var e2,
          i2 = t2.isTimeline,
          a2 = t2.ctx,
          s2 = t2.seriesIndex,
          r2 = t2.dataPointIndex,
          o2 = t2.y1,
          n2 = t2.y2,
          l2 = t2.w,
          h2 = l2.globals.seriesRangeStart[s2][r2],
          c2 = l2.globals.seriesRangeEnd[s2][r2],
          d2 = l2.globals.labels[r2],
          g2 = l2.config.series[s2].name ? l2.config.series[s2].name : "",
          u2 = l2.globals.ttKeyFormatter,
          f2 = l2.config.tooltip.y.title.formatter,
          p2 = {
            w: l2,
            seriesIndex: s2,
            dataPointIndex: r2,
            start: h2,
            end: c2
          };
        ("function" == typeof f2 && (g2 = f2(g2, p2)), null !== (e2 = l2.config.series[s2].data[r2]) && void 0 !== e2 && e2.x && (d2 = l2.config.series[s2].data[r2].x), i2) || "datetime" === l2.config.xaxis.type && (d2 = new P(a2).xLabelFormat(l2.globals.ttKeyFormatter, d2, d2, {
          i: void 0,
          dateFormatter: new L(a2).formatDate,
          w: l2
        }));
        "function" == typeof u2 && (d2 = u2(d2, p2)), Number.isFinite(o2) && Number.isFinite(n2) && (h2 = o2, c2 = n2);
        var x2 = "",
          b2 = "",
          v2 = l2.globals.colors[s2];
        if (void 0 === l2.config.tooltip.x.formatter) {
          if ("datetime" === l2.config.xaxis.type) {
            var m2 = new L(a2);
            x2 = m2.formatDate(m2.getDate(h2), l2.config.tooltip.x.format), b2 = m2.formatDate(m2.getDate(c2), l2.config.tooltip.x.format);
          } else x2 = h2, b2 = c2;
        } else x2 = l2.config.tooltip.x.formatter(h2), b2 = l2.config.tooltip.x.formatter(c2);
        return {
          start: h2,
          end: c2,
          startVal: x2,
          endVal: b2,
          ylabel: d2,
          color: v2,
          seriesName: g2
        };
      },
      R = function (t2) {
        var e2 = t2.color,
          i2 = t2.seriesName,
          a2 = t2.ylabel,
          s2 = t2.start,
          r2 = t2.end,
          o2 = t2.seriesIndex,
          n2 = t2.dataPointIndex,
          l2 = t2.ctx.tooltip.tooltipLabels.getFormatters(o2);
        s2 = l2.yLbFormatter(s2), r2 = l2.yLbFormatter(r2);
        var h2 = l2.yLbFormatter(t2.w.globals.series[o2][n2]),
          c2 = '<span class="value start-value">\n  '.concat(s2, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r2, "\n  </span>");
        return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e2 + '">' + (i2 || "") + '</span></div><div> <span class="category">' + a2 + ": </span> " + (t2.w.globals.comboCharts ? "rangeArea" === t2.w.config.series[o2].type || "rangeBar" === t2.w.config.series[o2].type ? c2 : "<span>".concat(h2, "</span>") : c2) + " </div></div>";
      },
      F = function () {
        function t2(e2) {
          i(this, t2), this.opts = e2;
        }
        return s(t2, [{
          key: "hideYAxis",
          value: function () {
            this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
          }
        }, {
          key: "line",
          value: function () {
            return {
              chart: {
                animations: {
                  easing: "swing"
                }
              },
              dataLabels: {
                enabled: false
              },
              stroke: {
                width: 5,
                curve: "straight"
              },
              markers: {
                size: 0,
                hover: {
                  sizeOffset: 6
                }
              },
              xaxis: {
                crosshairs: {
                  width: 1
                }
              }
            };
          }
        }, {
          key: "sparkline",
          value: function (t3) {
            this.hideYAxis();
            return m.extend(t3, {
              grid: {
                show: false,
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              },
              legend: {
                show: false
              },
              xaxis: {
                labels: {
                  show: false
                },
                tooltip: {
                  enabled: false
                },
                axisBorder: {
                  show: false
                },
                axisTicks: {
                  show: false
                }
              },
              chart: {
                toolbar: {
                  show: false
                },
                zoom: {
                  enabled: false
                }
              },
              dataLabels: {
                enabled: false
              }
            });
          }
        }, {
          key: "slope",
          value: function () {
            return this.hideYAxis(), {
              chart: {
                toolbar: {
                  show: false
                },
                zoom: {
                  enabled: false
                }
              },
              dataLabels: {
                enabled: true,
                formatter: function (t3, e2) {
                  var i2 = e2.w.config.series[e2.seriesIndex].name;
                  return null !== t3 ? i2 + ": " + t3 : "";
                },
                background: {
                  enabled: false
                },
                offsetX: -5
              },
              grid: {
                xaxis: {
                  lines: {
                    show: true
                  }
                },
                yaxis: {
                  lines: {
                    show: false
                  }
                }
              },
              xaxis: {
                position: "top",
                labels: {
                  style: {
                    fontSize: 14,
                    fontWeight: 900
                  }
                },
                tooltip: {
                  enabled: false
                },
                crosshairs: {
                  show: false
                }
              },
              markers: {
                size: 8,
                hover: {
                  sizeOffset: 1
                }
              },
              legend: {
                show: false
              },
              tooltip: {
                shared: false,
                intersect: true,
                followCursor: true
              },
              stroke: {
                width: 5,
                curve: "straight"
              }
            };
          }
        }, {
          key: "bar",
          value: function () {
            return {
              chart: {
                stacked: false,
                animations: {
                  easing: "swing"
                }
              },
              plotOptions: {
                bar: {
                  dataLabels: {
                    position: "center"
                  }
                }
              },
              dataLabels: {
                style: {
                  colors: ["#fff"]
                },
                background: {
                  enabled: false
                }
              },
              stroke: {
                width: 0,
                lineCap: "round"
              },
              fill: {
                opacity: 0.85
              },
              legend: {
                markers: {
                  shape: "square"
                }
              },
              tooltip: {
                shared: false,
                intersect: true
              },
              xaxis: {
                tooltip: {
                  enabled: false
                },
                tickPlacement: "between",
                crosshairs: {
                  width: "barWidth",
                  position: "back",
                  fill: {
                    type: "gradient"
                  },
                  dropShadow: {
                    enabled: false
                  },
                  stroke: {
                    width: 0
                  }
                }
              }
            };
          }
        }, {
          key: "funnel",
          value: function () {
            return this.hideYAxis(), g(g({}, this.bar()), {}, {
              chart: {
                animations: {
                  easing: "linear",
                  speed: 800,
                  animateGradually: {
                    enabled: false
                  }
                }
              },
              plotOptions: {
                bar: {
                  horizontal: true,
                  borderRadiusApplication: "around",
                  borderRadius: 0,
                  dataLabels: {
                    position: "center"
                  }
                }
              },
              grid: {
                show: false,
                padding: {
                  left: 0,
                  right: 0
                }
              },
              xaxis: {
                labels: {
                  show: false
                },
                tooltip: {
                  enabled: false
                },
                axisBorder: {
                  show: false
                },
                axisTicks: {
                  show: false
                }
              }
            });
          }
        }, {
          key: "candlestick",
          value: function () {
            var t3 = this;
            return {
              stroke: {
                width: 1,
                colors: ["#333"]
              },
              fill: {
                opacity: 1
              },
              dataLabels: {
                enabled: false
              },
              tooltip: {
                shared: true,
                custom: function (e2) {
                  var i2 = e2.seriesIndex,
                    a2 = e2.dataPointIndex,
                    s2 = e2.w;
                  return t3._getBoxTooltip(s2, i2, a2, ["Open", "High", "", "Low", "Close"], "candlestick");
                }
              },
              states: {
                active: {
                  filter: {
                    type: "none"
                  }
                }
              },
              xaxis: {
                crosshairs: {
                  width: 1
                }
              }
            };
          }
        }, {
          key: "boxPlot",
          value: function () {
            var t3 = this;
            return {
              chart: {
                animations: {
                  dynamicAnimation: {
                    enabled: false
                  }
                }
              },
              stroke: {
                width: 1,
                colors: ["#24292e"]
              },
              dataLabels: {
                enabled: false
              },
              tooltip: {
                shared: true,
                custom: function (e2) {
                  var i2 = e2.seriesIndex,
                    a2 = e2.dataPointIndex,
                    s2 = e2.w;
                  return t3._getBoxTooltip(s2, i2, a2, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
                }
              },
              markers: {
                size: 7,
                strokeWidth: 1,
                strokeColors: "#111"
              },
              xaxis: {
                crosshairs: {
                  width: 1
                }
              }
            };
          }
        }, {
          key: "rangeBar",
          value: function () {
            return {
              chart: {
                animations: {
                  animateGradually: false
                }
              },
              stroke: {
                width: 0,
                lineCap: "square"
              },
              plotOptions: {
                bar: {
                  borderRadius: 0,
                  dataLabels: {
                    position: "center"
                  }
                }
              },
              dataLabels: {
                enabled: false,
                formatter: function (t3, e2) {
                  e2.ctx;
                  var i2 = e2.seriesIndex,
                    a2 = e2.dataPointIndex,
                    s2 = e2.w,
                    r2 = function () {
                      var t4 = s2.globals.seriesRangeStart[i2][a2];
                      return s2.globals.seriesRangeEnd[i2][a2] - t4;
                    };
                  return s2.globals.comboCharts ? "rangeBar" === s2.config.series[i2].type || "rangeArea" === s2.config.series[i2].type ? r2() : t3 : r2();
                },
                background: {
                  enabled: false
                },
                style: {
                  colors: ["#fff"]
                }
              },
              markers: {
                size: 10
              },
              tooltip: {
                shared: false,
                followCursor: true,
                custom: function (t3) {
                  return t3.w.config.plotOptions && t3.w.config.plotOptions.bar && t3.w.config.plotOptions.bar.horizontal ? function (t4) {
                    var e2 = Y(g(g({}, t4), {}, {
                        isTimeline: true
                      })),
                      i2 = e2.color,
                      a2 = e2.seriesName,
                      s2 = e2.ylabel,
                      r2 = e2.startVal,
                      o2 = e2.endVal;
                    return R(g(g({}, t4), {}, {
                      color: i2,
                      seriesName: a2,
                      ylabel: s2,
                      start: r2,
                      end: o2
                    }));
                  }(t3) : function (t4) {
                    var e2 = Y(t4),
                      i2 = e2.color,
                      a2 = e2.seriesName,
                      s2 = e2.ylabel,
                      r2 = e2.start,
                      o2 = e2.end;
                    return R(g(g({}, t4), {}, {
                      color: i2,
                      seriesName: a2,
                      ylabel: s2,
                      start: r2,
                      end: o2
                    }));
                  }(t3);
                }
              },
              xaxis: {
                tickPlacement: "between",
                tooltip: {
                  enabled: false
                },
                crosshairs: {
                  stroke: {
                    width: 0
                  }
                }
              }
            };
          }
        }, {
          key: "dumbbell",
          value: function (t3) {
            var e2, i2;
            return null !== (e2 = t3.plotOptions.bar) && void 0 !== e2 && e2.barHeight || (t3.plotOptions.bar.barHeight = 2), null !== (i2 = t3.plotOptions.bar) && void 0 !== i2 && i2.columnWidth || (t3.plotOptions.bar.columnWidth = 2), t3;
          }
        }, {
          key: "area",
          value: function () {
            return {
              stroke: {
                width: 4,
                fill: {
                  type: "solid",
                  gradient: {
                    inverseColors: false,
                    shade: "light",
                    type: "vertical",
                    opacityFrom: 0.65,
                    opacityTo: 0.5,
                    stops: [0, 100, 100]
                  }
                }
              },
              fill: {
                type: "gradient",
                gradient: {
                  inverseColors: false,
                  shade: "light",
                  type: "vertical",
                  opacityFrom: 0.65,
                  opacityTo: 0.5,
                  stops: [0, 100, 100]
                }
              },
              markers: {
                size: 0,
                hover: {
                  sizeOffset: 6
                }
              },
              tooltip: {
                followCursor: false
              }
            };
          }
        }, {
          key: "rangeArea",
          value: function () {
            return {
              stroke: {
                curve: "straight",
                width: 0
              },
              fill: {
                type: "solid",
                opacity: 0.6
              },
              markers: {
                size: 0
              },
              states: {
                hover: {
                  filter: {
                    type: "none"
                  }
                },
                active: {
                  filter: {
                    type: "none"
                  }
                }
              },
              tooltip: {
                intersect: false,
                shared: true,
                followCursor: true,
                custom: function (t3) {
                  return function (t4) {
                    var e2 = Y(t4),
                      i2 = e2.color,
                      a2 = e2.seriesName,
                      s2 = e2.ylabel,
                      r2 = e2.start,
                      o2 = e2.end;
                    return R(g(g({}, t4), {}, {
                      color: i2,
                      seriesName: a2,
                      ylabel: s2,
                      start: r2,
                      end: o2
                    }));
                  }(t3);
                }
              }
            };
          }
        }, {
          key: "brush",
          value: function (t3) {
            return m.extend(t3, {
              chart: {
                toolbar: {
                  autoSelected: "selection",
                  show: false
                },
                zoom: {
                  enabled: false
                }
              },
              dataLabels: {
                enabled: false
              },
              stroke: {
                width: 1
              },
              tooltip: {
                enabled: false
              },
              xaxis: {
                tooltip: {
                  enabled: false
                }
              }
            });
          }
        }, {
          key: "stacked100",
          value: function (t3) {
            t3.dataLabels = t3.dataLabels || {}, t3.dataLabels.formatter = t3.dataLabels.formatter || void 0;
            var e2 = t3.dataLabels.formatter;
            return t3.yaxis.forEach(function (e3, i2) {
              t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
            }), "bar" === t3.chart.type && (t3.dataLabels.formatter = e2 || function (t4) {
              return "number" == typeof t4 && t4 ? t4.toFixed(0) + "%" : t4;
            }), t3;
          }
        }, {
          key: "stackedBars",
          value: function () {
            var t3 = this.bar();
            return g(g({}, t3), {}, {
              plotOptions: g(g({}, t3.plotOptions), {}, {
                bar: g(g({}, t3.plotOptions.bar), {}, {
                  borderRadiusApplication: "end",
                  borderRadiusWhenStacked: "last"
                })
              })
            });
          }
        }, {
          key: "convertCatToNumeric",
          value: function (t3) {
            return t3.xaxis.convertedCatToNumeric = true, t3;
          }
        }, {
          key: "convertCatToNumericXaxis",
          value: function (t3, e2, i2) {
            t3.xaxis.type = "numeric", t3.xaxis.labels = t3.xaxis.labels || {}, t3.xaxis.labels.formatter = t3.xaxis.labels.formatter || function (t4) {
              return m.isNumber(t4) ? Math.floor(t4) : t4;
            };
            var a2 = t3.xaxis.labels.formatter,
              s2 = t3.xaxis.categories && t3.xaxis.categories.length ? t3.xaxis.categories : t3.labels;
            return i2 && i2.length && (s2 = i2.map(function (t4) {
              return Array.isArray(t4) ? t4 : String(t4);
            })), s2 && s2.length && (t3.xaxis.labels.formatter = function (t4) {
              return m.isNumber(t4) ? a2(s2[Math.floor(t4) - 1]) : a2(t4);
            }), t3.xaxis.categories = [], t3.labels = [], t3.xaxis.tickAmount = t3.xaxis.tickAmount || "dataPoints", t3;
          }
        }, {
          key: "bubble",
          value: function () {
            return {
              dataLabels: {
                style: {
                  colors: ["#fff"]
                }
              },
              tooltip: {
                shared: false,
                intersect: true
              },
              xaxis: {
                crosshairs: {
                  width: 0
                }
              },
              fill: {
                type: "solid",
                gradient: {
                  shade: "light",
                  inverse: true,
                  shadeIntensity: 0.55,
                  opacityFrom: 0.4,
                  opacityTo: 0.8
                }
              }
            };
          }
        }, {
          key: "scatter",
          value: function () {
            return {
              dataLabels: {
                enabled: false
              },
              tooltip: {
                shared: false,
                intersect: true
              },
              markers: {
                size: 6,
                strokeWidth: 1,
                hover: {
                  sizeOffset: 2
                }
              }
            };
          }
        }, {
          key: "heatmap",
          value: function () {
            return {
              chart: {
                stacked: false
              },
              fill: {
                opacity: 1
              },
              dataLabels: {
                style: {
                  colors: ["#fff"]
                }
              },
              stroke: {
                colors: ["#fff"]
              },
              tooltip: {
                followCursor: true,
                marker: {
                  show: false
                },
                x: {
                  show: false
                }
              },
              legend: {
                position: "top",
                markers: {
                  shape: "square"
                }
              },
              grid: {
                padding: {
                  right: 20
                }
              }
            };
          }
        }, {
          key: "treemap",
          value: function () {
            return {
              chart: {
                zoom: {
                  enabled: false
                }
              },
              dataLabels: {
                style: {
                  fontSize: 14,
                  fontWeight: 600,
                  colors: ["#fff"]
                }
              },
              stroke: {
                show: true,
                width: 2,
                colors: ["#fff"]
              },
              legend: {
                show: false
              },
              fill: {
                opacity: 1,
                gradient: {
                  stops: [0, 100]
                }
              },
              tooltip: {
                followCursor: true,
                x: {
                  show: false
                }
              },
              grid: {
                padding: {
                  left: 0,
                  right: 0
                }
              },
              xaxis: {
                crosshairs: {
                  show: false
                },
                tooltip: {
                  enabled: false
                }
              }
            };
          }
        }, {
          key: "pie",
          value: function () {
            return {
              chart: {
                toolbar: {
                  show: false
                }
              },
              plotOptions: {
                pie: {
                  donut: {
                    labels: {
                      show: false
                    }
                  }
                }
              },
              dataLabels: {
                formatter: function (t3) {
                  return t3.toFixed(1) + "%";
                },
                style: {
                  colors: ["#fff"]
                },
                background: {
                  enabled: false
                },
                dropShadow: {
                  enabled: true
                }
              },
              stroke: {
                colors: ["#fff"]
              },
              fill: {
                opacity: 1,
                gradient: {
                  shade: "light",
                  stops: [0, 100]
                }
              },
              tooltip: {
                theme: "dark",
                fillSeriesColor: true
              },
              legend: {
                position: "right"
              },
              grid: {
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              }
            };
          }
        }, {
          key: "donut",
          value: function () {
            return {
              chart: {
                toolbar: {
                  show: false
                }
              },
              dataLabels: {
                formatter: function (t3) {
                  return t3.toFixed(1) + "%";
                },
                style: {
                  colors: ["#fff"]
                },
                background: {
                  enabled: false
                },
                dropShadow: {
                  enabled: true
                }
              },
              stroke: {
                colors: ["#fff"]
              },
              fill: {
                opacity: 1,
                gradient: {
                  shade: "light",
                  shadeIntensity: 0.35,
                  stops: [80, 100],
                  opacityFrom: 1,
                  opacityTo: 1
                }
              },
              tooltip: {
                theme: "dark",
                fillSeriesColor: true
              },
              legend: {
                position: "right"
              },
              grid: {
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              }
            };
          }
        }, {
          key: "polarArea",
          value: function () {
            return {
              chart: {
                toolbar: {
                  show: false
                }
              },
              dataLabels: {
                formatter: function (t3) {
                  return t3.toFixed(1) + "%";
                },
                enabled: false
              },
              stroke: {
                show: true,
                width: 2
              },
              fill: {
                opacity: 0.7
              },
              tooltip: {
                theme: "dark",
                fillSeriesColor: true
              },
              legend: {
                position: "right"
              },
              grid: {
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              }
            };
          }
        }, {
          key: "radar",
          value: function () {
            return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {
              dataLabels: {
                enabled: false,
                style: {
                  fontSize: "11px"
                }
              },
              stroke: {
                width: 2
              },
              markers: {
                size: 5,
                strokeWidth: 1,
                strokeOpacity: 1
              },
              fill: {
                opacity: 0.2
              },
              tooltip: {
                shared: false,
                intersect: true,
                followCursor: true
              },
              grid: {
                show: false,
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              },
              xaxis: {
                labels: {
                  formatter: function (t3) {
                    return t3;
                  },
                  style: {
                    colors: ["#a8a8a8"],
                    fontSize: "11px"
                  }
                },
                tooltip: {
                  enabled: false
                },
                crosshairs: {
                  show: false
                }
              }
            };
          }
        }, {
          key: "radialBar",
          value: function () {
            return {
              chart: {
                animations: {
                  dynamicAnimation: {
                    enabled: true,
                    speed: 800
                  }
                },
                toolbar: {
                  show: false
                }
              },
              fill: {
                gradient: {
                  shade: "dark",
                  shadeIntensity: 0.4,
                  inverseColors: false,
                  type: "diagonal2",
                  opacityFrom: 1,
                  opacityTo: 1,
                  stops: [70, 98, 100]
                }
              },
              legend: {
                show: false,
                position: "right"
              },
              tooltip: {
                enabled: false,
                fillSeriesColor: true
              },
              grid: {
                padding: {
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0
                }
              }
            };
          }
        }, {
          key: "_getBoxTooltip",
          value: function (t3, e2, i2, a2, s2) {
            var r2 = t3.globals.seriesCandleO[e2][i2],
              o2 = t3.globals.seriesCandleH[e2][i2],
              n2 = t3.globals.seriesCandleM[e2][i2],
              l2 = t3.globals.seriesCandleL[e2][i2],
              h2 = t3.globals.seriesCandleC[e2][i2];
            return t3.config.series[e2].type && t3.config.series[e2].type !== s2 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t3.config.series[e2].name ? t3.config.series[e2].name : "series-" + (e2 + 1), ": <strong>").concat(t3.globals.series[e2][i2], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t3.config.chart.type, '">') + "<div>".concat(a2[0], ': <span class="value">') + r2 + "</span></div>" + "<div>".concat(a2[1], ': <span class="value">') + o2 + "</span></div>" + (n2 ? "<div>".concat(a2[2], ': <span class="value">') + n2 + "</span></div>" : "") + "<div>".concat(a2[3], ': <span class="value">') + l2 + "</span></div>" + "<div>".concat(a2[4], ': <span class="value">') + h2 + "</span></div></div>";
          }
        }]), t2;
      }(),
      D = function () {
        function t2(e2) {
          i(this, t2), this.opts = e2;
        }
        return s(t2, [{
          key: "init",
          value: function (t3) {
            var e2 = t3.responsiveOverride,
              i2 = this.opts,
              a2 = new X(),
              s2 = new F(i2);
            this.chartType = i2.chart.type, i2 = this.extendYAxis(i2), i2 = this.extendAnnotations(i2);
            var r2 = a2.init(),
              o2 = {};
            if (i2 && "object" === b(i2)) {
              var n2,
                l2,
                h2,
                c2,
                d2,
                g2,
                u2,
                f2,
                p2,
                x2,
                v2 = {};
              v2 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(i2.chart.type) ? s2[i2.chart.type]() : s2.line(), null !== (n2 = i2.plotOptions) && void 0 !== n2 && null !== (l2 = n2.bar) && void 0 !== l2 && l2.isFunnel && (v2 = s2.funnel()), i2.chart.stacked && "bar" === i2.chart.type && (v2 = s2.stackedBars()), null !== (h2 = i2.chart.brush) && void 0 !== h2 && h2.enabled && (v2 = s2.brush(v2)), null !== (c2 = i2.plotOptions) && void 0 !== c2 && null !== (d2 = c2.line) && void 0 !== d2 && d2.isSlopeChart && (v2 = s2.slope()), i2.chart.stacked && "100%" === i2.chart.stackType && (i2 = s2.stacked100(i2)), null !== (g2 = i2.plotOptions) && void 0 !== g2 && null !== (u2 = g2.bar) && void 0 !== u2 && u2.isDumbbell && (i2 = s2.dumbbell(i2)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(i2), i2.xaxis = i2.xaxis || window.Apex.xaxis || {}, e2 || (i2.xaxis.convertedCatToNumeric = false), (null !== (f2 = (i2 = this.checkForCatToNumericXAxis(this.chartType, v2, i2)).chart.sparkline) && void 0 !== f2 && f2.enabled || null !== (p2 = window.Apex.chart) && void 0 !== p2 && null !== (x2 = p2.sparkline) && void 0 !== x2 && x2.enabled) && (v2 = s2.sparkline(v2)), o2 = m.extend(r2, v2);
            }
            var y2 = m.extend(o2, window.Apex);
            return r2 = m.extend(y2, i2), r2 = this.handleUserInputErrors(r2);
          }
        }, {
          key: "checkForCatToNumericXAxis",
          value: function (t3, e2, i2) {
            var a2,
              s2,
              r2 = new F(i2),
              o2 = ("bar" === t3 || "boxPlot" === t3) && (null === (a2 = i2.plotOptions) || void 0 === a2 || null === (s2 = a2.bar) || void 0 === s2 ? void 0 : s2.horizontal),
              n2 = "pie" === t3 || "polarArea" === t3 || "donut" === t3 || "radar" === t3 || "radialBar" === t3 || "heatmap" === t3,
              l2 = "datetime" !== i2.xaxis.type && "numeric" !== i2.xaxis.type,
              h2 = i2.xaxis.tickPlacement ? i2.xaxis.tickPlacement : e2.xaxis && e2.xaxis.tickPlacement;
            return o2 || n2 || !l2 || "between" === h2 || (i2 = r2.convertCatToNumeric(i2)), i2;
          }
        }, {
          key: "extendYAxis",
          value: function (t3, e2) {
            var i2 = new X();
            (void 0 === t3.yaxis || !t3.yaxis || Array.isArray(t3.yaxis) && 0 === t3.yaxis.length) && (t3.yaxis = {}), t3.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t3.yaxis = m.extend(t3.yaxis, window.Apex.yaxis)), t3.yaxis.constructor !== Array ? t3.yaxis = [m.extend(i2.yAxis, t3.yaxis)] : t3.yaxis = m.extendArray(t3.yaxis, i2.yAxis);
            var a2 = false;
            t3.yaxis.forEach(function (t4) {
              t4.logarithmic && (a2 = true);
            });
            var s2 = t3.series;
            return e2 && !s2 && (s2 = e2.config.series), a2 && s2.length !== t3.yaxis.length && s2.length && (t3.yaxis = s2.map(function (e3, a3) {
              if (e3.name || (s2[a3].name = "series-".concat(a3 + 1)), t3.yaxis[a3]) return t3.yaxis[a3].seriesName = s2[a3].name, t3.yaxis[a3];
              var r2 = m.extend(i2.yAxis, t3.yaxis[0]);
              return r2.show = false, r2;
            })), a2 && s2.length > 1 && s2.length !== t3.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes"), t3;
          }
        }, {
          key: "extendAnnotations",
          value: function (t3) {
            return void 0 === t3.annotations && (t3.annotations = {}, t3.annotations.yaxis = [], t3.annotations.xaxis = [], t3.annotations.points = []), t3 = this.extendYAxisAnnotations(t3), t3 = this.extendXAxisAnnotations(t3), t3 = this.extendPointAnnotations(t3);
          }
        }, {
          key: "extendYAxisAnnotations",
          value: function (t3) {
            var e2 = new X();
            return t3.annotations.yaxis = m.extendArray(void 0 !== t3.annotations.yaxis ? t3.annotations.yaxis : [], e2.yAxisAnnotation), t3;
          }
        }, {
          key: "extendXAxisAnnotations",
          value: function (t3) {
            var e2 = new X();
            return t3.annotations.xaxis = m.extendArray(void 0 !== t3.annotations.xaxis ? t3.annotations.xaxis : [], e2.xAxisAnnotation), t3;
          }
        }, {
          key: "extendPointAnnotations",
          value: function (t3) {
            var e2 = new X();
            return t3.annotations.points = m.extendArray(void 0 !== t3.annotations.points ? t3.annotations.points : [], e2.pointAnnotation), t3;
          }
        }, {
          key: "checkForDarkTheme",
          value: function (t3) {
            t3.theme && "dark" === t3.theme.mode && (t3.tooltip || (t3.tooltip = {}), "light" !== t3.tooltip.theme && (t3.tooltip.theme = "dark"), t3.chart.foreColor || (t3.chart.foreColor = "#f6f7f8"), t3.theme.palette || (t3.theme.palette = "palette4"));
          }
        }, {
          key: "handleUserInputErrors",
          value: function (t3) {
            var e2 = t3;
            if (e2.tooltip.shared && e2.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
            if ("bar" === e2.chart.type && e2.plotOptions.bar.horizontal) {
              if (e2.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
              e2.yaxis[0].reversed && (e2.yaxis[0].opposite = true), e2.xaxis.tooltip.enabled = false, e2.yaxis[0].tooltip.enabled = false, e2.chart.zoom.enabled = false;
            }
            return "bar" !== e2.chart.type && "rangeBar" !== e2.chart.type || e2.tooltip.shared && "barWidth" === e2.xaxis.crosshairs.width && e2.series.length > 1 && (e2.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e2.chart.type && "boxPlot" !== e2.chart.type || e2.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e2.chart.type, " chart is not supported.")), e2.yaxis[0].reversed = false), e2;
          }
        }]), t2;
      }(),
      H = function () {
        function t2() {
          i(this, t2);
        }
        return s(t2, [{
          key: "initGlobalVars",
          value: function (t3) {
            t3.series = [], t3.seriesCandleO = [], t3.seriesCandleH = [], t3.seriesCandleM = [], t3.seriesCandleL = [], t3.seriesCandleC = [], t3.seriesRangeStart = [], t3.seriesRangeEnd = [], t3.seriesRange = [], t3.seriesPercent = [], t3.seriesGoals = [], t3.seriesX = [], t3.seriesZ = [], t3.seriesNames = [], t3.seriesTotals = [], t3.seriesLog = [], t3.seriesColors = [], t3.stackedSeriesTotals = [], t3.seriesXvalues = [], t3.seriesYvalues = [], t3.labels = [], t3.hasXaxisGroups = false, t3.groups = [], t3.barGroups = [], t3.lineGroups = [], t3.areaGroups = [], t3.hasSeriesGroups = false, t3.seriesGroups = [], t3.categoryLabels = [], t3.timescaleLabels = [], t3.noLabelsProvided = false, t3.resizeTimer = null, t3.selectionResizeTimer = null, t3.lastWheelExecution = 0, t3.delayedElements = [], t3.pointsArray = [], t3.dataLabelsRects = [], t3.isXNumeric = false, t3.skipLastTimelinelabel = false, t3.skipFirstTimelinelabel = false, t3.isDataXYZ = false, t3.isMultiLineX = false, t3.isMultipleYAxis = false, t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE, t3.minYArr = [], t3.maxYArr = [], t3.maxX = -Number.MAX_VALUE, t3.minX = Number.MAX_VALUE, t3.initialMaxX = -Number.MAX_VALUE, t3.initialMinX = Number.MAX_VALUE, t3.maxDate = 0, t3.minDate = Number.MAX_VALUE, t3.minZ = Number.MAX_VALUE, t3.maxZ = -Number.MAX_VALUE, t3.minXDiff = Number.MAX_VALUE, t3.yAxisScale = [], t3.xAxisScale = null, t3.xAxisTicksPositions = [], t3.yLabelsCoords = [], t3.yTitleCoords = [], t3.barPadForNumericAxis = 0, t3.padHorizontal = 0, t3.xRange = 0, t3.yRange = [], t3.zRange = 0, t3.dataPoints = 0, t3.xTickAmount = 0, t3.multiAxisTickAmount = 0;
          }
        }, {
          key: "globalVars",
          value: function (t3) {
            return {
              chartID: null,
              cuid: null,
              events: {
                beforeMount: [],
                mounted: [],
                updated: [],
                clicked: [],
                selection: [],
                dataPointSelection: [],
                zoomed: [],
                scrolled: []
              },
              colors: [],
              clientX: null,
              clientY: null,
              fill: {
                colors: []
              },
              stroke: {
                colors: []
              },
              dataLabels: {
                style: {
                  colors: []
                }
              },
              radarPolygons: {
                fill: {
                  colors: []
                }
              },
              markers: {
                colors: [],
                size: t3.markers.size,
                largestSize: 0
              },
              animationEnded: false,
              isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
              isDirty: false,
              isExecCalled: false,
              initialConfig: null,
              initialSeries: [],
              lastXAxis: [],
              lastYAxis: [],
              columnSeries: null,
              labels: [],
              timescaleLabels: [],
              noLabelsProvided: false,
              allSeriesCollapsed: false,
              collapsedSeries: [],
              collapsedSeriesIndices: [],
              ancillaryCollapsedSeries: [],
              ancillaryCollapsedSeriesIndices: [],
              risingSeries: [],
              dataFormatXNumeric: false,
              capturedSeriesIndex: -1,
              capturedDataPointIndex: -1,
              selectedDataPoints: [],
              invalidLogScale: false,
              ignoreYAxisIndexes: [],
              maxValsInArrayIndex: 0,
              radialSize: 0,
              selection: void 0,
              zoomEnabled: "zoom" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.zoom && t3.chart.zoom.enabled,
              panEnabled: "pan" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.pan,
              selectionEnabled: "selection" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.selection,
              yaxis: null,
              mousedown: false,
              lastClientPosition: {},
              visibleXRange: void 0,
              yValueDecimal: 0,
              total: 0,
              SVGNS: "http://www.w3.org/2000/svg",
              svgWidth: 0,
              svgHeight: 0,
              noData: false,
              locale: {},
              dom: {},
              memory: {
                methodsToExec: []
              },
              shouldAnimate: true,
              skipLastTimelinelabel: false,
              skipFirstTimelinelabel: false,
              delayedElements: [],
              axisCharts: true,
              isDataXYZ: false,
              isSlopeChart: t3.plotOptions.line.isSlopeChart,
              resized: false,
              resizeTimer: null,
              comboCharts: false,
              dataChanged: false,
              previousPaths: [],
              allSeriesHasEqualX: true,
              pointsArray: [],
              dataLabelsRects: [],
              lastDrawnDataLabelsIndexes: [],
              hasNullValues: false,
              easing: null,
              zoomed: false,
              gridWidth: 0,
              gridHeight: 0,
              rotateXLabels: false,
              defaultLabels: false,
              xLabelFormatter: void 0,
              yLabelFormatters: [],
              xaxisTooltipFormatter: void 0,
              ttKeyFormatter: void 0,
              ttVal: void 0,
              ttZFormatter: void 0,
              LINE_HEIGHT_RATIO: 1.618,
              xAxisLabelsHeight: 0,
              xAxisGroupLabelsHeight: 0,
              xAxisLabelsWidth: 0,
              yAxisLabelsWidth: 0,
              scaleX: 1,
              scaleY: 1,
              translateX: 0,
              translateY: 0,
              translateYAxisX: [],
              yAxisWidths: [],
              translateXAxisY: 0,
              translateXAxisX: 0,
              tooltip: null,
              niceScaleAllowedMagMsd: [[1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10], [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10]],
              niceScaleDefaultTicks: [1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24],
              seriesYAxisMap: [],
              seriesYAxisReverseMap: []
            };
          }
        }, {
          key: "init",
          value: function (t3) {
            var e2 = this.globalVars(t3);
            return this.initGlobalVars(e2), e2.initialConfig = m.extend({}, t3), e2.initialSeries = m.clone(t3.series), e2.lastXAxis = m.clone(e2.initialConfig.xaxis), e2.lastYAxis = m.clone(e2.initialConfig.yaxis), e2;
          }
        }]), t2;
      }(),
      O = function () {
        function t2(e2) {
          i(this, t2), this.opts = e2;
        }
        return s(t2, [{
          key: "init",
          value: function () {
            var t3 = new D(this.opts).init({
              responsiveOverride: false
            });
            return {
              config: t3,
              globals: new H().init(t3)
            };
          }
        }]), t2;
      }(),
      N = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.opts = null, this.seriesIndex = 0, this.patternIDs = [];
        }
        return s(t2, [{
          key: "clippedImgArea",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config,
              a2 = parseInt(e2.globals.gridWidth, 10),
              s2 = parseInt(e2.globals.gridHeight, 10),
              r2 = a2 > s2 ? a2 : s2,
              o2 = t3.image,
              n2 = 0,
              l2 = 0;
            void 0 === t3.width && void 0 === t3.height ? void 0 !== i2.fill.image.width && void 0 !== i2.fill.image.height ? (n2 = i2.fill.image.width + 1, l2 = i2.fill.image.height) : (n2 = r2 + 1, l2 = r2) : (n2 = t3.width, l2 = t3.height);
            var h2 = document.createElementNS(e2.globals.SVGNS, "pattern");
            k.setAttrs(h2, {
              id: t3.patternID,
              patternUnits: t3.patternUnits ? t3.patternUnits : "userSpaceOnUse",
              width: n2 + "px",
              height: l2 + "px"
            });
            var c2 = document.createElementNS(e2.globals.SVGNS, "image");
            h2.appendChild(c2), c2.setAttributeNS(window.SVG.xlink, "href", o2), k.setAttrs(c2, {
              x: 0,
              y: 0,
              preserveAspectRatio: "none",
              width: n2 + "px",
              height: l2 + "px"
            }), c2.style.opacity = t3.opacity, e2.globals.dom.elDefs.node.appendChild(h2);
          }
        }, {
          key: "getSeriesIndex",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config.chart.type;
            return ("bar" === i2 || "rangeBar" === i2) && e2.config.plotOptions.bar.distributed || "heatmap" === i2 || "treemap" === i2 ? this.seriesIndex = t3.seriesNumber : this.seriesIndex = t3.seriesNumber % e2.globals.series.length, this.seriesIndex;
          }
        }, {
          key: "fillPath",
          value: function (t3) {
            var e2 = this.w;
            this.opts = t3;
            var i2,
              a2,
              s2,
              r2 = this.w.config;
            this.seriesIndex = this.getSeriesIndex(t3);
            var o2 = this.getFillColors()[this.seriesIndex];
            void 0 !== e2.globals.seriesColors[this.seriesIndex] && (o2 = e2.globals.seriesColors[this.seriesIndex]), "function" == typeof o2 && (o2 = o2({
              seriesIndex: this.seriesIndex,
              dataPointIndex: t3.dataPointIndex,
              value: t3.value,
              w: e2
            }));
            var n2 = t3.fillType ? t3.fillType : this.getFillType(this.seriesIndex),
              l2 = Array.isArray(r2.fill.opacity) ? r2.fill.opacity[this.seriesIndex] : r2.fill.opacity;
            t3.color && (o2 = t3.color), o2 || (o2 = "#fff", console.warn("undefined color - ApexCharts"));
            var h2 = o2;
            if (-1 === o2.indexOf("rgb") ? o2.length < 9 && (h2 = m.hexToRgba(o2, l2)) : o2.indexOf("rgba") > -1 && (l2 = m.getOpacityFromRGBA(o2)), t3.opacity && (l2 = t3.opacity), "pattern" === n2 && (a2 = this.handlePatternFill({
              fillConfig: t3.fillConfig,
              patternFill: a2,
              fillColor: o2,
              fillOpacity: l2,
              defaultColor: h2
            })), "gradient" === n2 && (s2 = this.handleGradientFill({
              fillConfig: t3.fillConfig,
              fillColor: o2,
              fillOpacity: l2,
              i: this.seriesIndex
            })), "image" === n2) {
              var c2 = r2.fill.image.src,
                d2 = t3.patternID ? t3.patternID : "",
                g2 = "pattern".concat(e2.globals.cuid).concat(t3.seriesNumber + 1).concat(d2);
              -1 === this.patternIDs.indexOf(g2) && (this.clippedImgArea({
                opacity: l2,
                image: Array.isArray(c2) ? t3.seriesNumber < c2.length ? c2[t3.seriesNumber] : c2[0] : c2,
                width: t3.width ? t3.width : void 0,
                height: t3.height ? t3.height : void 0,
                patternUnits: t3.patternUnits,
                patternID: g2
              }), this.patternIDs.push(g2)), i2 = "url(#".concat(g2, ")");
            } else i2 = "gradient" === n2 ? s2 : "pattern" === n2 ? a2 : h2;
            return t3.solid && (i2 = h2), i2;
          }
        }, {
          key: "getFillType",
          value: function (t3) {
            var e2 = this.w;
            return Array.isArray(e2.config.fill.type) ? e2.config.fill.type[t3] : e2.config.fill.type;
          }
        }, {
          key: "getFillColors",
          value: function () {
            var t3 = this.w,
              e2 = t3.config,
              i2 = this.opts,
              a2 = [];
            return t3.globals.comboCharts ? "line" === t3.config.series[this.seriesIndex].type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors) : "line" === e2.chart.type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors), void 0 !== i2.fillColors && (a2 = [], Array.isArray(i2.fillColors) ? a2 = i2.fillColors.slice() : a2.push(i2.fillColors)), a2;
          }
        }, {
          key: "handlePatternFill",
          value: function (t3) {
            var e2 = t3.fillConfig,
              i2 = t3.patternFill,
              a2 = t3.fillColor,
              s2 = t3.fillOpacity,
              r2 = t3.defaultColor,
              o2 = this.w.config.fill;
            e2 && (o2 = e2);
            var n2 = this.opts,
              l2 = new k(this.ctx),
              h2 = Array.isArray(o2.pattern.strokeWidth) ? o2.pattern.strokeWidth[this.seriesIndex] : o2.pattern.strokeWidth,
              c2 = a2;
            Array.isArray(o2.pattern.style) ? i2 = void 0 !== o2.pattern.style[n2.seriesNumber] ? l2.drawPattern(o2.pattern.style[n2.seriesNumber], o2.pattern.width, o2.pattern.height, c2, h2, s2) : r2 : i2 = l2.drawPattern(o2.pattern.style, o2.pattern.width, o2.pattern.height, c2, h2, s2);
            return i2;
          }
        }, {
          key: "handleGradientFill",
          value: function (t3) {
            var e2 = t3.fillColor,
              i2 = t3.fillOpacity,
              a2 = t3.fillConfig,
              s2 = t3.i,
              r2 = this.w.config.fill;
            a2 && (r2 = g(g({}, r2), a2));
            var o2,
              n2 = this.opts,
              l2 = new k(this.ctx),
              h2 = new m(),
              c2 = r2.gradient.type,
              d2 = e2,
              u2 = void 0 === r2.gradient.opacityFrom ? i2 : Array.isArray(r2.gradient.opacityFrom) ? r2.gradient.opacityFrom[s2] : r2.gradient.opacityFrom;
            d2.indexOf("rgba") > -1 && (u2 = m.getOpacityFromRGBA(d2));
            var f2 = void 0 === r2.gradient.opacityTo ? i2 : Array.isArray(r2.gradient.opacityTo) ? r2.gradient.opacityTo[s2] : r2.gradient.opacityTo;
            if (void 0 === r2.gradient.gradientToColors || 0 === r2.gradient.gradientToColors.length) o2 = "dark" === r2.gradient.shade ? h2.shadeColor(-1 * parseFloat(r2.gradient.shadeIntensity), e2.indexOf("rgb") > -1 ? m.rgb2hex(e2) : e2) : h2.shadeColor(parseFloat(r2.gradient.shadeIntensity), e2.indexOf("rgb") > -1 ? m.rgb2hex(e2) : e2);else if (r2.gradient.gradientToColors[n2.seriesNumber]) {
              var p2 = r2.gradient.gradientToColors[n2.seriesNumber];
              o2 = p2, p2.indexOf("rgba") > -1 && (f2 = m.getOpacityFromRGBA(p2));
            } else o2 = e2;
            if (r2.gradient.gradientFrom && (d2 = r2.gradient.gradientFrom), r2.gradient.gradientTo && (o2 = r2.gradient.gradientTo), r2.gradient.inverseColors) {
              var x2 = d2;
              d2 = o2, o2 = x2;
            }
            return d2.indexOf("rgb") > -1 && (d2 = m.rgb2hex(d2)), o2.indexOf("rgb") > -1 && (o2 = m.rgb2hex(o2)), l2.drawGradient(c2, d2, o2, u2, f2, n2.size, r2.gradient.stops, r2.gradient.colorStops, s2);
          }
        }]), t2;
      }(),
      W = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "setGlobalMarkerSize",
          value: function () {
            var t3 = this.w;
            if (t3.globals.markers.size = Array.isArray(t3.config.markers.size) ? t3.config.markers.size : [t3.config.markers.size], t3.globals.markers.size.length > 0) {
              if (t3.globals.markers.size.length < t3.globals.series.length + 1) for (var e2 = 0; e2 <= t3.globals.series.length; e2++) void 0 === t3.globals.markers.size[e2] && t3.globals.markers.size.push(t3.globals.markers.size[0]);
            } else t3.globals.markers.size = t3.config.series.map(function (e3) {
              return t3.config.markers.size;
            });
          }
        }, {
          key: "plotChartMarkers",
          value: function (t3, e2, i2, a2) {
            var s2,
              r2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
              o2 = this.w,
              n2 = e2,
              l2 = t3,
              h2 = null,
              c2 = new k(this.ctx),
              d2 = o2.config.markers.discrete && o2.config.markers.discrete.length;
            if ((o2.globals.markers.size[e2] > 0 || r2 || d2) && (h2 = c2.group({
              class: r2 || d2 ? "" : "apexcharts-series-markers"
            })).attr("clip-path", "url(#gridRectMarkerMask".concat(o2.globals.cuid, ")")), Array.isArray(l2.x)) for (var g2 = 0; g2 < l2.x.length; g2++) {
              var u2 = i2;
              1 === i2 && 0 === g2 && (u2 = 0), 1 === i2 && 1 === g2 && (u2 = 1);
              var f2 = "apexcharts-marker";
              if ("line" !== o2.config.chart.type && "area" !== o2.config.chart.type || o2.globals.comboCharts || o2.config.tooltip.intersect || (f2 += " no-pointer-events"), (Array.isArray(o2.config.markers.size) ? o2.globals.markers.size[e2] > 0 : o2.config.markers.size > 0) || r2 || d2) {
                m.isNumber(l2.y[g2]) ? f2 += " w".concat(m.randomId()) : f2 = "apexcharts-nullpoint";
                var p2 = this.getMarkerConfig({
                  cssClass: f2,
                  seriesIndex: e2,
                  dataPointIndex: u2
                });
                o2.config.series[n2].data[u2] && (o2.config.series[n2].data[u2].fillColor && (p2.pointFillColor = o2.config.series[n2].data[u2].fillColor), o2.config.series[n2].data[u2].strokeColor && (p2.pointStrokeColor = o2.config.series[n2].data[u2].strokeColor)), void 0 !== a2 && (p2.pSize = a2), (l2.x[g2] < -o2.globals.markers.largestSize || l2.x[g2] > o2.globals.gridWidth + o2.globals.markers.largestSize || l2.y[g2] < -o2.globals.markers.largestSize || l2.y[g2] > o2.globals.gridHeight + o2.globals.markers.largestSize) && (p2.pSize = 0), (s2 = c2.drawMarker(l2.x[g2], l2.y[g2], p2)).attr("rel", u2), s2.attr("j", u2), s2.attr("index", e2), s2.node.setAttribute("default-marker-size", p2.pSize), new w(this.ctx).setSelectionFilter(s2, e2, u2), this.addEvents(s2), h2 && h2.add(s2);
              } else void 0 === o2.globals.pointsArray[e2] && (o2.globals.pointsArray[e2] = []), o2.globals.pointsArray[e2].push([l2.x[g2], l2.y[g2]]);
            }
            return h2;
          }
        }, {
          key: "getMarkerConfig",
          value: function (t3) {
            var e2 = t3.cssClass,
              i2 = t3.seriesIndex,
              a2 = t3.dataPointIndex,
              s2 = void 0 === a2 ? null : a2,
              r2 = t3.radius,
              o2 = void 0 === r2 ? null : r2,
              n2 = t3.size,
              l2 = void 0 === n2 ? null : n2,
              h2 = t3.strokeWidth,
              c2 = void 0 === h2 ? null : h2,
              d2 = this.w,
              g2 = this.getMarkerStyle(i2),
              u2 = null === l2 ? d2.globals.markers.size[i2] : l2,
              f2 = d2.config.markers;
            return null !== s2 && f2.discrete.length && f2.discrete.map(function (t4) {
              t4.seriesIndex === i2 && t4.dataPointIndex === s2 && (g2.pointStrokeColor = t4.strokeColor, g2.pointFillColor = t4.fillColor, u2 = t4.size, g2.pointShape = t4.shape);
            }), {
              pSize: null === o2 ? u2 : o2,
              pRadius: null !== o2 ? o2 : f2.radius,
              pointStrokeWidth: null !== c2 ? c2 : Array.isArray(f2.strokeWidth) ? f2.strokeWidth[i2] : f2.strokeWidth,
              pointStrokeColor: g2.pointStrokeColor,
              pointFillColor: g2.pointFillColor,
              shape: g2.pointShape || (Array.isArray(f2.shape) ? f2.shape[i2] : f2.shape),
              class: e2,
              pointStrokeOpacity: Array.isArray(f2.strokeOpacity) ? f2.strokeOpacity[i2] : f2.strokeOpacity,
              pointStrokeDashArray: Array.isArray(f2.strokeDashArray) ? f2.strokeDashArray[i2] : f2.strokeDashArray,
              pointFillOpacity: Array.isArray(f2.fillOpacity) ? f2.fillOpacity[i2] : f2.fillOpacity,
              seriesIndex: i2
            };
          }
        }, {
          key: "addEvents",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx);
            t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this.ctx, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this.ctx, t3)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this.ctx, t3)), t3.node.addEventListener("click", e2.config.markers.onClick), t3.node.addEventListener("dblclick", e2.config.markers.onDblClick), t3.node.addEventListener("touchstart", i2.pathMouseDown.bind(this.ctx, t3), {
              passive: true
            });
          }
        }, {
          key: "getMarkerStyle",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.globals.markers.colors,
              a2 = e2.config.markers.strokeColor || e2.config.markers.strokeColors;
            return {
              pointStrokeColor: Array.isArray(a2) ? a2[t3] : a2,
              pointFillColor: Array.isArray(i2) ? i2[t3] : i2
            };
          }
        }]), t2;
      }(),
      B = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.initialAnim = this.w.config.chart.animations.enabled;
        }
        return s(t2, [{
          key: "draw",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = new k(this.ctx),
              r2 = i2.realIndex,
              o2 = i2.pointsPos,
              n2 = i2.zRatio,
              l2 = i2.elParent,
              h2 = s2.group({
                class: "apexcharts-series-markers apexcharts-series-".concat(a2.config.chart.type)
              });
            if (h2.attr("clip-path", "url(#gridRectMarkerMask".concat(a2.globals.cuid, ")")), Array.isArray(o2.x)) for (var c2 = 0; c2 < o2.x.length; c2++) {
              var d2 = e2 + 1,
                g2 = true;
              0 === e2 && 0 === c2 && (d2 = 0), 0 === e2 && 1 === c2 && (d2 = 1);
              var u2 = a2.globals.markers.size[r2];
              if (n2 !== 1 / 0) {
                var f2 = a2.config.plotOptions.bubble;
                u2 = a2.globals.seriesZ[r2][d2], f2.zScaling && (u2 /= n2), f2.minBubbleRadius && u2 < f2.minBubbleRadius && (u2 = f2.minBubbleRadius), f2.maxBubbleRadius && u2 > f2.maxBubbleRadius && (u2 = f2.maxBubbleRadius);
              }
              var p2 = o2.x[c2],
                x2 = o2.y[c2];
              if (u2 = u2 || 0, null !== x2 && void 0 !== a2.globals.series[r2][d2] || (g2 = false), g2) {
                var b2 = this.drawPoint(p2, x2, u2, r2, d2, e2);
                h2.add(b2);
              }
              l2.add(h2);
            }
          }
        }, {
          key: "drawPoint",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2 = this.w,
              n2 = a2,
              l2 = new y(this.ctx),
              h2 = new w(this.ctx),
              c2 = new N(this.ctx),
              d2 = new W(this.ctx),
              g2 = new k(this.ctx),
              u2 = d2.getMarkerConfig({
                cssClass: "apexcharts-marker",
                seriesIndex: n2,
                dataPointIndex: s2,
                radius: "bubble" === o2.config.chart.type || o2.globals.comboCharts && o2.config.series[a2] && "bubble" === o2.config.series[a2].type ? i2 : null
              }),
              f2 = c2.fillPath({
                seriesNumber: a2,
                dataPointIndex: s2,
                color: u2.pointFillColor,
                patternUnits: "objectBoundingBox",
                value: o2.globals.series[a2][r2]
              }),
              p2 = g2.drawMarker(t3, e2, u2);
            if (o2.config.series[n2].data[s2] && o2.config.series[n2].data[s2].fillColor && (f2 = o2.config.series[n2].data[s2].fillColor), p2.attr({
              fill: f2
            }), o2.config.chart.dropShadow.enabled) {
              var x2 = o2.config.chart.dropShadow;
              h2.dropShadow(p2, x2, a2);
            }
            if (!this.initialAnim || o2.globals.dataChanged || o2.globals.resized) o2.globals.animationEnded = true;else {
              var b2 = o2.config.chart.animations.speed;
              l2.animateMarker(p2, b2, o2.globals.easing, function () {
                window.setTimeout(function () {
                  l2.animationCompleted(p2);
                }, 100);
              });
            }
            return p2.attr({
              rel: s2,
              j: s2,
              index: a2,
              "default-marker-size": u2.pSize
            }), h2.setSelectionFilter(p2, a2, s2), d2.addEvents(p2), p2.node.classList.add("apexcharts-marker"), p2;
          }
        }, {
          key: "centerTextInBubble",
          value: function (t3) {
            var e2 = this.w;
            return {
              y: t3 += parseInt(e2.config.dataLabels.style.fontSize, 10) / 4
            };
          }
        }]), t2;
      }(),
      G = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "dataLabelsCorrection",
          value: function (t3, e2, i2, a2, s2, r2, o2) {
            var n2 = this.w,
              l2 = false,
              h2 = new k(this.ctx).getTextRects(i2, o2),
              c2 = h2.width,
              d2 = h2.height;
            e2 < 0 && (e2 = 0), e2 > n2.globals.gridHeight + d2 && (e2 = n2.globals.gridHeight + d2 / 2), void 0 === n2.globals.dataLabelsRects[a2] && (n2.globals.dataLabelsRects[a2] = []), n2.globals.dataLabelsRects[a2].push({
              x: t3,
              y: e2,
              width: c2,
              height: d2
            });
            var g2 = n2.globals.dataLabelsRects[a2].length - 2,
              u2 = void 0 !== n2.globals.lastDrawnDataLabelsIndexes[a2] ? n2.globals.lastDrawnDataLabelsIndexes[a2][n2.globals.lastDrawnDataLabelsIndexes[a2].length - 1] : 0;
            if (void 0 !== n2.globals.dataLabelsRects[a2][g2]) {
              var f2 = n2.globals.dataLabelsRects[a2][u2];
              (t3 > f2.x + f2.width || e2 > f2.y + f2.height || e2 + d2 < f2.y || t3 + c2 < f2.x) && (l2 = true);
            }
            return (0 === s2 || r2) && (l2 = true), {
              x: t3,
              y: e2,
              textRects: h2,
              drawnextLabel: l2
            };
          }
        }, {
          key: "drawDataLabel",
          value: function (t3) {
            var e2 = this,
              i2 = t3.type,
              a2 = t3.pos,
              s2 = t3.i,
              r2 = t3.j,
              o2 = t3.isRangeStart,
              n2 = t3.strokeWidth,
              l2 = void 0 === n2 ? 2 : n2,
              h2 = this.w,
              c2 = new k(this.ctx),
              d2 = h2.config.dataLabels,
              g2 = 0,
              u2 = 0,
              f2 = r2,
              p2 = null;
            if (-1 !== h2.globals.collapsedSeriesIndices.indexOf(s2) || !d2.enabled || !Array.isArray(a2.x)) return p2;
            p2 = c2.group({
              class: "apexcharts-data-labels"
            });
            for (var x2 = 0; x2 < a2.x.length; x2++) if (g2 = a2.x[x2] + d2.offsetX, u2 = a2.y[x2] + d2.offsetY + l2, !isNaN(g2)) {
              1 === r2 && 0 === x2 && (f2 = 0), 1 === r2 && 1 === x2 && (f2 = 1);
              var b2 = h2.globals.series[s2][f2];
              "rangeArea" === i2 && (b2 = o2 ? h2.globals.seriesRangeStart[s2][f2] : h2.globals.seriesRangeEnd[s2][f2]);
              var v2 = "",
                m2 = function (t4) {
                  return h2.config.dataLabels.formatter(t4, {
                    ctx: e2.ctx,
                    seriesIndex: s2,
                    dataPointIndex: f2,
                    w: h2
                  });
                };
              if ("bubble" === h2.config.chart.type) v2 = m2(b2 = h2.globals.seriesZ[s2][f2]), u2 = a2.y[x2], u2 = new B(this.ctx).centerTextInBubble(u2, s2, f2).y;else void 0 !== b2 && (v2 = m2(b2));
              var y2 = h2.config.dataLabels.textAnchor;
              h2.globals.isSlopeChart && (y2 = 0 === f2 ? "end" : f2 === h2.config.series[s2].data.length - 1 ? "start" : "middle"), this.plotDataLabelsText({
                x: g2,
                y: u2,
                text: v2,
                i: s2,
                j: f2,
                parent: p2,
                offsetCorrection: true,
                dataLabelsConfig: h2.config.dataLabels,
                textAnchor: y2
              });
            }
            return p2;
          }
        }, {
          key: "plotDataLabelsText",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a2 = t3.x,
              s2 = t3.y,
              r2 = t3.i,
              o2 = t3.j,
              n2 = t3.text,
              l2 = t3.textAnchor,
              h2 = t3.fontSize,
              c2 = t3.parent,
              d2 = t3.dataLabelsConfig,
              g2 = t3.color,
              u2 = t3.alwaysDrawDataLabel,
              f2 = t3.offsetCorrection,
              p2 = t3.className,
              x2 = null;
            if (Array.isArray(e2.config.dataLabels.enabledOnSeries) && e2.config.dataLabels.enabledOnSeries.indexOf(r2) < 0) return x2;
            var b2 = {
              x: a2,
              y: s2,
              drawnextLabel: true,
              textRects: null
            };
            f2 && (b2 = this.dataLabelsCorrection(a2, s2, n2, r2, o2, u2, parseInt(d2.style.fontSize, 10))), e2.globals.zoomed || (a2 = b2.x, s2 = b2.y), b2.textRects && (a2 < -20 - b2.textRects.width || a2 > e2.globals.gridWidth + b2.textRects.width + 30) && (n2 = "");
            var v2 = e2.globals.dataLabels.style.colors[r2];
            (("bar" === e2.config.chart.type || "rangeBar" === e2.config.chart.type) && e2.config.plotOptions.bar.distributed || e2.config.dataLabels.distributed) && (v2 = e2.globals.dataLabels.style.colors[o2]), "function" == typeof v2 && (v2 = v2({
              series: e2.globals.series,
              seriesIndex: r2,
              dataPointIndex: o2,
              w: e2
            })), g2 && (v2 = g2);
            var m2 = d2.offsetX,
              y2 = d2.offsetY;
            if ("bar" !== e2.config.chart.type && "rangeBar" !== e2.config.chart.type || (m2 = 0, y2 = 0), e2.globals.isSlopeChart && (0 !== o2 && (m2 = -2 * d2.offsetX + 5), 0 !== o2 && o2 !== e2.config.series[r2].data.length - 1 && (m2 = 0)), b2.drawnextLabel) {
              if ((x2 = i2.drawText({
                width: 100,
                height: parseInt(d2.style.fontSize, 10),
                x: a2 + m2,
                y: s2 + y2,
                foreColor: v2,
                textAnchor: l2 || d2.textAnchor,
                text: n2,
                fontSize: h2 || d2.style.fontSize,
                fontFamily: d2.style.fontFamily,
                fontWeight: d2.style.fontWeight || "normal"
              })).attr({
                class: p2 || "apexcharts-datalabel",
                cx: a2,
                cy: s2
              }), d2.dropShadow.enabled) {
                var A2 = d2.dropShadow;
                new w(this.ctx).dropShadow(x2, A2);
              }
              c2.add(x2), void 0 === e2.globals.lastDrawnDataLabelsIndexes[r2] && (e2.globals.lastDrawnDataLabelsIndexes[r2] = []), e2.globals.lastDrawnDataLabelsIndexes[r2].push(o2);
            }
            return x2;
          }
        }, {
          key: "addBackgroundToDataLabel",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = i2.config.dataLabels.background,
              s2 = a2.padding,
              r2 = a2.padding / 2,
              o2 = e2.width,
              n2 = e2.height,
              l2 = new k(this.ctx).drawRect(e2.x - s2, e2.y - r2 / 2, o2 + 2 * s2, n2 + r2, a2.borderRadius, "transparent" !== i2.config.chart.background && i2.config.chart.background ? i2.config.chart.background : "#fff", a2.opacity, a2.borderWidth, a2.borderColor);
            a2.dropShadow.enabled && new w(this.ctx).dropShadow(l2, a2.dropShadow);
            return l2;
          }
        }, {
          key: "dataLabelsBackground",
          value: function () {
            var t3 = this.w;
            if ("bubble" !== t3.config.chart.type) for (var e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i2 = 0; i2 < e2.length; i2++) {
              var a2 = e2[i2],
                s2 = a2.getBBox(),
                r2 = null;
              if (s2.width && s2.height && (r2 = this.addBackgroundToDataLabel(a2, s2)), r2) {
                a2.parentNode.insertBefore(r2.node, a2);
                var o2 = a2.getAttribute("fill");
                t3.config.chart.animations.enabled && !t3.globals.resized && !t3.globals.dataChanged ? r2.animate().attr({
                  fill: o2
                }) : r2.attr({
                  fill: o2
                }), a2.setAttribute("fill", t3.config.dataLabels.background.foreColor);
              }
            }
          }
        }, {
          key: "bringForward",
          value: function () {
            for (var t3 = this.w, e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a2 = 0; a2 < e2.length; a2++) i2 && i2.insertBefore(e2[a2], i2.nextSibling);
          }
        }]), t2;
      }(),
      V = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.legendInactiveClass = "legend-mouseover-inactive";
        }
        return s(t2, [{
          key: "getAllSeriesEls",
          value: function () {
            return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
          }
        }, {
          key: "getSeriesByName",
          value: function (t3) {
            return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(m.escapeString(t3), "']"));
          }
        }, {
          key: "isSeriesHidden",
          value: function (t3) {
            var e2 = this.getSeriesByName(t3),
              i2 = parseInt(e2.getAttribute("data:realIndex"), 10);
            return {
              isHidden: e2.classList.contains("apexcharts-series-collapsed"),
              realIndex: i2
            };
          }
        }, {
          key: "addCollapsedClassToSeries",
          value: function (t3, e2) {
            var i2 = this.w;
            function a2(i3) {
              for (var a3 = 0; a3 < i3.length; a3++) i3[a3].index === e2 && t3.node.classList.add("apexcharts-series-collapsed");
            }
            a2(i2.globals.collapsedSeries), a2(i2.globals.ancillaryCollapsedSeries);
          }
        }, {
          key: "toggleSeries",
          value: function (t3) {
            var e2 = this.isSeriesHidden(t3);
            return this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, e2.isHidden), e2.isHidden;
          }
        }, {
          key: "showSeries",
          value: function (t3) {
            var e2 = this.isSeriesHidden(t3);
            e2.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, true);
          }
        }, {
          key: "hideSeries",
          value: function (t3) {
            var e2 = this.isSeriesHidden(t3);
            e2.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, false);
          }
        }, {
          key: "resetSeries",
          value: function () {
            var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
              e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
              i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
              a2 = this.w,
              s2 = m.clone(a2.globals.initialSeries);
            a2.globals.previousPaths = [], i2 ? (a2.globals.collapsedSeries = [], a2.globals.ancillaryCollapsedSeries = [], a2.globals.collapsedSeriesIndices = [], a2.globals.ancillaryCollapsedSeriesIndices = []) : s2 = this.emptyCollapsedSeries(s2), a2.config.series = s2, t3 && (e2 && (a2.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled));
          }
        }, {
          key: "emptyCollapsedSeries",
          value: function (t3) {
            for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++) e2.globals.collapsedSeriesIndices.indexOf(i2) > -1 && (t3[i2].data = []);
            return t3;
          }
        }, {
          key: "highlightSeries",
          value: function (t3) {
            var e2 = this.w,
              i2 = this.getSeriesByName(t3),
              a2 = parseInt(null == i2 ? void 0 : i2.getAttribute("data:realIndex"), 10),
              s2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis"),
              r2 = null,
              o2 = null,
              n2 = null;
            if (e2.globals.axisCharts || "radialBar" === e2.config.chart.type) {
              if (e2.globals.axisCharts) {
                r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(a2, "']")), o2 = e2.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(a2, "']"));
                var l2 = e2.globals.seriesYAxisReverseMap[a2];
                n2 = e2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(l2, "']"));
              } else r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a2 + 1, "']"));
            } else r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a2 + 1, "'] path"));
            for (var h2 = 0; h2 < s2.length; h2++) s2[h2].classList.add(this.legendInactiveClass);
            if (r2) e2.globals.axisCharts || r2.parentNode.classList.remove(this.legendInactiveClass), r2.classList.remove(this.legendInactiveClass), null !== o2 && o2.classList.remove(this.legendInactiveClass), null !== n2 && n2.classList.remove(this.legendInactiveClass);else for (var c2 = 0; c2 < s2.length; c2++) s2[c2].classList.remove(this.legendInactiveClass);
          }
        }, {
          key: "toggleSeriesOnHover",
          value: function (t3, e2) {
            var i2 = this.w;
            e2 || (e2 = t3.target);
            var a2 = i2.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis");
            if ("mousemove" === t3.type) {
              var s2 = parseInt(e2.getAttribute("rel"), 10) - 1;
              this.highlightSeries(i2.globals.seriesNames[s2]);
            } else if ("mouseout" === t3.type) for (var r2 = 0; r2 < a2.length; r2++) a2[r2].classList.remove(this.legendInactiveClass);
          }
        }, {
          key: "highlightRangeInSeries",
          value: function (t3, e2) {
            var i2 = this,
              a2 = this.w,
              s2 = a2.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"),
              r2 = function (t4) {
                for (var e3 = 0; e3 < s2.length; e3++) s2[e3].classList[t4](i2.legendInactiveClass);
              };
            if ("mousemove" === t3.type) {
              var o2 = parseInt(e2.getAttribute("rel"), 10) - 1;
              r2("add");
              var n2 = a2.config.plotOptions.heatmap.colorScale.ranges;
              !function (t4, e3) {
                for (var a3 = 0; a3 < s2.length; a3++) {
                  var r3 = Number(s2[a3].getAttribute("val"));
                  r3 >= t4.from && (r3 < t4.to || t4.to === e3 && r3 === e3) && s2[a3].classList.remove(i2.legendInactiveClass);
                }
              }(n2[o2], n2.reduce(function (t4, e3) {
                return Math.max(t4, e3.to);
              }, 0));
            } else "mouseout" === t3.type && r2("remove");
          }
        }, {
          key: "getActiveConfigSeriesIndex",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc",
              e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
              i2 = this.w,
              a2 = 0;
            if (i2.config.series.length > 1) {
              for (var s2 = i2.config.series.map(function (t4, a3) {
                  return t4.data && t4.data.length > 0 && -1 === i2.globals.collapsedSeriesIndices.indexOf(a3) && (!i2.globals.comboCharts || 0 === e2.length || e2.length && e2.indexOf(i2.config.series[a3].type) > -1) ? a3 : -1;
                }), r2 = "asc" === t3 ? 0 : s2.length - 1; "asc" === t3 ? r2 < s2.length : r2 >= 0; "asc" === t3 ? r2++ : r2--) if (-1 !== s2[r2]) {
                a2 = s2[r2];
                break;
              }
            }
            return a2;
          }
        }, {
          key: "getBarSeriesIndices",
          value: function () {
            return this.w.globals.comboCharts ? this.w.config.series.map(function (t3, e2) {
              return "bar" === t3.type || "column" === t3.type ? e2 : -1;
            }).filter(function (t3) {
              return -1 !== t3;
            }) : this.w.config.series.map(function (t3, e2) {
              return e2;
            });
          }
        }, {
          key: "getPreviousPaths",
          value: function () {
            var t3 = this.w;
            function e2(e3, i3, a3) {
              for (var s3 = e3[i3].childNodes, r2 = {
                  type: a3,
                  paths: [],
                  realIndex: e3[i3].getAttribute("data:realIndex")
                }, o2 = 0; o2 < s3.length; o2++) if (s3[o2].hasAttribute("pathTo")) {
                var n2 = s3[o2].getAttribute("pathTo");
                r2.paths.push({
                  d: n2
                });
              }
              t3.globals.previousPaths.push(r2);
            }
            t3.globals.previousPaths = [];
            ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function (i3) {
              for (var a3, s3 = (a3 = i3, t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a3, "-series .apexcharts-series"))), r2 = 0; r2 < s3.length; r2++) e2(s3, r2, i3);
            }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
            var i2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series"));
            if (i2.length > 0) for (var a2 = function (e3) {
                for (var i3 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e3, "'] rect")), a3 = [], s3 = function (t4) {
                    var e4 = function (e5) {
                        return i3[t4].getAttribute(e5);
                      },
                      s4 = {
                        x: parseFloat(e4("x")),
                        y: parseFloat(e4("y")),
                        width: parseFloat(e4("width")),
                        height: parseFloat(e4("height"))
                      };
                    a3.push({
                      rect: s4,
                      color: i3[t4].getAttribute("color")
                    });
                  }, r2 = 0; r2 < i3.length; r2++) s3(r2);
                t3.globals.previousPaths.push(a3);
              }, s2 = 0; s2 < i2.length; s2++) a2(s2);
            t3.globals.axisCharts || (t3.globals.previousPaths = t3.globals.series);
          }
        }, {
          key: "handlePrevBubbleScatterPaths",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series"));
            if (i2.length > 0) for (var a2 = 0; a2 < i2.length; a2++) {
              for (var s2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series[data\\:realIndex='").concat(a2, "'] circle")), r2 = [], o2 = 0; o2 < s2.length; o2++) r2.push({
                x: s2[o2].getAttribute("cx"),
                y: s2[o2].getAttribute("cy"),
                r: s2[o2].getAttribute("r")
              });
              e2.globals.previousPaths.push(r2);
            }
          }
        }, {
          key: "clearPreviousPaths",
          value: function () {
            var t3 = this.w;
            t3.globals.previousPaths = [], t3.globals.allSeriesCollapsed = false;
          }
        }, {
          key: "handleNoData",
          value: function () {
            var t3 = this.w,
              e2 = t3.config.noData,
              i2 = new k(this.ctx),
              a2 = t3.globals.svgWidth / 2,
              s2 = t3.globals.svgHeight / 2,
              r2 = "middle";
            if (t3.globals.noData = true, t3.globals.animationEnded = true, "left" === e2.align ? (a2 = 10, r2 = "start") : "right" === e2.align && (a2 = t3.globals.svgWidth - 10, r2 = "end"), "top" === e2.verticalAlign ? s2 = 50 : "bottom" === e2.verticalAlign && (s2 = t3.globals.svgHeight - 50), a2 += e2.offsetX, s2 = s2 + parseInt(e2.style.fontSize, 10) + 2 + e2.offsetY, void 0 !== e2.text && "" !== e2.text) {
              var o2 = i2.drawText({
                x: a2,
                y: s2,
                text: e2.text,
                textAnchor: r2,
                fontSize: e2.style.fontSize,
                fontFamily: e2.style.fontFamily,
                foreColor: e2.style.color,
                opacity: 1,
                class: "apexcharts-text-nodata"
              });
              t3.globals.dom.Paper.add(o2);
            }
          }
        }, {
          key: "setNullSeriesToZeroValues",
          value: function (t3) {
            for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++) if (0 === t3[i2].length) for (var a2 = 0; a2 < t3[e2.globals.maxValsInArrayIndex].length; a2++) t3[i2].push(0);
            return t3;
          }
        }, {
          key: "hasAllSeriesEqualX",
          value: function () {
            for (var t3 = true, e2 = this.w, i2 = this.filteredSeriesX(), a2 = 0; a2 < i2.length - 1; a2++) if (i2[a2][0] !== i2[a2 + 1][0]) {
              t3 = false;
              break;
            }
            return e2.globals.allSeriesHasEqualX = t3, t3;
          }
        }, {
          key: "filteredSeriesX",
          value: function () {
            var t3 = this.w.globals.seriesX.map(function (t4) {
              return t4.length > 0 ? t4 : [];
            });
            return t3;
          }
        }]), t2;
      }(),
      _ = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new A(this.ctx);
        }
        return s(t2, [{
          key: "isMultiFormat",
          value: function () {
            return this.isFormatXY() || this.isFormat2DArray();
          }
        }, {
          key: "isFormatXY",
          value: function () {
            var t3 = this.w.config.series.slice(),
              e2 = new V(this.ctx);
            if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && null !== t3[this.activeSeriesIndex].data[0] && void 0 !== t3[this.activeSeriesIndex].data[0].x && null !== t3[this.activeSeriesIndex].data[0]) return true;
          }
        }, {
          key: "isFormat2DArray",
          value: function () {
            var t3 = this.w.config.series.slice(),
              e2 = new V(this.ctx);
            if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && void 0 !== t3[this.activeSeriesIndex].data[0] && null !== t3[this.activeSeriesIndex].data[0] && t3[this.activeSeriesIndex].data[0].constructor === Array) return true;
          }
        }, {
          key: "handleFormat2DArray",
          value: function (t3, e2) {
            for (var i2 = this.w.config, a2 = this.w.globals, s2 = "boxPlot" === i2.chart.type || "boxPlot" === i2.series[e2].type, r2 = 0; r2 < t3[e2].data.length; r2++) if (void 0 !== t3[e2].data[r2][1] && (Array.isArray(t3[e2].data[r2][1]) && 4 === t3[e2].data[r2][1].length && !s2 ? this.twoDSeries.push(m.parseNumber(t3[e2].data[r2][1][3])) : t3[e2].data[r2].length >= 5 ? this.twoDSeries.push(m.parseNumber(t3[e2].data[r2][4])) : this.twoDSeries.push(m.parseNumber(t3[e2].data[r2][1])), a2.dataFormatXNumeric = true), "datetime" === i2.xaxis.type) {
              var o2 = new Date(t3[e2].data[r2][0]);
              o2 = new Date(o2).getTime(), this.twoDSeriesX.push(o2);
            } else this.twoDSeriesX.push(t3[e2].data[r2][0]);
            for (var n2 = 0; n2 < t3[e2].data.length; n2++) void 0 !== t3[e2].data[n2][2] && (this.threeDSeries.push(t3[e2].data[n2][2]), a2.isDataXYZ = true);
          }
        }, {
          key: "handleFormatXY",
          value: function (t3, e2) {
            var i2 = this.w.config,
              a2 = this.w.globals,
              s2 = new L(this.ctx),
              r2 = e2;
            a2.collapsedSeriesIndices.indexOf(e2) > -1 && (r2 = this.activeSeriesIndex);
            for (var o2 = 0; o2 < t3[e2].data.length; o2++) void 0 !== t3[e2].data[o2].y && (Array.isArray(t3[e2].data[o2].y) ? this.twoDSeries.push(m.parseNumber(t3[e2].data[o2].y[t3[e2].data[o2].y.length - 1])) : this.twoDSeries.push(m.parseNumber(t3[e2].data[o2].y))), void 0 !== t3[e2].data[o2].goals && Array.isArray(t3[e2].data[o2].goals) ? (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(t3[e2].data[o2].goals)) : (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(null));
            for (var n2 = 0; n2 < t3[r2].data.length; n2++) {
              var l2 = "string" == typeof t3[r2].data[n2].x,
                h2 = Array.isArray(t3[r2].data[n2].x),
                c2 = !h2 && !!s2.isValidDate(t3[r2].data[n2].x);
              if (l2 || c2) {
                if (l2 || i2.xaxis.convertedCatToNumeric) {
                  var d2 = a2.isBarHorizontal && a2.isRangeData;
                  "datetime" !== i2.xaxis.type || d2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x), isNaN(t3[r2].data[n2].x) || "category" === this.w.config.xaxis.type || "string" == typeof t3[r2].data[n2].x || (a2.isXNumeric = true)) : this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x));
                } else "datetime" === i2.xaxis.type ? this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x.toString())) : (a2.dataFormatXNumeric = true, a2.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t3[r2].data[n2].x)));
              } else h2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x)) : (a2.isXNumeric = true, a2.dataFormatXNumeric = true, this.twoDSeriesX.push(t3[r2].data[n2].x));
            }
            if (t3[e2].data[0] && void 0 !== t3[e2].data[0].z) {
              for (var g2 = 0; g2 < t3[e2].data.length; g2++) this.threeDSeries.push(t3[e2].data[g2].z);
              a2.isDataXYZ = true;
            }
          }
        }, {
          key: "handleRangeData",
          value: function (t3, e2) {
            var i2 = this.w.globals,
              a2 = {};
            return this.isFormat2DArray() ? a2 = this.handleRangeDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleRangeDataFormat("xy", t3, e2)), i2.seriesRangeStart.push(void 0 === a2.start ? [] : a2.start), i2.seriesRangeEnd.push(void 0 === a2.end ? [] : a2.end), i2.seriesRange.push(a2.rangeUniques), i2.seriesRange.forEach(function (t4, e3) {
              t4 && t4.forEach(function (t5, e4) {
                t5.y.forEach(function (e5, i3) {
                  for (var a3 = 0; a3 < t5.y.length; a3++) if (i3 !== a3) {
                    var s2 = e5.y1,
                      r2 = e5.y2,
                      o2 = t5.y[a3].y1;
                    s2 <= t5.y[a3].y2 && o2 <= r2 && (t5.overlaps.indexOf(e5.rangeName) < 0 && t5.overlaps.push(e5.rangeName), t5.overlaps.indexOf(t5.y[a3].rangeName) < 0 && t5.overlaps.push(t5.y[a3].rangeName));
                  }
                });
              });
            }), a2;
          }
        }, {
          key: "handleCandleStickBoxData",
          value: function (t3, e2) {
            var i2 = this.w.globals,
              a2 = {};
            return this.isFormat2DArray() ? a2 = this.handleCandleStickBoxDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleCandleStickBoxDataFormat("xy", t3, e2)), i2.seriesCandleO[e2] = a2.o, i2.seriesCandleH[e2] = a2.h, i2.seriesCandleM[e2] = a2.m, i2.seriesCandleL[e2] = a2.l, i2.seriesCandleC[e2] = a2.c, a2;
          }
        }, {
          key: "handleRangeDataFormat",
          value: function (t3, e2, i2) {
            var a2 = [],
              s2 = [],
              r2 = e2[i2].data.filter(function (t4, e3, i3) {
                return e3 === i3.findIndex(function (e4) {
                  return e4.x === t4.x;
                });
              }).map(function (t4, e3) {
                return {
                  x: t4.x,
                  overlaps: [],
                  y: []
                };
              });
            if ("array" === t3) for (var o2 = 0; o2 < e2[i2].data.length; o2++) Array.isArray(e2[i2].data[o2]) ? (a2.push(e2[i2].data[o2][1][0]), s2.push(e2[i2].data[o2][1][1])) : (a2.push(e2[i2].data[o2]), s2.push(e2[i2].data[o2]));else if ("xy" === t3) for (var n2 = function (t4) {
                var o3 = Array.isArray(e2[i2].data[t4].y),
                  n3 = m.randomId(),
                  l3 = e2[i2].data[t4].x,
                  h2 = {
                    y1: o3 ? e2[i2].data[t4].y[0] : e2[i2].data[t4].y,
                    y2: o3 ? e2[i2].data[t4].y[1] : e2[i2].data[t4].y,
                    rangeName: n3
                  };
                e2[i2].data[t4].rangeName = n3;
                var c2 = r2.findIndex(function (t5) {
                  return t5.x === l3;
                });
                r2[c2].y.push(h2), a2.push(h2.y1), s2.push(h2.y2);
              }, l2 = 0; l2 < e2[i2].data.length; l2++) n2(l2);
            return {
              start: a2,
              end: s2,
              rangeUniques: r2
            };
          }
        }, {
          key: "handleCandleStickBoxDataFormat",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = "boxPlot" === a2.config.chart.type || "boxPlot" === a2.config.series[i2].type,
              r2 = [],
              o2 = [],
              n2 = [],
              l2 = [],
              h2 = [];
            if ("array" === t3) {
              if (s2 && 6 === e2[i2].data[0].length || !s2 && 5 === e2[i2].data[0].length) for (var c2 = 0; c2 < e2[i2].data.length; c2++) r2.push(e2[i2].data[c2][1]), o2.push(e2[i2].data[c2][2]), s2 ? (n2.push(e2[i2].data[c2][3]), l2.push(e2[i2].data[c2][4]), h2.push(e2[i2].data[c2][5])) : (l2.push(e2[i2].data[c2][3]), h2.push(e2[i2].data[c2][4]));else for (var d2 = 0; d2 < e2[i2].data.length; d2++) Array.isArray(e2[i2].data[d2][1]) && (r2.push(e2[i2].data[d2][1][0]), o2.push(e2[i2].data[d2][1][1]), s2 ? (n2.push(e2[i2].data[d2][1][2]), l2.push(e2[i2].data[d2][1][3]), h2.push(e2[i2].data[d2][1][4])) : (l2.push(e2[i2].data[d2][1][2]), h2.push(e2[i2].data[d2][1][3])));
            } else if ("xy" === t3) for (var g2 = 0; g2 < e2[i2].data.length; g2++) Array.isArray(e2[i2].data[g2].y) && (r2.push(e2[i2].data[g2].y[0]), o2.push(e2[i2].data[g2].y[1]), s2 ? (n2.push(e2[i2].data[g2].y[2]), l2.push(e2[i2].data[g2].y[3]), h2.push(e2[i2].data[g2].y[4])) : (l2.push(e2[i2].data[g2].y[2]), h2.push(e2[i2].data[g2].y[3])));
            return {
              o: r2,
              h: o2,
              m: n2,
              l: l2,
              c: h2
            };
          }
        }, {
          key: "parseDataAxisCharts",
          value: function (t3) {
            var e2 = this,
              i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx,
              a2 = this.w.config,
              s2 = this.w.globals,
              r2 = new L(i2),
              o2 = a2.labels.length > 0 ? a2.labels.slice() : a2.xaxis.categories.slice();
            s2.isRangeBar = "rangeBar" === a2.chart.type && s2.isBarHorizontal, s2.hasXaxisGroups = "category" === a2.xaxis.type && a2.xaxis.group.groups.length > 0, s2.hasXaxisGroups && (s2.groups = a2.xaxis.group.groups), t3.forEach(function (t4, e3) {
              void 0 !== t4.name ? s2.seriesNames.push(t4.name) : s2.seriesNames.push("series-" + parseInt(e3 + 1, 10));
            }), this.coreUtils.setSeriesYAxisMappings();
            var n2 = [],
              l2 = p(new Set(a2.series.map(function (t4) {
                return t4.group;
              })));
            a2.series.forEach(function (t4, e3) {
              var i3 = l2.indexOf(t4.group);
              n2[i3] || (n2[i3] = []), n2[i3].push(s2.seriesNames[e3]);
            }), s2.seriesGroups = n2;
            for (var h2 = function () {
                for (var t4 = 0; t4 < o2.length; t4++) if ("string" == typeof o2[t4]) {
                  if (!r2.isValidDate(o2[t4])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                  e2.twoDSeriesX.push(r2.parseDate(o2[t4]));
                } else e2.twoDSeriesX.push(o2[t4]);
              }, c2 = 0; c2 < t3.length; c2++) {
              if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t3[c2].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
              if ("rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type && "rangeBar" !== t3[c2].type && "rangeArea" !== t3[c2].type || (s2.isRangeData = true, "rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type || this.handleRangeData(t3, c2)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t3, c2) : this.isFormatXY() && this.handleFormatXY(t3, c2), "candlestick" !== a2.chart.type && "candlestick" !== t3[c2].type && "boxPlot" !== a2.chart.type && "boxPlot" !== t3[c2].type || this.handleCandleStickBoxData(t3, c2), s2.series.push(this.twoDSeries), s2.labels.push(this.twoDSeriesX), s2.seriesX.push(this.twoDSeriesX), s2.seriesGoals = this.seriesGoals, c2 !== this.activeSeriesIndex || this.fallbackToCategory || (s2.isXNumeric = true);else {
                "datetime" === a2.xaxis.type ? (s2.isXNumeric = true, h2(), s2.seriesX.push(this.twoDSeriesX)) : "numeric" === a2.xaxis.type && (s2.isXNumeric = true, o2.length > 0 && (this.twoDSeriesX = o2, s2.seriesX.push(this.twoDSeriesX))), s2.labels.push(this.twoDSeriesX);
                var d2 = t3[c2].data.map(function (t4) {
                  return m.parseNumber(t4);
                });
                s2.series.push(d2);
              }
              s2.seriesZ.push(this.threeDSeries), void 0 !== t3[c2].color ? s2.seriesColors.push(t3[c2].color) : s2.seriesColors.push(void 0);
            }
            return this.w;
          }
        }, {
          key: "parseDataNonAxisCharts",
          value: function (t3) {
            var e2 = this.w.globals,
              i2 = this.w.config;
            e2.series = t3.slice(), e2.seriesNames = i2.labels.slice();
            for (var a2 = 0; a2 < e2.series.length; a2++) void 0 === e2.seriesNames[a2] && e2.seriesNames.push("series-" + (a2 + 1));
            return this.w;
          }
        }, {
          key: "handleExternalLabelsData",
          value: function (t3) {
            var e2 = this.w.config,
              i2 = this.w.globals;
            if (e2.xaxis.categories.length > 0) i2.labels = e2.xaxis.categories;else if (e2.labels.length > 0) i2.labels = e2.labels.slice();else if (this.fallbackToCategory) {
              if (i2.labels = i2.labels[0], i2.seriesRange.length && (i2.seriesRange.map(function (t4) {
                t4.forEach(function (t5) {
                  i2.labels.indexOf(t5.x) < 0 && t5.x && i2.labels.push(t5.x);
                });
              }), i2.labels = Array.from(new Set(i2.labels.map(JSON.stringify)), JSON.parse)), e2.xaxis.convertedCatToNumeric) new F(e2).convertCatToNumericXaxis(e2, this.ctx, i2.seriesX[0]), this._generateExternalLabels(t3);
            } else this._generateExternalLabels(t3);
          }
        }, {
          key: "_generateExternalLabels",
          value: function (t3) {
            var e2 = this.w.globals,
              i2 = this.w.config,
              a2 = [];
            if (e2.axisCharts) {
              if (e2.series.length > 0) if (this.isFormatXY()) for (var s2 = i2.series.map(function (t4, e3) {
                  return t4.data.filter(function (t5, e4, i3) {
                    return i3.findIndex(function (e5) {
                      return e5.x === t5.x;
                    }) === e4;
                  });
                }), r2 = s2.reduce(function (t4, e3, i3, a3) {
                  return a3[t4].length > e3.length ? t4 : i3;
                }, 0), o2 = 0; o2 < s2[r2].length; o2++) a2.push(o2 + 1);else for (var n2 = 0; n2 < e2.series[e2.maxValsInArrayIndex].length; n2++) a2.push(n2 + 1);
              e2.seriesX = [];
              for (var l2 = 0; l2 < t3.length; l2++) e2.seriesX.push(a2);
              this.w.globals.isBarHorizontal || (e2.isXNumeric = true);
            }
            if (0 === a2.length) {
              a2 = e2.axisCharts ? [] : e2.series.map(function (t4, e3) {
                return e3 + 1;
              });
              for (var h2 = 0; h2 < t3.length; h2++) e2.seriesX.push(a2);
            }
            e2.labels = a2, i2.xaxis.convertedCatToNumeric && (e2.categoryLabels = a2.map(function (t4) {
              return i2.xaxis.labels.formatter(t4);
            })), e2.noLabelsProvided = true;
          }
        }, {
          key: "parseData",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config,
              a2 = e2.globals;
            if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a2.axisCharts ? (this.parseDataAxisCharts(t3), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t3), i2.chart.stacked) {
              var s2 = new V(this.ctx);
              a2.series = s2.setNullSeriesToZeroValues(a2.series);
            }
            this.coreUtils.getSeriesTotals(), a2.axisCharts && (a2.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a2.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a2.dataFormatXNumeric || a2.isXNumeric && ("numeric" !== i2.xaxis.type || 0 !== i2.labels.length || 0 !== i2.xaxis.categories.length) || this.handleExternalLabelsData(t3);
            for (var r2 = this.coreUtils.getCategoryLabels(a2.labels), o2 = 0; o2 < r2.length; o2++) if (Array.isArray(r2[o2])) {
              a2.isMultiLineX = true;
              break;
            }
          }
        }, {
          key: "excludeCollapsedSeriesInYAxis",
          value: function () {
            var t3 = this.w,
              e2 = [];
            t3.globals.seriesYAxisMap.forEach(function (i2, a2) {
              var s2 = 0;
              i2.forEach(function (e3) {
                -1 !== t3.globals.collapsedSeriesIndices.indexOf(e3) && s2++;
              }), s2 > 0 && s2 == i2.length && e2.push(a2);
            }), t3.globals.ignoreYAxisIndexes = e2.map(function (t4) {
              return t4;
            });
          }
        }]), t2;
      }(),
      U = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "scaleSvgNode",
          value: function (t3, e2) {
            var i2 = parseFloat(t3.getAttributeNS(null, "width")),
              a2 = parseFloat(t3.getAttributeNS(null, "height"));
            t3.setAttributeNS(null, "width", i2 * e2), t3.setAttributeNS(null, "height", a2 * e2), t3.setAttributeNS(null, "viewBox", "0 0 " + i2 + " " + a2);
          }
        }, {
          key: "getSvgString",
          value: function () {
            var t3 = this;
            return new Promise(function (e2) {
              var i2 = t3.w,
                a2 = i2.config.chart.toolbar.export.width,
                s2 = i2.config.chart.toolbar.export.scale || a2 / i2.globals.svgWidth;
              s2 || (s2 = 1);
              var r2 = t3.w.globals.dom.Paper.svg(),
                o2 = t3.w.globals.dom.Paper.node.cloneNode(true);
              1 !== s2 && t3.scaleSvgNode(o2, s2), t3.convertImagesToBase64(o2).then(function () {
                r2 = new XMLSerializer().serializeToString(o2), e2(r2.replace(/&nbsp;/g, "&#160;"));
              });
            });
          }
        }, {
          key: "convertImagesToBase64",
          value: function (t3) {
            var e2 = this,
              i2 = t3.getElementsByTagName("image"),
              a2 = Array.from(i2).map(function (t4) {
                var i3 = t4.getAttributeNS("http://www.w3.org/1999/xlink", "href");
                return i3 && !i3.startsWith("data:") ? e2.getBase64FromUrl(i3).then(function (e3) {
                  t4.setAttributeNS("http://www.w3.org/1999/xlink", "href", e3);
                }).catch(function (t5) {
                  console.error("Error converting image to base64:", t5);
                }) : Promise.resolve();
              });
            return Promise.all(a2);
          }
        }, {
          key: "getBase64FromUrl",
          value: function (t3) {
            return new Promise(function (e2, i2) {
              var a2 = new Image();
              a2.crossOrigin = "Anonymous", a2.onload = function () {
                var t4 = document.createElement("canvas");
                t4.width = a2.width, t4.height = a2.height, t4.getContext("2d").drawImage(a2, 0, 0), e2(t4.toDataURL());
              }, a2.onerror = i2, a2.src = t3;
            });
          }
        }, {
          key: "cleanup",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"),
              i2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"),
              a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
            Array.prototype.forEach.call(a2, function (t4) {
              t4.setAttribute("width", 0);
            }), e2 && e2[0] && (e2[0].setAttribute("x", -500), e2[0].setAttribute("x1", -500), e2[0].setAttribute("x2", -500)), i2 && i2[0] && (i2[0].setAttribute("y", -100), i2[0].setAttribute("y1", -100), i2[0].setAttribute("y2", -100));
          }
        }, {
          key: "svgUrl",
          value: function () {
            var t3 = this;
            return new Promise(function (e2) {
              t3.cleanup(), t3.getSvgString().then(function (t4) {
                var i2 = new Blob([t4], {
                  type: "image/svg+xml;charset=utf-8"
                });
                e2(URL.createObjectURL(i2));
              });
            });
          }
        }, {
          key: "dataURI",
          value: function (t3) {
            var e2 = this;
            return new Promise(function (i2) {
              var a2 = e2.w,
                s2 = t3 ? t3.scale || t3.width / a2.globals.svgWidth : 1;
              e2.cleanup();
              var r2 = document.createElement("canvas");
              r2.width = a2.globals.svgWidth * s2, r2.height = parseInt(a2.globals.dom.elWrap.style.height, 10) * s2;
              var o2 = "transparent" !== a2.config.chart.background && a2.config.chart.background ? a2.config.chart.background : "#fff",
                n2 = r2.getContext("2d");
              n2.fillStyle = o2, n2.fillRect(0, 0, r2.width * s2, r2.height * s2), e2.getSvgString().then(function (t4) {
                var e3 = "data:image/svg+xml," + encodeURIComponent(t4),
                  a3 = new Image();
                a3.crossOrigin = "anonymous", a3.onload = function () {
                  if (n2.drawImage(a3, 0, 0), r2.msToBlob) {
                    var t5 = r2.msToBlob();
                    i2({
                      blob: t5
                    });
                  } else {
                    var e4 = r2.toDataURL("image/png");
                    i2({
                      imgURI: e4
                    });
                  }
                }, a3.src = e3;
              });
            });
          }
        }, {
          key: "exportToSVG",
          value: function () {
            var t3 = this;
            this.svgUrl().then(function (e2) {
              t3.triggerDownload(e2, t3.w.config.chart.toolbar.export.svg.filename, ".svg");
            });
          }
        }, {
          key: "exportToPng",
          value: function () {
            var t3 = this,
              e2 = this.w.config.chart.toolbar.export.scale,
              i2 = this.w.config.chart.toolbar.export.width,
              a2 = e2 ? {
                scale: e2
              } : i2 ? {
                width: i2
              } : void 0;
            this.dataURI(a2).then(function (e3) {
              var i3 = e3.imgURI,
                a3 = e3.blob;
              a3 ? navigator.msSaveOrOpenBlob(a3, t3.w.globals.chartID + ".png") : t3.triggerDownload(i3, t3.w.config.chart.toolbar.export.png.filename, ".png");
            });
          }
        }, {
          key: "exportToCSV",
          value: function (t3) {
            var e2 = this,
              i2 = t3.series,
              a2 = t3.fileName,
              s2 = t3.columnDelimiter,
              r2 = void 0 === s2 ? "," : s2,
              o2 = t3.lineDelimiter,
              n2 = void 0 === o2 ? "\n" : o2,
              l2 = this.w;
            i2 || (i2 = l2.config.series);
            var h2,
              c2,
              d2 = [],
              g2 = [],
              u2 = "",
              f2 = l2.globals.series.map(function (t4, e3) {
                return -1 === l2.globals.collapsedSeriesIndices.indexOf(e3) ? t4 : [];
              }),
              x2 = function (t4) {
                return "function" == typeof l2.config.chart.toolbar.export.csv.categoryFormatter ? l2.config.chart.toolbar.export.csv.categoryFormatter(t4) : "datetime" === l2.config.xaxis.type && String(t4).length >= 10 ? new Date(t4).toDateString() : m.isNumber(t4) ? t4 : t4.split(r2).join("");
              },
              b2 = function (t4) {
                return "function" == typeof l2.config.chart.toolbar.export.csv.valueFormatter ? l2.config.chart.toolbar.export.csv.valueFormatter(t4) : t4;
              },
              v2 = Math.max.apply(Math, p(i2.map(function (t4) {
                return t4.data ? t4.data.length : 0;
              }))),
              y2 = new _(this.ctx),
              w2 = new M(this.ctx),
              k2 = function (t4) {
                var i3 = "";
                if (l2.globals.axisCharts) {
                  if ("category" === l2.config.xaxis.type || l2.config.xaxis.convertedCatToNumeric) if (l2.globals.isBarHorizontal) {
                    var a3 = l2.globals.yLabelFormatters[0],
                      s3 = new V(e2.ctx).getActiveConfigSeriesIndex();
                    i3 = a3(l2.globals.labels[t4], {
                      seriesIndex: s3,
                      dataPointIndex: t4,
                      w: l2
                    });
                  } else i3 = w2.getLabel(l2.globals.labels, l2.globals.timescaleLabels, 0, t4).text;
                  "datetime" === l2.config.xaxis.type && (l2.config.xaxis.categories.length ? i3 = l2.config.xaxis.categories[t4] : l2.config.labels.length && (i3 = l2.config.labels[t4]));
                } else i3 = l2.config.labels[t4];
                return null === i3 ? "nullvalue" : (Array.isArray(i3) && (i3 = i3.join(" ")), m.isNumber(i3) ? i3 : i3.split(r2).join(""));
              },
              A2 = function (t4, e3) {
                if (d2.length && 0 === e3 && g2.push(d2.join(r2)), t4.data) {
                  t4.data = t4.data.length && t4.data || p(Array(v2)).map(function () {
                    return "";
                  });
                  for (var a3 = 0; a3 < t4.data.length; a3++) {
                    d2 = [];
                    var s3 = k2(a3);
                    if ("nullvalue" !== s3) {
                      if (s3 || (y2.isFormatXY() ? s3 = i2[e3].data[a3].x : y2.isFormat2DArray() && (s3 = i2[e3].data[a3] ? i2[e3].data[a3][0] : "")), 0 === e3) {
                        d2.push(x2(s3));
                        for (var o3 = 0; o3 < l2.globals.series.length; o3++) {
                          var n3,
                            h3 = y2.isFormatXY() ? null === (n3 = i2[o3].data[a3]) || void 0 === n3 ? void 0 : n3.y : f2[o3][a3];
                          d2.push(b2(h3));
                        }
                      }
                      ("candlestick" === l2.config.chart.type || t4.type && "candlestick" === t4.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e3][a3]), d2.push(l2.globals.seriesCandleH[e3][a3]), d2.push(l2.globals.seriesCandleL[e3][a3]), d2.push(l2.globals.seriesCandleC[e3][a3])), ("boxPlot" === l2.config.chart.type || t4.type && "boxPlot" === t4.type) && (d2.pop(), d2.push(l2.globals.seriesCandleO[e3][a3]), d2.push(l2.globals.seriesCandleH[e3][a3]), d2.push(l2.globals.seriesCandleM[e3][a3]), d2.push(l2.globals.seriesCandleL[e3][a3]), d2.push(l2.globals.seriesCandleC[e3][a3])), "rangeBar" === l2.config.chart.type && (d2.pop(), d2.push(l2.globals.seriesRangeStart[e3][a3]), d2.push(l2.globals.seriesRangeEnd[e3][a3])), d2.length && g2.push(d2.join(r2));
                    }
                  }
                }
              };
            d2.push(l2.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l2.config.chart.type ? (d2.push("minimum"), d2.push("q1"), d2.push("median"), d2.push("q3"), d2.push("maximum")) : "candlestick" === l2.config.chart.type ? (d2.push("open"), d2.push("high"), d2.push("low"), d2.push("close")) : "rangeBar" === l2.config.chart.type ? (d2.push("minimum"), d2.push("maximum")) : i2.map(function (t4, e3) {
              var i3 = (t4.name ? t4.name : "series-".concat(e3)) + "";
              l2.globals.axisCharts && d2.push(i3.split(r2).join("") ? i3.split(r2).join("") : "series-".concat(e3));
            }), l2.globals.axisCharts || (d2.push(l2.config.chart.toolbar.export.csv.headerValue), g2.push(d2.join(r2))), l2.globals.allSeriesHasEqualX || !l2.globals.axisCharts || l2.config.xaxis.categories.length || l2.config.labels.length ? i2.map(function (t4, e3) {
              l2.globals.axisCharts ? A2(t4, e3) : ((d2 = []).push(x2(l2.globals.labels[e3])), d2.push(b2(f2[e3])), g2.push(d2.join(r2)));
            }) : (h2 = /* @__PURE__ */new Set(), c2 = {}, i2.forEach(function (t4, e3) {
              null == t4 || t4.data.forEach(function (t5) {
                var a3, s3;
                if (y2.isFormatXY()) a3 = t5.x, s3 = t5.y;else {
                  if (!y2.isFormat2DArray()) return;
                  a3 = t5[0], s3 = t5[1];
                }
                c2[a3] || (c2[a3] = Array(i2.length).fill("")), c2[a3][e3] = b2(s3), h2.add(a3);
              });
            }), d2.length && g2.push(d2.join(r2)), Array.from(h2).sort().forEach(function (t4) {
              g2.push([x2(t4), c2[t4].join(r2)]);
            })), u2 += g2.join(n2), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + u2), a2 || l2.config.chart.toolbar.export.csv.filename, ".csv");
          }
        }, {
          key: "triggerDownload",
          value: function (t3, e2, i2) {
            var a2 = document.createElement("a");
            a2.href = t3, a2.download = (e2 || this.w.globals.chartID) + i2, document.body.appendChild(a2), a2.click(), document.body.removeChild(a2);
          }
        }]), t2;
      }(),
      q = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.elgrid = a2, this.w = e2.w;
          var s2 = this.w;
          this.axesUtils = new M(e2), this.xaxisLabels = s2.globals.labels.slice(), s2.globals.timescaleLabels.length > 0 && !s2.globals.isBarHorizontal && (this.xaxisLabels = s2.globals.timescaleLabels.slice()), s2.config.xaxis.overwriteCategories && (this.xaxisLabels = s2.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s2.config.xaxis.position ? this.offY = 0 : this.offY = s2.globals.gridHeight, this.offY = this.offY + s2.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s2.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s2.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s2.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s2.config.xaxis.axisBorder.height, this.yaxis = s2.config.yaxis[0];
        }
        return s(t2, [{
          key: "drawXaxis",
          value: function () {
            var t3 = this.w,
              e2 = new k(this.ctx),
              i2 = e2.group({
                class: "apexcharts-xaxis",
                transform: "translate(".concat(t3.config.xaxis.offsetX, ", ").concat(t3.config.xaxis.offsetY, ")")
              }),
              a2 = e2.group({
                class: "apexcharts-xaxis-texts-g",
                transform: "translate(".concat(t3.globals.translateXAxisX, ", ").concat(t3.globals.translateXAxisY, ")")
              });
            i2.add(a2);
            for (var s2 = [], r2 = 0; r2 < this.xaxisLabels.length; r2++) s2.push(this.xaxisLabels[r2]);
            if (this.drawXAxisLabelAndGroup(true, e2, a2, s2, t3.globals.isXNumeric, function (t4, e3) {
              return e3;
            }), t3.globals.hasXaxisGroups) {
              var o2 = t3.globals.groups;
              s2 = [];
              for (var n2 = 0; n2 < o2.length; n2++) s2.push(o2[n2].title);
              var l2 = {};
              t3.config.xaxis.group.style && (l2.xaxisFontSize = t3.config.xaxis.group.style.fontSize, l2.xaxisFontFamily = t3.config.xaxis.group.style.fontFamily, l2.xaxisForeColors = t3.config.xaxis.group.style.colors, l2.fontWeight = t3.config.xaxis.group.style.fontWeight, l2.cssClass = t3.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e2, a2, s2, false, function (t4, e3) {
                return o2[t4].cols * e3;
              }, l2);
            }
            if (void 0 !== t3.config.xaxis.title.text) {
              var h2 = e2.group({
                  class: "apexcharts-xaxis-title"
                }),
                c2 = e2.drawText({
                  x: t3.globals.gridWidth / 2 + t3.config.xaxis.title.offsetX,
                  y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t3.config.xaxis.position ? t3.globals.xAxisLabelsHeight : -t3.globals.xAxisLabelsHeight - 10) + t3.config.xaxis.title.offsetY,
                  text: t3.config.xaxis.title.text,
                  textAnchor: "middle",
                  fontSize: t3.config.xaxis.title.style.fontSize,
                  fontFamily: t3.config.xaxis.title.style.fontFamily,
                  fontWeight: t3.config.xaxis.title.style.fontWeight,
                  foreColor: t3.config.xaxis.title.style.color,
                  cssClass: "apexcharts-xaxis-title-text " + t3.config.xaxis.title.style.cssClass
                });
              h2.add(c2), i2.add(h2);
            }
            if (t3.config.xaxis.axisBorder.show) {
              var d2 = t3.globals.barPadForNumericAxis,
                g2 = e2.drawLine(t3.globals.padHorizontal + t3.config.xaxis.axisBorder.offsetX - d2, this.offY, this.xaxisBorderWidth + d2, this.offY, t3.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
              this.elgrid && this.elgrid.elGridBorders && t3.config.grid.show ? this.elgrid.elGridBorders.add(g2) : i2.add(g2);
            }
            return i2;
          }
        }, {
          key: "drawXAxisLabelAndGroup",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2,
              n2 = this,
              l2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {},
              h2 = [],
              c2 = [],
              d2 = this.w,
              g2 = l2.xaxisFontSize || this.xaxisFontSize,
              u2 = l2.xaxisFontFamily || this.xaxisFontFamily,
              f2 = l2.xaxisForeColors || this.xaxisForeColors,
              p2 = l2.fontWeight || d2.config.xaxis.labels.style.fontWeight,
              x2 = l2.cssClass || d2.config.xaxis.labels.style.cssClass,
              b2 = d2.globals.padHorizontal,
              v2 = a2.length,
              m2 = "category" === d2.config.xaxis.type ? d2.globals.dataPoints : v2;
            if (0 === m2 && v2 > m2 && (m2 = v2), s2) {
              var y2 = m2 > 1 ? m2 - 1 : m2;
              o2 = d2.globals.gridWidth / Math.min(y2, v2 - 1), b2 = b2 + r2(0, o2) / 2 + d2.config.xaxis.labels.offsetX;
            } else o2 = d2.globals.gridWidth / m2, b2 = b2 + r2(0, o2) + d2.config.xaxis.labels.offsetX;
            for (var w2 = function (s3) {
                var l3 = b2 - r2(s3, o2) / 2 + d2.config.xaxis.labels.offsetX;
                0 === s3 && 1 === v2 && o2 / 2 === b2 && 1 === m2 && (l3 = d2.globals.gridWidth / 2);
                var y3 = n2.axesUtils.getLabel(a2, d2.globals.timescaleLabels, l3, s3, h2, g2, t3),
                  w3 = 28;
                d2.globals.rotateXLabels && t3 && (w3 = 22), d2.config.xaxis.title.text && "top" === d2.config.xaxis.position && (w3 += parseFloat(d2.config.xaxis.title.style.fontSize) + 2), t3 || (w3 = w3 + parseFloat(g2) + (d2.globals.xAxisLabelsHeight - d2.globals.xAxisGroupLabelsHeight) + (d2.globals.rotateXLabels ? 10 : 0)), y3 = void 0 !== d2.config.xaxis.tickAmount && "dataPoints" !== d2.config.xaxis.tickAmount && "datetime" !== d2.config.xaxis.type ? n2.axesUtils.checkLabelBasedOnTickamount(s3, y3, v2) : n2.axesUtils.checkForOverflowingLabels(s3, y3, v2, h2, c2);
                if (d2.config.xaxis.labels.show) {
                  var k3 = e2.drawText({
                    x: y3.x,
                    y: n2.offY + d2.config.xaxis.labels.offsetY + w3 - ("top" === d2.config.xaxis.position ? d2.globals.xAxisHeight + d2.config.xaxis.axisTicks.height - 2 : 0),
                    text: y3.text,
                    textAnchor: "middle",
                    fontWeight: y3.isBold ? 600 : p2,
                    fontSize: g2,
                    fontFamily: u2,
                    foreColor: Array.isArray(f2) ? t3 && d2.config.xaxis.convertedCatToNumeric ? f2[d2.globals.minX + s3 - 1] : f2[s3] : f2,
                    isPlainText: false,
                    cssClass: (t3 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x2
                  });
                  if (i2.add(k3), k3.on("click", function (t4) {
                    if ("function" == typeof d2.config.chart.events.xAxisLabelClick) {
                      var e3 = Object.assign({}, d2, {
                        labelIndex: s3
                      });
                      d2.config.chart.events.xAxisLabelClick(t4, n2.ctx, e3);
                    }
                  }), t3) {
                    var A2 = document.createElementNS(d2.globals.SVGNS, "title");
                    A2.textContent = Array.isArray(y3.text) ? y3.text.join(" ") : y3.text, k3.node.appendChild(A2), "" !== y3.text && (h2.push(y3.text), c2.push(y3));
                  }
                }
                s3 < v2 - 1 && (b2 += r2(s3 + 1, o2));
              }, k2 = 0; k2 <= v2 - 1; k2++) w2(k2);
          }
        }, {
          key: "drawXaxisInversed",
          value: function (t3) {
            var e2,
              i2,
              a2 = this,
              s2 = this.w,
              r2 = new k(this.ctx),
              o2 = s2.config.yaxis[0].opposite ? s2.globals.translateYAxisX[t3] : 0,
              n2 = r2.group({
                class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                rel: t3
              }),
              l2 = r2.group({
                class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                transform: "translate(" + o2 + ", 0)"
              });
            n2.add(l2);
            var h2 = [];
            if (s2.config.yaxis[t3].show) for (var c2 = 0; c2 < this.xaxisLabels.length; c2++) h2.push(this.xaxisLabels[c2]);
            e2 = s2.globals.gridHeight / h2.length, i2 = -e2 / 2.2;
            var d2 = s2.globals.yLabelFormatters[0],
              g2 = s2.config.yaxis[0].labels;
            if (g2.show) for (var u2 = function (o3) {
                var n3 = void 0 === h2[o3] ? "" : h2[o3];
                n3 = d2(n3, {
                  seriesIndex: t3,
                  dataPointIndex: o3,
                  w: s2
                });
                var c3 = a2.axesUtils.getYAxisForeColor(g2.style.colors, t3),
                  u3 = 0;
                Array.isArray(n3) && (u3 = n3.length / 2 * parseInt(g2.style.fontSize, 10));
                var f3 = g2.offsetX - 15,
                  p3 = "end";
                a2.yaxis.opposite && (p3 = "start"), "left" === s2.config.yaxis[0].labels.align ? (f3 = g2.offsetX, p3 = "start") : "center" === s2.config.yaxis[0].labels.align ? (f3 = g2.offsetX, p3 = "middle") : "right" === s2.config.yaxis[0].labels.align && (p3 = "end");
                var x3 = r2.drawText({
                  x: f3,
                  y: i2 + e2 + g2.offsetY - u3,
                  text: n3,
                  textAnchor: p3,
                  foreColor: Array.isArray(c3) ? c3[o3] : c3,
                  fontSize: g2.style.fontSize,
                  fontFamily: g2.style.fontFamily,
                  fontWeight: g2.style.fontWeight,
                  isPlainText: false,
                  cssClass: "apexcharts-yaxis-label " + g2.style.cssClass,
                  maxWidth: g2.maxWidth
                });
                l2.add(x3), x3.on("click", function (t4) {
                  if ("function" == typeof s2.config.chart.events.xAxisLabelClick) {
                    var e3 = Object.assign({}, s2, {
                      labelIndex: o3
                    });
                    s2.config.chart.events.xAxisLabelClick(t4, a2.ctx, e3);
                  }
                });
                var b3 = document.createElementNS(s2.globals.SVGNS, "title");
                if (b3.textContent = Array.isArray(n3) ? n3.join(" ") : n3, x3.node.appendChild(b3), 0 !== s2.config.yaxis[t3].labels.rotate) {
                  var v3 = r2.rotateAroundCenter(x3.node);
                  x3.node.setAttribute("transform", "rotate(".concat(s2.config.yaxis[t3].labels.rotate, " 0 ").concat(v3.y, ")"));
                }
                i2 += e2;
              }, f2 = 0; f2 <= h2.length - 1; f2++) u2(f2);
            if (void 0 !== s2.config.yaxis[0].title.text) {
              var p2 = r2.group({
                  class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                  transform: "translate(" + o2 + ", 0)"
                }),
                x2 = r2.drawText({
                  x: s2.config.yaxis[0].title.offsetX,
                  y: s2.globals.gridHeight / 2 + s2.config.yaxis[0].title.offsetY,
                  text: s2.config.yaxis[0].title.text,
                  textAnchor: "middle",
                  foreColor: s2.config.yaxis[0].title.style.color,
                  fontSize: s2.config.yaxis[0].title.style.fontSize,
                  fontWeight: s2.config.yaxis[0].title.style.fontWeight,
                  fontFamily: s2.config.yaxis[0].title.style.fontFamily,
                  cssClass: "apexcharts-yaxis-title-text " + s2.config.yaxis[0].title.style.cssClass
                });
              p2.add(x2), n2.add(p2);
            }
            var b2 = 0;
            this.isCategoryBarHorizontal && s2.config.yaxis[0].opposite && (b2 = s2.globals.gridWidth);
            var v2 = s2.config.xaxis.axisBorder;
            if (v2.show) {
              var m2 = r2.drawLine(s2.globals.padHorizontal + v2.offsetX + b2, 1 + v2.offsetY, s2.globals.padHorizontal + v2.offsetX + b2, s2.globals.gridHeight + v2.offsetY, v2.color, 0);
              this.elgrid && this.elgrid.elGridBorders && s2.config.grid.show ? this.elgrid.elGridBorders.add(m2) : n2.add(m2);
            }
            return s2.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b2, h2.length, s2.config.yaxis[0].axisBorder, s2.config.yaxis[0].axisTicks, 0, e2, n2), n2;
          }
        }, {
          key: "drawXaxisTicks",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = t3;
            if (!(t3 < 0 || t3 - 2 > a2.globals.gridWidth)) {
              var r2 = this.offY + a2.config.xaxis.axisTicks.offsetY;
              if (e2 = e2 + r2 + a2.config.xaxis.axisTicks.height, "top" === a2.config.xaxis.position && (e2 = r2 - a2.config.xaxis.axisTicks.height), a2.config.xaxis.axisTicks.show) {
                var o2 = new k(this.ctx).drawLine(t3 + a2.config.xaxis.axisTicks.offsetX, r2 + a2.config.xaxis.offsetY, s2 + a2.config.xaxis.axisTicks.offsetX, e2 + a2.config.xaxis.offsetY, a2.config.xaxis.axisTicks.color);
                i2.add(o2), o2.node.classList.add("apexcharts-xaxis-tick");
              }
            }
          }
        }, {
          key: "getXAxisTicksPositions",
          value: function () {
            var t3 = this.w,
              e2 = [],
              i2 = this.xaxisLabels.length,
              a2 = t3.globals.padHorizontal;
            if (t3.globals.timescaleLabels.length > 0) for (var s2 = 0; s2 < i2; s2++) a2 = this.xaxisLabels[s2].position, e2.push(a2);else for (var r2 = i2, o2 = 0; o2 < r2; o2++) {
              var n2 = r2;
              t3.globals.isXNumeric && "bar" !== t3.config.chart.type && (n2 -= 1), a2 += t3.globals.gridWidth / n2, e2.push(a2);
            }
            return e2;
          }
        }, {
          key: "xAxisLabelCorrections",
          value: function () {
            var t3 = this.w,
              e2 = new k(this.ctx),
              i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),
              a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"),
              s2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),
              r2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
            if (t3.globals.rotateXLabels || t3.config.xaxis.labels.rotateAlways) for (var o2 = 0; o2 < a2.length; o2++) {
              var n2 = e2.rotateAroundCenter(a2[o2]);
              n2.y = n2.y - 1, n2.x = n2.x + 1, a2[o2].setAttribute("transform", "rotate(".concat(t3.config.xaxis.labels.rotate, " ").concat(n2.x, " ").concat(n2.y, ")")), a2[o2].setAttribute("text-anchor", "end");
              i2.setAttribute("transform", "translate(0, ".concat(-10, ")"));
              var l2 = a2[o2].childNodes;
              t3.config.xaxis.labels.trim && Array.prototype.forEach.call(l2, function (i3) {
                e2.placeTextWithEllipsis(i3, i3.textContent, t3.globals.xAxisLabelsHeight - ("bottom" === t3.config.legend.position ? 20 : 10));
              });
            } else !function () {
              for (var i3 = t3.globals.gridWidth / (t3.globals.labels.length + 1), s3 = 0; s3 < a2.length; s3++) {
                var r3 = a2[s3].childNodes;
                t3.config.xaxis.labels.trim && "datetime" !== t3.config.xaxis.type && Array.prototype.forEach.call(r3, function (t4) {
                  e2.placeTextWithEllipsis(t4, t4.textContent, i3);
                });
              }
            }();
            if (s2.length > 0) {
              var h2 = s2[s2.length - 1].getBBox(),
                c2 = s2[0].getBBox();
              h2.x < -20 && s2[s2.length - 1].parentNode.removeChild(s2[s2.length - 1]), c2.x + c2.width > t3.globals.gridWidth && !t3.globals.isBarHorizontal && s2[0].parentNode.removeChild(s2[0]);
              for (var d2 = 0; d2 < r2.length; d2++) e2.placeTextWithEllipsis(r2[d2], r2[d2].textContent, t3.config.yaxis[0].labels.maxWidth - (t3.config.yaxis[0].title.text ? 2 * parseFloat(t3.config.yaxis[0].title.style.fontSize) : 0) - 15);
            }
          }
        }]), t2;
      }(),
      Z = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
          var a2 = this.w;
          this.xaxisLabels = a2.globals.labels.slice(), this.axesUtils = new M(e2), this.isRangeBar = a2.globals.seriesRange.length && a2.globals.isBarHorizontal, a2.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a2.globals.timescaleLabels.slice());
        }
        return s(t2, [{
          key: "drawGridArea",
          value: function () {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
              e2 = this.w,
              i2 = new k(this.ctx);
            t3 || (t3 = i2.group({
              class: "apexcharts-grid"
            }));
            var a2 = i2.drawLine(e2.globals.padHorizontal, 1, e2.globals.padHorizontal, e2.globals.gridHeight, "transparent"),
              s2 = i2.drawLine(e2.globals.padHorizontal, e2.globals.gridHeight, e2.globals.gridWidth, e2.globals.gridHeight, "transparent");
            return t3.add(s2), t3.add(a2), t3;
          }
        }, {
          key: "drawGrid",
          value: function () {
            if (this.w.globals.axisCharts) {
              var t3 = this.renderGrid();
              return this.drawGridArea(t3.el), t3;
            }
            return null;
          }
        }, {
          key: "createGridMask",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = new k(this.ctx),
              a2 = Array.isArray(t3.config.stroke.width) ? Math.max.apply(Math, p(t3.config.stroke.width)) : t3.config.stroke.width,
              s2 = function (t4) {
                var i3 = document.createElementNS(e2.SVGNS, "clipPath");
                return i3.setAttribute("id", t4), i3;
              };
            e2.dom.elGridRectMask = s2("gridRectMask".concat(e2.cuid)), e2.dom.elGridRectBarMask = s2("gridRectBarMask".concat(e2.cuid)), e2.dom.elGridRectMarkerMask = s2("gridRectMarkerMask".concat(e2.cuid)), e2.dom.elForecastMask = s2("forecastMask".concat(e2.cuid)), e2.dom.elNonForecastMask = s2("nonForecastMask".concat(e2.cuid));
            var r2 = 0,
              o2 = 0;
            (["bar", "rangeBar", "candlestick", "boxPlot"].includes(t3.config.chart.type) || t3.globals.comboBarCount > 0) && t3.globals.isXNumeric && !t3.globals.isBarHorizontal && (r2 = Math.max(t3.config.grid.padding.left, e2.barPadForNumericAxis), o2 = Math.max(t3.config.grid.padding.right, e2.barPadForNumericAxis)), e2.dom.elGridRect = i2.drawRect(0, 0, e2.gridWidth, e2.gridHeight, 0, "#fff"), e2.dom.elGridRectBar = i2.drawRect(-a2 / 2 - r2 - 2, -a2 / 2 - 2, e2.gridWidth + a2 + o2 + r2 + 4, e2.gridHeight + a2 + 4, 0, "#fff");
            var n2 = t3.globals.markers.largestSize;
            e2.dom.elGridRectMarker = i2.drawRect(-n2, -n2, e2.gridWidth + 2 * n2, e2.gridHeight + 2 * n2, 0, "#fff"), e2.dom.elGridRectMask.appendChild(e2.dom.elGridRect.node), e2.dom.elGridRectBarMask.appendChild(e2.dom.elGridRectBar.node), e2.dom.elGridRectMarkerMask.appendChild(e2.dom.elGridRectMarker.node);
            var l2 = e2.dom.baseEl.querySelector("defs");
            l2.appendChild(e2.dom.elGridRectMask), l2.appendChild(e2.dom.elGridRectBarMask), l2.appendChild(e2.dom.elGridRectMarkerMask), l2.appendChild(e2.dom.elForecastMask), l2.appendChild(e2.dom.elNonForecastMask);
          }
        }, {
          key: "_drawGridLines",
          value: function (t3) {
            var e2 = t3.i,
              i2 = t3.x1,
              a2 = t3.y1,
              s2 = t3.x2,
              r2 = t3.y2,
              o2 = t3.xCount,
              n2 = t3.parent,
              l2 = this.w;
            if (!(0 === e2 && l2.globals.skipFirstTimelinelabel || e2 === o2 - 1 && l2.globals.skipLastTimelinelabel && !l2.config.xaxis.labels.formatter || "radar" === l2.config.chart.type)) {
              l2.config.grid.xaxis.lines.show && this._drawGridLine({
                i: e2,
                x1: i2,
                y1: a2,
                x2: s2,
                y2: r2,
                xCount: o2,
                parent: n2
              });
              var h2 = 0;
              if (l2.globals.hasXaxisGroups && "between" === l2.config.xaxis.tickPlacement) {
                var c2 = l2.globals.groups;
                if (c2) {
                  for (var d2 = 0, g2 = 0; d2 < e2 && g2 < c2.length; g2++) d2 += c2[g2].cols;
                  d2 === e2 && (h2 = 0.6 * l2.globals.xAxisLabelsHeight);
                }
              }
              new q(this.ctx).drawXaxisTicks(i2, h2, l2.globals.dom.elGraphical);
            }
          }
        }, {
          key: "_drawGridLine",
          value: function (t3) {
            var e2 = t3.i,
              i2 = t3.x1,
              a2 = t3.y1,
              s2 = t3.x2,
              r2 = t3.y2,
              o2 = t3.xCount,
              n2 = t3.parent,
              l2 = this.w,
              h2 = n2.node.classList.contains("apexcharts-gridlines-horizontal"),
              c2 = l2.globals.barPadForNumericAxis,
              d2 = 0 === a2 && 0 === r2 || 0 === i2 && 0 === s2 || a2 === l2.globals.gridHeight && r2 === l2.globals.gridHeight || l2.globals.isBarHorizontal && (0 === e2 || e2 === o2 - 1),
              g2 = new k(this).drawLine(i2 - (h2 ? c2 : 0), a2, s2 + (h2 ? c2 : 0), r2, l2.config.grid.borderColor, l2.config.grid.strokeDashArray);
            g2.node.classList.add("apexcharts-gridline"), d2 && l2.config.grid.show ? this.elGridBorders.add(g2) : n2.add(g2);
          }
        }, {
          key: "_drawGridBandRect",
          value: function (t3) {
            var e2 = t3.c,
              i2 = t3.x1,
              a2 = t3.y1,
              s2 = t3.x2,
              r2 = t3.y2,
              o2 = t3.type,
              n2 = this.w,
              l2 = new k(this.ctx),
              h2 = n2.globals.barPadForNumericAxis,
              c2 = n2.config.grid[o2].colors[e2],
              d2 = l2.drawRect(i2 - ("row" === o2 ? h2 : 0), a2, s2 + ("row" === o2 ? 2 * h2 : 0), r2, 0, c2, n2.config.grid[o2].opacity);
            this.elg.add(d2), d2.attr("clip-path", "url(#gridRectMask".concat(n2.globals.cuid, ")")), d2.node.classList.add("apexcharts-grid-".concat(o2));
          }
        }, {
          key: "_drawXYLines",
          value: function (t3) {
            var e2 = this,
              i2 = t3.xCount,
              a2 = t3.tickAmount,
              s2 = this.w;
            if (s2.config.grid.xaxis.lines.show || s2.config.xaxis.axisTicks.show) {
              var r2,
                o2 = s2.globals.padHorizontal,
                n2 = s2.globals.gridHeight;
              s2.globals.timescaleLabels.length ? function (t4) {
                for (var a3 = t4.xC, s3 = t4.x1, r3 = t4.y1, o3 = t4.x2, n3 = t4.y2, l3 = 0; l3 < a3; l3++) s3 = e2.xaxisLabels[l3].position, o3 = e2.xaxisLabels[l3].position, e2._drawGridLines({
                  i: l3,
                  x1: s3,
                  y1: r3,
                  x2: o3,
                  y2: n3,
                  xCount: i2,
                  parent: e2.elgridLinesV
                });
              }({
                xC: i2,
                x1: o2,
                y1: 0,
                x2: r2,
                y2: n2
              }) : (s2.globals.isXNumeric && (i2 = s2.globals.xAxisScale.result.length), function (t4) {
                for (var a3 = t4.xC, r3 = t4.x1, o3 = t4.y1, n3 = t4.x2, l3 = t4.y2, h3 = 0; h3 < a3 + (s2.globals.isXNumeric ? 0 : 1); h3++) 0 === h3 && 1 === a3 && 1 === s2.globals.dataPoints && (n3 = r3 = s2.globals.gridWidth / 2), e2._drawGridLines({
                  i: h3,
                  x1: r3,
                  y1: o3,
                  x2: n3,
                  y2: l3,
                  xCount: i2,
                  parent: e2.elgridLinesV
                }), n3 = r3 += s2.globals.gridWidth / (s2.globals.isXNumeric ? a3 - 1 : a3);
              }({
                xC: i2,
                x1: o2,
                y1: 0,
                x2: r2,
                y2: n2
              }));
            }
            if (s2.config.grid.yaxis.lines.show) {
              var l2 = 0,
                h2 = 0,
                c2 = s2.globals.gridWidth,
                d2 = a2 + 1;
              this.isRangeBar && (d2 = s2.globals.labels.length);
              for (var g2 = 0; g2 < d2 + (this.isRangeBar ? 1 : 0); g2++) this._drawGridLine({
                i: g2,
                xCount: d2 + (this.isRangeBar ? 1 : 0),
                x1: 0,
                y1: l2,
                x2: c2,
                y2: h2,
                parent: this.elgridLinesH
              }), h2 = l2 += s2.globals.gridHeight / (this.isRangeBar ? d2 : a2);
            }
          }
        }, {
          key: "_drawInvertedXYLines",
          value: function (t3) {
            var e2 = t3.xCount,
              i2 = this.w;
            if (i2.config.grid.xaxis.lines.show || i2.config.xaxis.axisTicks.show) for (var a2, s2 = i2.globals.padHorizontal, r2 = i2.globals.gridHeight, o2 = 0; o2 < e2 + 1; o2++) {
              i2.config.grid.xaxis.lines.show && this._drawGridLine({
                i: o2,
                xCount: e2 + 1,
                x1: s2,
                y1: 0,
                x2: a2,
                y2: r2,
                parent: this.elgridLinesV
              }), new q(this.ctx).drawXaxisTicks(s2, 0, i2.globals.dom.elGraphical), a2 = s2 += i2.globals.gridWidth / e2;
            }
            if (i2.config.grid.yaxis.lines.show) for (var n2 = 0, l2 = 0, h2 = i2.globals.gridWidth, c2 = 0; c2 < i2.globals.dataPoints + 1; c2++) this._drawGridLine({
              i: c2,
              xCount: i2.globals.dataPoints + 1,
              x1: 0,
              y1: n2,
              x2: h2,
              y2: l2,
              parent: this.elgridLinesH
            }), l2 = n2 += i2.globals.gridHeight / i2.globals.dataPoints;
          }
        }, {
          key: "renderGrid",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = new k(this.ctx);
            this.elg = i2.group({
              class: "apexcharts-grid"
            }), this.elgridLinesH = i2.group({
              class: "apexcharts-gridlines-horizontal"
            }), this.elgridLinesV = i2.group({
              class: "apexcharts-gridlines-vertical"
            }), this.elGridBorders = i2.group({
              class: "apexcharts-grid-borders"
            }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t3.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
            for (var a2 = 0; a2 < e2.seriesYAxisMap.length && e2.ignoreYAxisIndexes.includes(a2);) a2++;
            a2 === e2.seriesYAxisMap.length && (a2 = 0);
            var s2,
              r2 = e2.yAxisScale[a2].result.length - 1;
            if (!e2.isBarHorizontal || this.isRangeBar) {
              var o2, n2, l2;
              if (s2 = this.xaxisLabels.length, this.isRangeBar) r2 = e2.labels.length, t3.config.xaxis.tickAmount && t3.config.xaxis.labels.formatter && (s2 = t3.config.xaxis.tickAmount), (null === (o2 = e2.yAxisScale) || void 0 === o2 || null === (n2 = o2[a2]) || void 0 === n2 || null === (l2 = n2.result) || void 0 === l2 ? void 0 : l2.length) > 0 && "datetime" !== t3.config.xaxis.type && (s2 = e2.yAxisScale[a2].result.length - 1);
              this._drawXYLines({
                xCount: s2,
                tickAmount: r2
              });
            } else s2 = r2, r2 = e2.xTickAmount, this._drawInvertedXYLines({
              xCount: s2,
              tickAmount: r2
            });
            return this.drawGridBands(s2, r2), {
              el: this.elg,
              elGridBorders: this.elGridBorders,
              xAxisTickWidth: e2.gridWidth / s2
            };
          }
        }, {
          key: "drawGridBands",
          value: function (t3, e2) {
            var i2,
              a2,
              s2 = this,
              r2 = this.w;
            if ((null === (i2 = r2.config.grid.row.colors) || void 0 === i2 ? void 0 : i2.length) > 0 && function (t4, i3, a3, o3, n3, l3) {
              for (var h3 = 0, c3 = 0; h3 < i3; h3++, c3++) c3 >= r2.config.grid[t4].colors.length && (c3 = 0), s2._drawGridBandRect({
                c: c3,
                x1: a3,
                y1: o3,
                x2: n3,
                y2: l3,
                type: t4
              }), o3 += r2.globals.gridHeight / e2;
            }("row", e2, 0, 0, r2.globals.gridWidth, r2.globals.gridHeight / e2), (null === (a2 = r2.config.grid.column.colors) || void 0 === a2 ? void 0 : a2.length) > 0) {
              var o2 = r2.globals.isBarHorizontal || "on" !== r2.config.xaxis.tickPlacement || "category" !== r2.config.xaxis.type && !r2.config.xaxis.convertedCatToNumeric ? t3 : t3 - 1;
              r2.globals.isXNumeric && (o2 = r2.globals.xAxisScale.result.length - 1);
              for (var n2 = r2.globals.padHorizontal, l2 = r2.globals.padHorizontal + r2.globals.gridWidth / o2, h2 = r2.globals.gridHeight, c2 = 0, d2 = 0; c2 < t3; c2++, d2++) {
                var g2;
                if (d2 >= r2.config.grid.column.colors.length && (d2 = 0), "datetime" === r2.config.xaxis.type) n2 = this.xaxisLabels[c2].position, l2 = ((null === (g2 = this.xaxisLabels[c2 + 1]) || void 0 === g2 ? void 0 : g2.position) || r2.globals.gridWidth) - this.xaxisLabels[c2].position;
                this._drawGridBandRect({
                  c: d2,
                  x1: n2,
                  y1: 0,
                  x2: l2,
                  y2: h2,
                  type: "column"
                }), n2 += r2.globals.gridWidth / o2;
              }
            }
          }
        }]), t2;
      }(),
      $ = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.coreUtils = new A(this.ctx);
        }
        return s(t2, [{
          key: "niceScale",
          value: function (t3, e2) {
            var i2,
              a2,
              s2,
              r2,
              o2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
              n2 = 1e-11,
              l2 = this.w,
              h2 = l2.globals;
            h2.isBarHorizontal ? (i2 = l2.config.xaxis, a2 = Math.max((h2.svgWidth - 100) / 25, 2)) : (i2 = l2.config.yaxis[o2], a2 = Math.max((h2.svgHeight - 100) / 15, 2)), m.isNumber(a2) || (a2 = 10), s2 = void 0 !== i2.min && null !== i2.min, r2 = void 0 !== i2.max && null !== i2.min;
            var c2 = void 0 !== i2.stepSize && null !== i2.stepSize,
              d2 = void 0 !== i2.tickAmount && null !== i2.tickAmount,
              g2 = d2 ? i2.tickAmount : h2.niceScaleDefaultTicks[Math.min(Math.round(a2 / 2), h2.niceScaleDefaultTicks.length - 1)];
            if (h2.isMultipleYAxis && !d2 && h2.multiAxisTickAmount > 0 && (g2 = h2.multiAxisTickAmount, d2 = true), g2 = "dataPoints" === g2 ? h2.dataPoints - 1 : Math.abs(Math.round(g2)), (t3 === Number.MIN_VALUE && 0 === e2 || !m.isNumber(t3) && !m.isNumber(e2) || t3 === Number.MIN_VALUE && e2 === -Number.MAX_VALUE) && (t3 = m.isNumber(i2.min) ? i2.min : 0, e2 = m.isNumber(i2.max) ? i2.max : t3 + g2, h2.allSeriesCollapsed = false), t3 > e2) {
              console.warn("axis.min cannot be greater than axis.max: swapping min and max");
              var u2 = e2;
              e2 = t3, t3 = u2;
            } else t3 === e2 && (t3 = 0 === t3 ? 0 : t3 - 1, e2 = 0 === e2 ? 2 : e2 + 1);
            var f2 = [];
            g2 < 1 && (g2 = 1);
            var p2 = g2,
              x2 = Math.abs(e2 - t3);
            !s2 && t3 > 0 && t3 / x2 < 0.15 && (t3 = 0, s2 = true), !r2 && e2 < 0 && -e2 / x2 < 0.15 && (e2 = 0, r2 = true);
            var b2 = (x2 = Math.abs(e2 - t3)) / p2,
              v2 = b2,
              y2 = Math.floor(Math.log10(v2)),
              w2 = Math.pow(10, y2),
              k2 = Math.ceil(v2 / w2);
            if (b2 = v2 = (k2 = h2.niceScaleAllowedMagMsd[0 === h2.yValueDecimal ? 0 : 1][k2]) * w2, h2.isBarHorizontal && i2.stepSize && "datetime" !== i2.type ? (b2 = i2.stepSize, c2 = true) : c2 && (b2 = i2.stepSize), c2 && i2.forceNiceScale) {
              var A2 = Math.floor(Math.log10(b2));
              b2 *= Math.pow(10, y2 - A2);
            }
            if (s2 && r2) {
              var S2 = x2 / p2;
              if (d2) {
                if (c2) {
                  if (0 != m.mod(x2, b2)) {
                    var C2 = m.getGCD(b2, S2);
                    b2 = S2 / C2 < 10 ? C2 : S2;
                  } else 0 == m.mod(b2, S2) ? b2 = S2 : (S2 = b2, d2 = false);
                } else b2 = S2;
              } else if (c2) 0 == m.mod(x2, b2) ? S2 = b2 : b2 = S2;else if (0 == m.mod(x2, b2)) S2 = b2;else {
                S2 = x2 / (p2 = Math.ceil(x2 / b2));
                var L2 = m.getGCD(x2, b2);
                x2 / L2 < a2 && (S2 = L2), b2 = S2;
              }
              p2 = Math.round(x2 / b2);
            } else {
              if (s2 || r2) {
                if (r2) {
                  if (d2) t3 = e2 - b2 * p2;else {
                    var P2 = t3;
                    t3 = b2 * Math.floor(t3 / b2), Math.abs(e2 - t3) / m.getGCD(x2, b2) > a2 && (t3 = e2 - b2 * g2, t3 += b2 * Math.floor((P2 - t3) / b2));
                  }
                } else if (s2) if (d2) e2 = t3 + b2 * p2;else {
                  var M2 = e2;
                  e2 = b2 * Math.ceil(e2 / b2), Math.abs(e2 - t3) / m.getGCD(x2, b2) > a2 && (e2 = t3 + b2 * g2, e2 += b2 * Math.ceil((M2 - e2) / b2));
                }
              } else if (h2.isMultipleYAxis && d2) {
                var I2 = b2 * Math.floor(t3 / b2),
                  T2 = I2 + b2 * p2;
                T2 < e2 && (b2 *= 2), T2 = e2, e2 = (t3 = I2) + b2 * p2, x2 = Math.abs(e2 - t3), t3 > 0 && t3 < Math.abs(T2 - e2) && (t3 = 0, e2 = b2 * p2), e2 < 0 && -e2 < Math.abs(I2 - t3) && (e2 = 0, t3 = -b2 * p2);
              } else t3 = b2 * Math.floor(t3 / b2), e2 = b2 * Math.ceil(e2 / b2);
              x2 = Math.abs(e2 - t3), b2 = m.getGCD(x2, b2), p2 = Math.round(x2 / b2);
            }
            if (d2 || s2 || r2 || (p2 = Math.ceil((x2 - n2) / (b2 + n2))) > 16 && m.getPrimeFactors(p2).length < 2 && p2++, !d2 && i2.forceNiceScale && 0 === h2.yValueDecimal && p2 > x2 && (p2 = x2, b2 = Math.round(x2 / p2)), p2 > a2 && (!d2 && !c2 || i2.forceNiceScale)) {
              var z2 = m.getPrimeFactors(p2),
                X2 = z2.length - 1,
                E2 = p2;
              t: for (var Y2 = 0; Y2 < X2; Y2++) for (var R2 = 0; R2 <= X2 - Y2; R2++) {
                for (var F2 = Math.min(R2 + Y2, X2), D2 = E2, H2 = 1, O2 = R2; O2 <= F2; O2++) H2 *= z2[O2];
                if ((D2 /= H2) < a2) {
                  E2 = D2;
                  break t;
                }
              }
              b2 = E2 === p2 ? x2 : x2 / E2, p2 = Math.round(x2 / b2);
            }
            h2.isMultipleYAxis && 0 == h2.multiAxisTickAmount && h2.ignoreYAxisIndexes.indexOf(o2) < 0 && (h2.multiAxisTickAmount = p2);
            var N2 = t3 - b2,
              W2 = b2 * n2;
            do {
              N2 += b2, f2.push(m.stripNumber(N2, 7));
            } while (e2 - N2 > W2);
            return {
              result: f2,
              niceMin: f2[0],
              niceMax: f2[f2.length - 1]
            };
          }
        }, {
          key: "linearScale",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
              a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
              s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0,
              r2 = Math.abs(e2 - t3),
              o2 = [];
            if (t3 === e2) return {
              result: o2 = [t3],
              niceMin: o2[0],
              niceMax: o2[o2.length - 1]
            };
            "dataPoints" === (i2 = this._adjustTicksForSmallRange(i2, a2, r2)) && (i2 = this.w.globals.dataPoints - 1), s2 || (s2 = r2 / i2), s2 = Math.round(10 * (s2 + Number.EPSILON)) / 10, i2 === Number.MAX_VALUE && (i2 = 5, s2 = 1);
            for (var n2 = t3; i2 >= 0;) o2.push(n2), n2 = m.preciseAddition(n2, s2), i2 -= 1;
            return {
              result: o2,
              niceMin: o2[0],
              niceMax: o2[o2.length - 1]
            };
          }
        }, {
          key: "logarithmicScaleNice",
          value: function (t3, e2, i2) {
            e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
            for (var a2 = [], s2 = Math.ceil(Math.log(e2) / Math.log(i2) + 1), r2 = Math.floor(Math.log(t3) / Math.log(i2)); r2 < s2; r2++) a2.push(Math.pow(i2, r2));
            return {
              result: a2,
              niceMin: a2[0],
              niceMax: a2[a2.length - 1]
            };
          }
        }, {
          key: "logarithmicScale",
          value: function (t3, e2, i2) {
            e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
            for (var a2 = [], s2 = Math.log(e2) / Math.log(i2), r2 = Math.log(t3) / Math.log(i2), o2 = s2 - r2, n2 = Math.round(o2), l2 = o2 / n2, h2 = 0, c2 = r2; h2 < n2; h2++, c2 += l2) a2.push(Math.pow(i2, c2));
            return a2.push(Math.pow(i2, s2)), {
              result: a2,
              niceMin: t3,
              niceMax: e2
            };
          }
        }, {
          key: "_adjustTicksForSmallRange",
          value: function (t3, e2, i2) {
            var a2 = t3;
            if (void 0 !== e2 && this.w.config.yaxis[e2].labels.formatter && void 0 === this.w.config.yaxis[e2].tickAmount) {
              var s2 = Number(this.w.config.yaxis[e2].labels.formatter(1));
              m.isNumber(s2) && 0 === this.w.globals.yValueDecimal && (a2 = Math.ceil(i2));
            }
            return a2 < t3 ? a2 : t3;
          }
        }, {
          key: "setYScaleForIndex",
          value: function (t3, e2, i2) {
            var a2 = this.w.globals,
              s2 = this.w.config,
              r2 = a2.isBarHorizontal ? s2.xaxis : s2.yaxis[t3];
            void 0 === a2.yAxisScale[t3] && (a2.yAxisScale[t3] = []);
            var o2 = Math.abs(i2 - e2);
            r2.logarithmic && o2 <= 5 && (a2.invalidLogScale = true), r2.logarithmic && o2 > 5 ? (a2.allSeriesCollapsed = false, a2.yAxisScale[t3] = r2.forceNiceScale ? this.logarithmicScaleNice(e2, i2, r2.logBase) : this.logarithmicScale(e2, i2, r2.logBase)) : i2 !== -Number.MAX_VALUE && m.isNumber(i2) && e2 !== Number.MAX_VALUE && m.isNumber(e2) ? (a2.allSeriesCollapsed = false, a2.yAxisScale[t3] = this.niceScale(e2, i2, t3)) : a2.yAxisScale[t3] = this.niceScale(Number.MIN_VALUE, 0, t3);
          }
        }, {
          key: "setXScale",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = i2.globals,
              s2 = Math.abs(e2 - t3);
            if (e2 !== -Number.MAX_VALUE && m.isNumber(e2)) {
              var r2 = a2.xTickAmount + 1;
              s2 < 10 && s2 > 1 && (r2 = s2), a2.xAxisScale = this.linearScale(t3, e2, r2, 0, i2.config.xaxis.stepSize);
            } else a2.xAxisScale = this.linearScale(0, 10, 10);
            return a2.xAxisScale;
          }
        }, {
          key: "scaleMultipleYAxes",
          value: function () {
            var t3 = this,
              e2 = this.w.config,
              i2 = this.w.globals;
            this.coreUtils.setSeriesYAxisMappings();
            var a2 = i2.seriesYAxisMap,
              s2 = i2.minYArr,
              r2 = i2.maxYArr;
            i2.allSeriesCollapsed = true, i2.barGroups = [], a2.forEach(function (a3, o2) {
              var n2 = [];
              a3.forEach(function (t4) {
                var i3 = e2.series[t4].group;
                n2.indexOf(i3) < 0 && n2.push(i3);
              }), a3.length > 0 ? function () {
                var l2,
                  h2,
                  c2 = Number.MAX_VALUE,
                  d2 = -Number.MAX_VALUE,
                  g2 = c2,
                  u2 = d2;
                if (e2.chart.stacked) !function () {
                  var t4 = new Array(i2.dataPoints).fill(0),
                    s3 = [],
                    r3 = [],
                    f3 = [];
                  n2.forEach(function () {
                    s3.push(t4.map(function () {
                      return Number.MIN_VALUE;
                    })), r3.push(t4.map(function () {
                      return Number.MIN_VALUE;
                    })), f3.push(t4.map(function () {
                      return Number.MIN_VALUE;
                    }));
                  });
                  for (var p3 = function (t5) {
                      !l2 && e2.series[a3[t5]].type && (l2 = e2.series[a3[t5]].type);
                      var c3 = a3[t5];
                      h2 = e2.series[c3].group ? e2.series[c3].group : "axis-".concat(o2), !(i2.collapsedSeriesIndices.indexOf(c3) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(c3) < 0) || (i2.allSeriesCollapsed = false, n2.forEach(function (t6, a4) {
                        if (e2.series[c3].group === t6) for (var o3 = 0; o3 < i2.series[c3].length; o3++) {
                          var n3 = i2.series[c3][o3];
                          n3 >= 0 ? r3[a4][o3] += n3 : f3[a4][o3] += n3, s3[a4][o3] += n3, g2 = Math.min(g2, n3), u2 = Math.max(u2, n3);
                        }
                      })), "bar" !== l2 && "column" !== l2 || i2.barGroups.push(h2);
                    }, x2 = 0; x2 < a3.length; x2++) p3(x2);
                  l2 || (l2 = e2.chart.type), "bar" === l2 || "column" === l2 ? n2.forEach(function (t5, e3) {
                    c2 = Math.min(c2, Math.min.apply(null, f3[e3])), d2 = Math.max(d2, Math.max.apply(null, r3[e3]));
                  }) : (n2.forEach(function (t5, e3) {
                    g2 = Math.min(g2, Math.min.apply(null, s3[e3])), u2 = Math.max(u2, Math.max.apply(null, s3[e3]));
                  }), c2 = g2, d2 = u2), c2 === Number.MIN_VALUE && d2 === Number.MIN_VALUE && (d2 = -Number.MAX_VALUE);
                }();else for (var f2 = 0; f2 < a3.length; f2++) {
                  var p2 = a3[f2];
                  c2 = Math.min(c2, s2[p2]), d2 = Math.max(d2, r2[p2]), !(i2.collapsedSeriesIndices.indexOf(p2) < 0 && i2.ancillaryCollapsedSeriesIndices.indexOf(p2) < 0) || (i2.allSeriesCollapsed = false);
                }
                void 0 !== e2.yaxis[o2].min && (c2 = "function" == typeof e2.yaxis[o2].min ? e2.yaxis[o2].min(c2) : e2.yaxis[o2].min), void 0 !== e2.yaxis[o2].max && (d2 = "function" == typeof e2.yaxis[o2].max ? e2.yaxis[o2].max(d2) : e2.yaxis[o2].max), i2.barGroups = i2.barGroups.filter(function (t4, e3, i3) {
                  return i3.indexOf(t4) === e3;
                }), t3.setYScaleForIndex(o2, c2, d2), a3.forEach(function (t4) {
                  s2[t4] = i2.yAxisScale[o2].niceMin, r2[t4] = i2.yAxisScale[o2].niceMax;
                });
              }() : t3.setYScaleForIndex(o2, 0, -Number.MAX_VALUE);
            });
          }
        }]), t2;
      }(),
      J = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.scales = new $(e2);
        }
        return s(t2, [{
          key: "init",
          value: function () {
            this.setYRange(), this.setXRange(), this.setZRange();
          }
        }, {
          key: "getMinYMaxY",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,
              i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,
              a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
              s2 = this.w.config,
              r2 = this.w.globals,
              o2 = -Number.MAX_VALUE,
              n2 = Number.MIN_VALUE;
            null === a2 && (a2 = t3 + 1);
            var l2 = r2.series,
              h2 = l2,
              c2 = l2;
            "candlestick" === s2.chart.type ? (h2 = r2.seriesCandleL, c2 = r2.seriesCandleH) : "boxPlot" === s2.chart.type ? (h2 = r2.seriesCandleO, c2 = r2.seriesCandleC) : r2.isRangeData && (h2 = r2.seriesRangeStart, c2 = r2.seriesRangeEnd);
            var d2 = false;
            if (r2.seriesX.length >= a2) {
              var g2,
                u2 = null === (g2 = r2.brushSource) || void 0 === g2 ? void 0 : g2.w.config.chart.brush;
              (s2.chart.zoom.enabled && s2.chart.zoom.autoScaleYaxis || null != u2 && u2.enabled && null != u2 && u2.autoScaleYaxis) && (d2 = true);
            }
            for (var f2 = t3; f2 < a2; f2++) {
              r2.dataPoints = Math.max(r2.dataPoints, l2[f2].length);
              var p2 = s2.series[f2].type;
              r2.categoryLabels.length && (r2.dataPoints = r2.categoryLabels.filter(function (t4) {
                return void 0 !== t4;
              }).length), r2.labels.length && "datetime" !== s2.xaxis.type && 0 !== r2.series.reduce(function (t4, e3) {
                return t4 + e3.length;
              }, 0) && (r2.dataPoints = Math.max(r2.dataPoints, r2.labels.length));
              var x2 = 0,
                b2 = l2[f2].length - 1;
              if (d2) {
                if (s2.xaxis.min) for (; x2 < b2 && r2.seriesX[f2][x2] < s2.xaxis.min; x2++);
                if (s2.xaxis.max) for (; b2 > x2 && r2.seriesX[f2][b2] > s2.xaxis.max; b2--);
              }
              for (var v2 = x2; v2 <= b2 && v2 < r2.series[f2].length; v2++) {
                var y2 = l2[f2][v2];
                if (null !== y2 && m.isNumber(y2)) {
                  switch (void 0 !== c2[f2][v2] && (o2 = Math.max(o2, c2[f2][v2]), e2 = Math.min(e2, c2[f2][v2])), void 0 !== h2[f2][v2] && (e2 = Math.min(e2, h2[f2][v2]), i2 = Math.max(i2, h2[f2][v2])), p2) {
                    case "candlestick":
                      void 0 !== r2.seriesCandleC[f2][v2] && (o2 = Math.max(o2, r2.seriesCandleH[f2][v2]), e2 = Math.min(e2, r2.seriesCandleL[f2][v2]));
                      break;
                    case "boxPlot":
                      void 0 !== r2.seriesCandleC[f2][v2] && (o2 = Math.max(o2, r2.seriesCandleC[f2][v2]), e2 = Math.min(e2, r2.seriesCandleO[f2][v2]));
                  }
                  p2 && "candlestick" !== p2 && "boxPlot" !== p2 && "rangeArea" !== p2 && "rangeBar" !== p2 && (o2 = Math.max(o2, r2.series[f2][v2]), e2 = Math.min(e2, r2.series[f2][v2])), i2 = o2, r2.seriesGoals[f2] && r2.seriesGoals[f2][v2] && Array.isArray(r2.seriesGoals[f2][v2]) && r2.seriesGoals[f2][v2].forEach(function (t4) {
                    n2 !== Number.MIN_VALUE && (n2 = Math.min(n2, t4.value), e2 = n2), o2 = Math.max(o2, t4.value), i2 = o2;
                  }), m.isFloat(y2) && (y2 = m.noExponents(y2), r2.yValueDecimal = Math.max(r2.yValueDecimal, y2.toString().split(".")[1].length)), n2 > h2[f2][v2] && h2[f2][v2] < 0 && (n2 = h2[f2][v2]);
                } else r2.hasNullValues = true;
              }
              "bar" !== p2 && "column" !== p2 || (n2 < 0 && o2 < 0 && (o2 = 0, i2 = Math.max(i2, 0)), n2 === Number.MIN_VALUE && (n2 = 0, e2 = Math.min(e2, 0)));
            }
            return "rangeBar" === s2.chart.type && r2.seriesRangeStart.length && r2.isBarHorizontal && (n2 = e2), "bar" === s2.chart.type && (n2 < 0 && o2 < 0 && (o2 = 0), n2 === Number.MIN_VALUE && (n2 = 0)), {
              minY: n2,
              maxY: o2,
              lowestY: e2,
              highestY: i2
            };
          }
        }, {
          key: "setYRange",
          value: function () {
            var t3 = this.w.globals,
              e2 = this.w.config;
            t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE;
            var i2,
              a2 = Number.MAX_VALUE;
            if (t3.isMultipleYAxis) {
              a2 = Number.MAX_VALUE;
              for (var s2 = 0; s2 < t3.series.length; s2++) i2 = this.getMinYMaxY(s2), t3.minYArr[s2] = i2.lowestY, t3.maxYArr[s2] = i2.highestY, a2 = Math.min(a2, i2.lowestY);
            }
            if (i2 = this.getMinYMaxY(0, a2, null, t3.series.length), "bar" === e2.chart.type ? (t3.minY = i2.minY, t3.maxY = i2.maxY) : (t3.minY = i2.lowestY, t3.maxY = i2.highestY), a2 = i2.lowestY, e2.chart.stacked && this._setStackedMinMax(), "line" === e2.chart.type || "area" === e2.chart.type || "scatter" === e2.chart.type || "candlestick" === e2.chart.type || "boxPlot" === e2.chart.type || "rangeBar" === e2.chart.type && !t3.isBarHorizontal ? t3.minY === Number.MIN_VALUE && a2 !== -Number.MAX_VALUE && a2 !== t3.maxY && (t3.minY = a2) : t3.minY = t3.minY !== Number.MIN_VALUE ? Math.min(i2.minY, t3.minY) : i2.minY, e2.yaxis.forEach(function (e3, i3) {
              void 0 !== e3.max && ("number" == typeof e3.max ? t3.maxYArr[i3] = e3.max : "function" == typeof e3.max && (t3.maxYArr[i3] = e3.max(t3.isMultipleYAxis ? t3.maxYArr[i3] : t3.maxY)), t3.maxY = t3.maxYArr[i3]), void 0 !== e3.min && ("number" == typeof e3.min ? t3.minYArr[i3] = e3.min : "function" == typeof e3.min && (t3.minYArr[i3] = e3.min(t3.isMultipleYAxis ? t3.minYArr[i3] === Number.MIN_VALUE ? 0 : t3.minYArr[i3] : t3.minY)), t3.minY = t3.minYArr[i3]);
            }), t3.isBarHorizontal) {
              ["min", "max"].forEach(function (i3) {
                void 0 !== e2.xaxis[i3] && "number" == typeof e2.xaxis[i3] && ("min" === i3 ? t3.minY = e2.xaxis[i3] : t3.maxY = e2.xaxis[i3]);
              });
            }
            return t3.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t3.minY = a2) : (this.scales.setYScaleForIndex(0, t3.minY, t3.maxY), t3.minY = t3.yAxisScale[0].niceMin, t3.maxY = t3.yAxisScale[0].niceMax, t3.minYArr[0] = t3.minY, t3.maxYArr[0] = t3.maxY), t3.barGroups = [], t3.lineGroups = [], t3.areaGroups = [], e2.series.forEach(function (i3) {
              switch (i3.type || e2.chart.type) {
                case "bar":
                case "column":
                  t3.barGroups.push(i3.group);
                  break;
                case "line":
                  t3.lineGroups.push(i3.group);
                  break;
                case "area":
                  t3.areaGroups.push(i3.group);
              }
            }), t3.barGroups = t3.barGroups.filter(function (t4, e3, i3) {
              return i3.indexOf(t4) === e3;
            }), t3.lineGroups = t3.lineGroups.filter(function (t4, e3, i3) {
              return i3.indexOf(t4) === e3;
            }), t3.areaGroups = t3.areaGroups.filter(function (t4, e3, i3) {
              return i3.indexOf(t4) === e3;
            }), {
              minY: t3.minY,
              maxY: t3.maxY,
              minYArr: t3.minYArr,
              maxYArr: t3.maxYArr,
              yAxisScale: t3.yAxisScale
            };
          }
        }, {
          key: "setXRange",
          value: function () {
            var t3 = this.w.globals,
              e2 = this.w.config,
              i2 = "numeric" === e2.xaxis.type || "datetime" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided || t3.noLabelsProvided || t3.isXNumeric;
            if (t3.isXNumeric && function () {
              for (var e3 = 0; e3 < t3.series.length; e3++) if (t3.labels[e3]) for (var i3 = 0; i3 < t3.labels[e3].length; i3++) null !== t3.labels[e3][i3] && m.isNumber(t3.labels[e3][i3]) && (t3.maxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.initialMaxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.minX = Math.min(t3.minX, t3.labels[e3][i3]), t3.initialMinX = Math.min(t3.minX, t3.labels[e3][i3]));
            }(), t3.noLabelsProvided && 0 === e2.xaxis.categories.length && (t3.maxX = t3.labels[t3.labels.length - 1], t3.initialMaxX = t3.labels[t3.labels.length - 1], t3.minX = 1, t3.initialMinX = 1), t3.isXNumeric || t3.noLabelsProvided || t3.dataFormatXNumeric) {
              var a2 = 10;
              if (void 0 === e2.xaxis.tickAmount) a2 = Math.round(t3.svgWidth / 150), "numeric" === e2.xaxis.type && t3.dataPoints < 30 && (a2 = t3.dataPoints - 1), a2 > t3.dataPoints && 0 !== t3.dataPoints && (a2 = t3.dataPoints - 1);else if ("dataPoints" === e2.xaxis.tickAmount) {
                if (t3.series.length > 1 && (a2 = t3.series[t3.maxValsInArrayIndex].length - 1), t3.isXNumeric) {
                  var s2 = t3.maxX - t3.minX;
                  s2 < 30 && (a2 = s2 - 1);
                }
              } else a2 = e2.xaxis.tickAmount;
              if (t3.xTickAmount = a2, void 0 !== e2.xaxis.max && "number" == typeof e2.xaxis.max && (t3.maxX = e2.xaxis.max), void 0 !== e2.xaxis.min && "number" == typeof e2.xaxis.min && (t3.minX = e2.xaxis.min), void 0 !== e2.xaxis.range && (t3.minX = t3.maxX - e2.xaxis.range), t3.minX !== Number.MAX_VALUE && t3.maxX !== -Number.MAX_VALUE) {
                if (e2.xaxis.convertedCatToNumeric && !t3.dataFormatXNumeric) {
                  for (var r2 = [], o2 = t3.minX - 1; o2 < t3.maxX; o2++) r2.push(o2 + 1);
                  t3.xAxisScale = {
                    result: r2,
                    niceMin: r2[0],
                    niceMax: r2[r2.length - 1]
                  };
                } else t3.xAxisScale = this.scales.setXScale(t3.minX, t3.maxX);
              } else t3.xAxisScale = this.scales.linearScale(0, a2, a2, 0, e2.xaxis.stepSize), t3.noLabelsProvided && t3.labels.length > 0 && (t3.xAxisScale = this.scales.linearScale(1, t3.labels.length, a2 - 1, 0, e2.xaxis.stepSize), t3.seriesX = t3.labels.slice());
              i2 && (t3.labels = t3.xAxisScale.result.slice());
            }
            return t3.isBarHorizontal && t3.labels.length && (t3.xTickAmount = t3.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {
              minX: t3.minX,
              maxX: t3.maxX
            };
          }
        }, {
          key: "setZRange",
          value: function () {
            var t3 = this.w.globals;
            if (t3.isDataXYZ) {
              for (var e2 = 0; e2 < t3.series.length; e2++) if (void 0 !== t3.seriesZ[e2]) for (var i2 = 0; i2 < t3.seriesZ[e2].length; i2++) null !== t3.seriesZ[e2][i2] && m.isNumber(t3.seriesZ[e2][i2]) && (t3.maxZ = Math.max(t3.maxZ, t3.seriesZ[e2][i2]), t3.minZ = Math.min(t3.minZ, t3.seriesZ[e2][i2]));
            }
          }
        }, {
          key: "_handleSingleDataPoint",
          value: function () {
            var t3 = this.w.globals,
              e2 = this.w.config;
            if (t3.minX === t3.maxX) {
              var i2 = new L(this.ctx);
              if ("datetime" === e2.xaxis.type) {
                var a2 = i2.getDate(t3.minX);
                e2.xaxis.labels.datetimeUTC ? a2.setUTCDate(a2.getUTCDate() - 2) : a2.setDate(a2.getDate() - 2), t3.minX = new Date(a2).getTime();
                var s2 = i2.getDate(t3.maxX);
                e2.xaxis.labels.datetimeUTC ? s2.setUTCDate(s2.getUTCDate() + 2) : s2.setDate(s2.getDate() + 2), t3.maxX = new Date(s2).getTime();
              } else ("numeric" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided) && (t3.minX = t3.minX - 2, t3.initialMinX = t3.minX, t3.maxX = t3.maxX + 2, t3.initialMaxX = t3.maxX);
            }
          }
        }, {
          key: "_getMinXDiff",
          value: function () {
            var t3 = this.w.globals;
            t3.isXNumeric && t3.seriesX.forEach(function (e2, i2) {
              1 === e2.length && e2.push(t3.seriesX[t3.maxValsInArrayIndex][t3.seriesX[t3.maxValsInArrayIndex].length - 1]);
              var a2 = e2.slice();
              a2.sort(function (t4, e3) {
                return t4 - e3;
              }), a2.forEach(function (e3, i3) {
                if (i3 > 0) {
                  var s2 = e3 - a2[i3 - 1];
                  s2 > 0 && (t3.minXDiff = Math.min(s2, t3.minXDiff));
                }
              }), 1 !== t3.dataPoints && t3.minXDiff !== Number.MAX_VALUE || (t3.minXDiff = 0.5);
            });
          }
        }, {
          key: "_setStackedMinMax",
          value: function () {
            var t3 = this,
              e2 = this.w.globals;
            if (e2.series.length) {
              var i2 = e2.seriesGroups;
              i2.length || (i2 = [this.w.globals.seriesNames.map(function (t4) {
                return t4;
              })]);
              var a2 = {},
                s2 = {};
              i2.forEach(function (i3) {
                a2[i3] = [], s2[i3] = [], t3.w.config.series.map(function (t4, a3) {
                  return i3.indexOf(e2.seriesNames[a3]) > -1 ? a3 : null;
                }).filter(function (t4) {
                  return null !== t4;
                }).forEach(function (r2) {
                  for (var o2 = 0; o2 < e2.series[e2.maxValsInArrayIndex].length; o2++) {
                    var n2, l2, h2, c2;
                    void 0 === a2[i3][o2] && (a2[i3][o2] = 0, s2[i3][o2] = 0), (t3.w.config.chart.stacked && !e2.comboCharts || t3.w.config.chart.stacked && e2.comboCharts && (!t3.w.config.chart.stackOnlyBar || "bar" === (null === (n2 = t3.w.config.series) || void 0 === n2 || null === (l2 = n2[r2]) || void 0 === l2 ? void 0 : l2.type) || "column" === (null === (h2 = t3.w.config.series) || void 0 === h2 || null === (c2 = h2[r2]) || void 0 === c2 ? void 0 : c2.type))) && null !== e2.series[r2][o2] && m.isNumber(e2.series[r2][o2]) && (e2.series[r2][o2] > 0 ? a2[i3][o2] += parseFloat(e2.series[r2][o2]) + 1e-4 : s2[i3][o2] += parseFloat(e2.series[r2][o2]));
                  }
                });
              }), Object.entries(a2).forEach(function (t4) {
                var i3 = f(t4, 1)[0];
                a2[i3].forEach(function (t5, r2) {
                  e2.maxY = Math.max(e2.maxY, a2[i3][r2]), e2.minY = Math.min(e2.minY, s2[i3][r2]);
                });
              });
            }
          }
        }]), t2;
      }(),
      Q = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.elgrid = a2, this.w = e2.w;
          var s2 = this.w;
          this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.axisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xAxisoffX = "bottom" === s2.config.xaxis.position ? s2.globals.gridHeight : 0, this.drawnLabels = [], this.axesUtils = new M(e2);
        }
        return s(t2, [{
          key: "drawYaxis",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a2 = e2.config.yaxis[t3].labels.style,
              s2 = a2.fontSize,
              r2 = a2.fontFamily,
              o2 = a2.fontWeight,
              n2 = i2.group({
                class: "apexcharts-yaxis",
                rel: t3,
                transform: "translate(".concat(e2.globals.translateYAxisX[t3], ", 0)")
              });
            if (this.axesUtils.isYAxisHidden(t3)) return n2;
            var l2 = i2.group({
              class: "apexcharts-yaxis-texts-g"
            });
            n2.add(l2);
            var h2 = e2.globals.yAxisScale[t3].result.length - 1,
              c2 = e2.globals.gridHeight / h2,
              d2 = e2.globals.yLabelFormatters[t3],
              g2 = this.axesUtils.checkForReversedLabels(t3, e2.globals.yAxisScale[t3].result.slice());
            if (e2.config.yaxis[t3].labels.show) {
              var u2 = e2.globals.translateY + e2.config.yaxis[t3].labels.offsetY;
              e2.globals.isBarHorizontal ? u2 = 0 : "heatmap" === e2.config.chart.type && (u2 -= c2 / 2), u2 += parseInt(s2, 10) / 3;
              for (var f2 = h2; f2 >= 0; f2--) {
                var p2 = d2(g2[f2], f2, e2),
                  x2 = e2.config.yaxis[t3].labels.padding;
                e2.config.yaxis[t3].opposite && 0 !== e2.config.yaxis.length && (x2 *= -1);
                var b2 = this.getTextAnchor(e2.config.yaxis[t3].labels.align, e2.config.yaxis[t3].opposite),
                  v2 = this.axesUtils.getYAxisForeColor(a2.colors, t3),
                  y2 = Array.isArray(v2) ? v2[f2] : v2,
                  w2 = m.listToArray(e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-label tspan"))).map(function (t4) {
                    return t4.textContent;
                  }),
                  A2 = i2.drawText({
                    x: x2,
                    y: u2,
                    text: w2.includes(p2) && !e2.config.yaxis[t3].labels.showDuplicates ? "" : p2,
                    textAnchor: b2,
                    fontSize: s2,
                    fontFamily: r2,
                    fontWeight: o2,
                    maxWidth: e2.config.yaxis[t3].labels.maxWidth,
                    foreColor: y2,
                    isPlainText: false,
                    cssClass: "apexcharts-yaxis-label ".concat(a2.cssClass)
                  });
                l2.add(A2), this.addTooltip(A2, p2), 0 !== e2.config.yaxis[t3].labels.rotate && this.rotateLabel(i2, A2, firstLabel, e2.config.yaxis[t3].labels.rotate), u2 += c2;
              }
            }
            return this.addYAxisTitle(i2, n2, t3), this.addAxisBorder(i2, n2, t3, h2, c2), n2;
          }
        }, {
          key: "getTextAnchor",
          value: function (t3, e2) {
            return "left" === t3 ? "start" : "center" === t3 ? "middle" : "right" === t3 ? "end" : e2 ? "start" : "end";
          }
        }, {
          key: "addTooltip",
          value: function (t3, e2) {
            var i2 = document.createElementNS(this.w.globals.SVGNS, "title");
            i2.textContent = Array.isArray(e2) ? e2.join(" ") : e2, t3.node.appendChild(i2);
          }
        }, {
          key: "rotateLabel",
          value: function (t3, e2, i2, a2) {
            var s2 = t3.rotateAroundCenter(i2.node),
              r2 = t3.rotateAroundCenter(e2.node);
            e2.node.setAttribute("transform", "rotate(".concat(a2, " ").concat(s2.x, " ").concat(r2.y, ")"));
          }
        }, {
          key: "addYAxisTitle",
          value: function (t3, e2, i2) {
            var a2 = this.w;
            if (void 0 !== a2.config.yaxis[i2].title.text) {
              var s2 = t3.group({
                  class: "apexcharts-yaxis-title"
                }),
                r2 = a2.config.yaxis[i2].opposite ? a2.globals.translateYAxisX[i2] : 0,
                o2 = t3.drawText({
                  x: r2,
                  y: a2.globals.gridHeight / 2 + a2.globals.translateY + a2.config.yaxis[i2].title.offsetY,
                  text: a2.config.yaxis[i2].title.text,
                  textAnchor: "end",
                  foreColor: a2.config.yaxis[i2].title.style.color,
                  fontSize: a2.config.yaxis[i2].title.style.fontSize,
                  fontWeight: a2.config.yaxis[i2].title.style.fontWeight,
                  fontFamily: a2.config.yaxis[i2].title.style.fontFamily,
                  cssClass: "apexcharts-yaxis-title-text ".concat(a2.config.yaxis[i2].title.style.cssClass)
                });
              s2.add(o2), e2.add(s2);
            }
          }
        }, {
          key: "addAxisBorder",
          value: function (t3, e2, i2, a2, s2) {
            var r2 = this.w,
              o2 = r2.config.yaxis[i2].axisBorder,
              n2 = 31 + o2.offsetX;
            if (r2.config.yaxis[i2].opposite && (n2 = -31 - o2.offsetX), o2.show) {
              var l2 = t3.drawLine(n2, r2.globals.translateY + o2.offsetY - 2, n2, r2.globals.gridHeight + r2.globals.translateY + o2.offsetY + 2, o2.color, 0, o2.width);
              e2.add(l2);
            }
            r2.config.yaxis[i2].axisTicks.show && this.axesUtils.drawYAxisTicks(n2, a2, o2, r2.config.yaxis[i2].axisTicks, i2, s2, e2);
          }
        }, {
          key: "drawYaxisInversed",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a2 = i2.group({
                class: "apexcharts-xaxis apexcharts-yaxis-inversed"
              }),
              s2 = i2.group({
                class: "apexcharts-xaxis-texts-g",
                transform: "translate(".concat(e2.globals.translateXAxisX, ", ").concat(e2.globals.translateXAxisY, ")")
              });
            a2.add(s2);
            var r2 = e2.globals.yAxisScale[t3].result.length - 1,
              o2 = e2.globals.gridWidth / r2 + 0.1,
              n2 = o2 + e2.config.xaxis.labels.offsetX,
              l2 = e2.globals.xLabelFormatter,
              h2 = this.axesUtils.checkForReversedLabels(t3, e2.globals.yAxisScale[t3].result.slice()),
              c2 = e2.globals.timescaleLabels;
            if (c2.length > 0 && (this.xaxisLabels = c2.slice(), r2 = (h2 = c2.slice()).length), e2.config.xaxis.labels.show) for (var d2 = c2.length ? 0 : r2; c2.length ? d2 < c2.length : d2 >= 0; c2.length ? d2++ : d2--) {
              var g2 = l2(h2[d2], d2, e2),
                u2 = e2.globals.gridWidth + e2.globals.padHorizontal - (n2 - o2 + e2.config.xaxis.labels.offsetX);
              if (c2.length) {
                var f2 = this.axesUtils.getLabel(h2, c2, u2, d2, this.drawnLabels, this.xaxisFontSize);
                u2 = f2.x, g2 = f2.text, this.drawnLabels.push(f2.text), 0 === d2 && e2.globals.skipFirstTimelinelabel && (g2 = ""), d2 === h2.length - 1 && e2.globals.skipLastTimelinelabel && (g2 = "");
              }
              var p2 = i2.drawText({
                x: u2,
                y: this.xAxisoffX + e2.config.xaxis.labels.offsetY + 30 - ("top" === e2.config.xaxis.position ? e2.globals.xAxisHeight + e2.config.xaxis.axisTicks.height - 2 : 0),
                text: g2,
                textAnchor: "middle",
                foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t3] : this.xaxisForeColors,
                fontSize: this.xaxisFontSize,
                fontFamily: this.xaxisFontFamily,
                fontWeight: e2.config.xaxis.labels.style.fontWeight,
                isPlainText: false,
                cssClass: "apexcharts-xaxis-label ".concat(e2.config.xaxis.labels.style.cssClass)
              });
              s2.add(p2), p2.tspan(g2), this.addTooltip(p2, g2), n2 += o2;
            }
            return this.inversedYAxisTitleText(a2), this.inversedYAxisBorder(a2), a2;
          }
        }, {
          key: "inversedYAxisBorder",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a2 = e2.config.xaxis.axisBorder;
            if (a2.show) {
              var s2 = 0;
              "bar" === e2.config.chart.type && e2.globals.isXNumeric && (s2 -= 15);
              var r2 = i2.drawLine(e2.globals.padHorizontal + s2 + a2.offsetX, this.xAxisoffX, e2.globals.gridWidth, this.xAxisoffX, a2.color, 0, a2.height);
              this.elgrid && this.elgrid.elGridBorders && e2.config.grid.show ? this.elgrid.elGridBorders.add(r2) : t3.add(r2);
            }
          }
        }, {
          key: "inversedYAxisTitleText",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx);
            if (void 0 !== e2.config.xaxis.title.text) {
              var a2 = i2.group({
                  class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
                }),
                s2 = i2.drawText({
                  x: e2.globals.gridWidth / 2 + e2.config.xaxis.title.offsetX,
                  y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e2.config.xaxis.title.style.fontSize) + e2.config.xaxis.title.offsetY + 20,
                  text: e2.config.xaxis.title.text,
                  textAnchor: "middle",
                  fontSize: e2.config.xaxis.title.style.fontSize,
                  fontFamily: e2.config.xaxis.title.style.fontFamily,
                  fontWeight: e2.config.xaxis.title.style.fontWeight,
                  foreColor: e2.config.xaxis.title.style.color,
                  cssClass: "apexcharts-xaxis-title-text ".concat(e2.config.xaxis.title.style.cssClass)
                });
              a2.add(s2), t3.add(a2);
            }
          }
        }, {
          key: "yAxisTitleRotate",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new k(this.ctx),
              s2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-texts-g")),
              r2 = s2 ? s2.getBoundingClientRect() : {
                width: 0,
                height: 0
              },
              o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-title text")),
              n2 = o2 ? o2.getBoundingClientRect() : {
                width: 0,
                height: 0
              };
            if (o2) {
              var l2 = this.xPaddingForYAxisTitle(t3, r2, n2, e2);
              o2.setAttribute("x", l2.xPos - (e2 ? 10 : 0));
              var h2 = a2.rotateAroundCenter(o2);
              o2.setAttribute("transform", "rotate(".concat(e2 ? -1 * i2.config.yaxis[t3].title.rotate : i2.config.yaxis[t3].title.rotate, " ").concat(h2.x, " ").concat(h2.y, ")"));
            }
          }
        }, {
          key: "xPaddingForYAxisTitle",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = 0,
              o2 = 10;
            return void 0 === s2.config.yaxis[t3].title.text || t3 < 0 ? {
              xPos: r2,
              padd: 0
            } : (a2 ? r2 = e2.width + s2.config.yaxis[t3].title.offsetX + i2.width / 2 + o2 / 2 : (r2 = -1 * e2.width + s2.config.yaxis[t3].title.offsetX + o2 / 2 + i2.width / 2, s2.globals.isBarHorizontal && (o2 = 25, r2 = -1 * e2.width - s2.config.yaxis[t3].title.offsetX - o2)), {
              xPos: r2,
              padd: o2
            });
          }
        }, {
          key: "setYAxisXPosition",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = 0,
              s2 = 0,
              r2 = 18,
              o2 = 1;
            i2.config.yaxis.length > 1 && (this.multipleYs = true), i2.config.yaxis.forEach(function (n2, l2) {
              var h2 = i2.globals.ignoreYAxisIndexes.includes(l2) || !n2.show || n2.floating || 0 === t3[l2].width,
                c2 = t3[l2].width + e2[l2].width;
              n2.opposite ? i2.globals.isBarHorizontal ? (s2 = i2.globals.gridWidth + i2.globals.translateX - 1, i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX) : (s2 = i2.globals.gridWidth + i2.globals.translateX + o2, h2 || (o2 += c2 + 20), i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX + 20) : (a2 = i2.globals.translateX - r2, h2 || (r2 += c2 + 20), i2.globals.translateYAxisX[l2] = a2 + n2.labels.offsetX);
            });
          }
        }, {
          key: "setYAxisTextAlignments",
          value: function () {
            var t3 = this.w;
            m.listToArray(t3.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis")).forEach(function (e2, i2) {
              var a2 = t3.config.yaxis[i2];
              if (a2 && !a2.floating && void 0 !== a2.labels.align) {
                var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-texts-g")),
                  r2 = m.listToArray(t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-label"))),
                  o2 = s2.getBoundingClientRect();
                r2.forEach(function (t4) {
                  t4.setAttribute("text-anchor", a2.labels.align);
                }), "left" !== a2.labels.align || a2.opposite ? "center" === a2.labels.align ? s2.setAttribute("transform", "translate(".concat(o2.width / 2 * (a2.opposite ? 1 : -1), ", 0)")) : "right" === a2.labels.align && a2.opposite && s2.setAttribute("transform", "translate(".concat(o2.width, ", 0)")) : s2.setAttribute("transform", "translate(-".concat(o2.width, ", 0)"));
              }
            });
          }
        }]), t2;
      }(),
      K = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.documentEvent = m.bind(this.documentEvent, this);
        }
        return s(t2, [{
          key: "addEventListener",
          value: function (t3, e2) {
            var i2 = this.w;
            i2.globals.events.hasOwnProperty(t3) ? i2.globals.events[t3].push(e2) : i2.globals.events[t3] = [e2];
          }
        }, {
          key: "removeEventListener",
          value: function (t3, e2) {
            var i2 = this.w;
            if (i2.globals.events.hasOwnProperty(t3)) {
              var a2 = i2.globals.events[t3].indexOf(e2);
              -1 !== a2 && i2.globals.events[t3].splice(a2, 1);
            }
          }
        }, {
          key: "fireEvent",
          value: function (t3, e2) {
            var i2 = this.w;
            if (i2.globals.events.hasOwnProperty(t3)) {
              e2 && e2.length || (e2 = []);
              for (var a2 = i2.globals.events[t3], s2 = a2.length, r2 = 0; r2 < s2; r2++) a2[r2].apply(null, e2);
            }
          }
        }, {
          key: "setupEventHandlers",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = this.ctx,
              a2 = e2.globals.dom.baseEl.querySelector(e2.globals.chartClass);
            this.ctx.eventList.forEach(function (t4) {
              a2.addEventListener(t4, function (t5) {
                var a3 = Object.assign({}, e2, {
                  seriesIndex: e2.globals.axisCharts ? e2.globals.capturedSeriesIndex : 0,
                  dataPointIndex: e2.globals.capturedDataPointIndex
                });
                "mousemove" === t5.type || "touchmove" === t5.type ? "function" == typeof e2.config.chart.events.mouseMove && e2.config.chart.events.mouseMove(t5, i2, a3) : "mouseleave" === t5.type || "touchleave" === t5.type ? "function" == typeof e2.config.chart.events.mouseLeave && e2.config.chart.events.mouseLeave(t5, i2, a3) : ("mouseup" === t5.type && 1 === t5.which || "touchend" === t5.type) && ("function" == typeof e2.config.chart.events.click && e2.config.chart.events.click(t5, i2, a3), i2.ctx.events.fireEvent("click", [t5, i2, a3]));
              }, {
                capture: false,
                passive: true
              });
            }), this.ctx.eventList.forEach(function (i3) {
              e2.globals.dom.baseEl.addEventListener(i3, t3.documentEvent, {
                passive: true
              });
            }), this.ctx.core.setupBrushHandler();
          }
        }, {
          key: "documentEvent",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3.target.className;
            if ("click" === t3.type) {
              var a2 = e2.globals.dom.baseEl.querySelector(".apexcharts-menu");
              a2 && a2.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i2 && a2.classList.remove("apexcharts-menu-open");
            }
            e2.globals.clientX = "touchmove" === t3.type ? t3.touches[0].clientX : t3.clientX, e2.globals.clientY = "touchmove" === t3.type ? t3.touches[0].clientY : t3.clientY;
          }
        }]), t2;
      }(),
      tt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "setCurrentLocaleValues",
          value: function (t3) {
            var e2 = this.w.config.chart.locales;
            window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e2 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
            var i2 = e2.filter(function (e3) {
              return e3.name === t3;
            })[0];
            if (!i2) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
            var a2 = m.extend(z, i2);
            this.w.globals.locale = a2.options;
          }
        }]), t2;
      }(),
      et = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "drawAxis",
          value: function (t3, e2) {
            var i2,
              a2,
              s2 = this,
              r2 = this.w.globals,
              o2 = this.w.config,
              n2 = new q(this.ctx, e2),
              l2 = new Q(this.ctx, e2);
            r2.axisCharts && "radar" !== t3 && (r2.isBarHorizontal ? (a2 = l2.drawYaxisInversed(0), i2 = n2.drawXaxisInversed(0), r2.dom.elGraphical.add(i2), r2.dom.elGraphical.add(a2)) : (i2 = n2.drawXaxis(), r2.dom.elGraphical.add(i2), o2.yaxis.map(function (t4, e3) {
              if (-1 === r2.ignoreYAxisIndexes.indexOf(e3) && (a2 = l2.drawYaxis(e3), r2.dom.Paper.add(a2), "back" === s2.w.config.grid.position)) {
                var i3 = r2.dom.Paper.children()[1];
                i3.remove(), r2.dom.Paper.add(i3);
              }
            })));
          }
        }]), t2;
      }(),
      it = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "drawXCrosshairs",
          value: function () {
            var t3 = this.w,
              e2 = new k(this.ctx),
              i2 = new w(this.ctx),
              a2 = t3.config.xaxis.crosshairs.fill.gradient,
              s2 = t3.config.xaxis.crosshairs.dropShadow,
              r2 = t3.config.xaxis.crosshairs.fill.type,
              o2 = a2.colorFrom,
              n2 = a2.colorTo,
              l2 = a2.opacityFrom,
              h2 = a2.opacityTo,
              c2 = a2.stops,
              d2 = s2.enabled,
              g2 = s2.left,
              u2 = s2.top,
              f2 = s2.blur,
              p2 = s2.color,
              x2 = s2.opacity,
              b2 = t3.config.xaxis.crosshairs.fill.color;
            if (t3.config.xaxis.crosshairs.show) {
              "gradient" === r2 && (b2 = e2.drawGradient("vertical", o2, n2, l2, h2, null, c2, null));
              var v2 = e2.drawRect();
              1 === t3.config.xaxis.crosshairs.width && (v2 = e2.drawLine());
              var y2 = t3.globals.gridHeight;
              (!m.isNumber(y2) || y2 < 0) && (y2 = 0);
              var A2 = t3.config.xaxis.crosshairs.width;
              (!m.isNumber(A2) || A2 < 0) && (A2 = 0), v2.attr({
                class: "apexcharts-xcrosshairs",
                x: 0,
                y: 0,
                y2,
                width: A2,
                height: y2,
                fill: b2,
                filter: "none",
                "fill-opacity": t3.config.xaxis.crosshairs.opacity,
                stroke: t3.config.xaxis.crosshairs.stroke.color,
                "stroke-width": t3.config.xaxis.crosshairs.stroke.width,
                "stroke-dasharray": t3.config.xaxis.crosshairs.stroke.dashArray
              }), d2 && (v2 = i2.dropShadow(v2, {
                left: g2,
                top: u2,
                blur: f2,
                color: p2,
                opacity: x2
              })), t3.globals.dom.elGraphical.add(v2);
            }
          }
        }, {
          key: "drawYCrosshairs",
          value: function () {
            var t3 = this.w,
              e2 = new k(this.ctx),
              i2 = t3.config.yaxis[0].crosshairs,
              a2 = t3.globals.barPadForNumericAxis;
            if (t3.config.yaxis[0].crosshairs.show) {
              var s2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, i2.stroke.dashArray, i2.stroke.width);
              s2.attr({
                class: "apexcharts-ycrosshairs"
              }), t3.globals.dom.elGraphical.add(s2);
            }
            var r2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, 0, 0);
            r2.attr({
              class: "apexcharts-ycrosshairs-hidden"
            }), t3.globals.dom.elGraphical.add(r2);
          }
        }]), t2;
      }(),
      at = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "checkResponsiveConfig",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = i2.config;
            if (0 !== a2.responsive.length) {
              var s2 = a2.responsive.slice();
              s2.sort(function (t4, e3) {
                return t4.breakpoint > e3.breakpoint ? 1 : e3.breakpoint > t4.breakpoint ? -1 : 0;
              }).reverse();
              var r2 = new D({}),
                o2 = function () {
                  var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    a3 = s2[0].breakpoint,
                    o3 = window.innerWidth > 0 ? window.innerWidth : screen.width;
                  if (o3 > a3) {
                    var n3 = m.clone(i2.globals.initialConfig);
                    n3.series = m.clone(i2.config.series);
                    var l2 = A.extendArrayProps(r2, n3, i2);
                    t4 = m.extend(l2, t4), t4 = m.extend(i2.config, t4), e2.overrideResponsiveOptions(t4);
                  } else for (var h2 = 0; h2 < s2.length; h2++) o3 < s2[h2].breakpoint && (t4 = A.extendArrayProps(r2, s2[h2].options, i2), t4 = m.extend(i2.config, t4), e2.overrideResponsiveOptions(t4));
                };
              if (t3) {
                var n2 = A.extendArrayProps(r2, t3, i2);
                n2 = m.extend(i2.config, n2), o2(n2 = m.extend(n2, t3));
              } else o2({});
            }
          }
        }, {
          key: "overrideResponsiveOptions",
          value: function (t3) {
            var e2 = new D(t3).init({
              responsiveOverride: true
            });
            this.w.config = e2;
          }
        }]), t2;
      }(),
      st = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.colors = [], this.isColorFn = false, this.isHeatmapDistributed = this.checkHeatmapDistributed(), this.isBarDistributed = this.checkBarDistributed();
        }
        return s(t2, [{
          key: "checkHeatmapDistributed",
          value: function () {
            var t3 = this.w.config,
              e2 = t3.chart,
              i2 = t3.plotOptions;
            return "treemap" === e2.type && i2.treemap && i2.treemap.distributed || "heatmap" === e2.type && i2.heatmap && i2.heatmap.distributed;
          }
        }, {
          key: "checkBarDistributed",
          value: function () {
            var t3 = this.w.config,
              e2 = t3.chart,
              i2 = t3.plotOptions;
            return i2.bar && i2.bar.distributed && ("bar" === e2.type || "rangeBar" === e2.type);
          }
        }, {
          key: "init",
          value: function () {
            this.setDefaultColors();
          }
        }, {
          key: "setDefaultColors",
          value: function () {
            var t3 = this.w,
              e2 = new m();
            t3.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(t3.config.theme.mode));
            var i2 = p(t3.config.colors || t3.config.fill.colors || []);
            t3.globals.colors = this.getColors(i2), this.applySeriesColors(t3.globals.seriesColors, t3.globals.colors), t3.config.theme.monochrome.enabled && (t3.globals.colors = this.getMonochromeColors(t3.config.theme.monochrome, t3.globals.series, e2));
            var a2 = t3.globals.colors.slice();
            this.pushExtraColors(t3.globals.colors), this.applyColorTypes(["fill", "stroke"], a2), this.applyDataLabelsColors(a2), this.applyRadarPolygonsColors(), this.applyMarkersColors(a2);
          }
        }, {
          key: "getColors",
          value: function (t3) {
            var e2 = this,
              i2 = this.w;
            return t3 && 0 !== t3.length ? Array.isArray(t3) && t3.length > 0 && "function" == typeof t3[0] ? (this.isColorFn = true, i2.config.series.map(function (a2, s2) {
              var r2 = t3[s2] || t3[0];
              return "function" == typeof r2 ? r2({
                value: i2.globals.axisCharts ? i2.globals.series[s2][0] || 0 : i2.globals.series[s2],
                seriesIndex: s2,
                dataPointIndex: s2,
                w: e2.w
              }) : r2;
            })) : t3 : this.predefined();
          }
        }, {
          key: "applySeriesColors",
          value: function (t3, e2) {
            t3.forEach(function (t4, i2) {
              t4 && (e2[i2] = t4);
            });
          }
        }, {
          key: "getMonochromeColors",
          value: function (t3, e2, i2) {
            var a2 = t3.color,
              s2 = t3.shadeIntensity,
              r2 = t3.shadeTo,
              o2 = this.isBarDistributed || this.isHeatmapDistributed ? e2[0].length * e2.length : e2.length,
              n2 = 1 / (o2 / s2),
              l2 = 0;
            return Array.from({
              length: o2
            }, function () {
              var t4 = "dark" === r2 ? i2.shadeColor(-1 * l2, a2) : i2.shadeColor(l2, a2);
              return l2 += n2, t4;
            });
          }
        }, {
          key: "applyColorTypes",
          value: function (t3, e2) {
            var i2 = this,
              a2 = this.w;
            t3.forEach(function (t4) {
              a2.globals[t4].colors = void 0 === a2.config[t4].colors ? i2.isColorFn ? a2.config.colors : e2 : a2.config[t4].colors.slice(), i2.pushExtraColors(a2.globals[t4].colors);
            });
          }
        }, {
          key: "applyDataLabelsColors",
          value: function (t3) {
            var e2 = this.w;
            e2.globals.dataLabels.style.colors = void 0 === e2.config.dataLabels.style.colors ? t3 : e2.config.dataLabels.style.colors.slice(), this.pushExtraColors(e2.globals.dataLabels.style.colors, 50);
          }
        }, {
          key: "applyRadarPolygonsColors",
          value: function () {
            var t3 = this.w;
            t3.globals.radarPolygons.fill.colors = void 0 === t3.config.plotOptions.radar.polygons.fill.colors ? ["dark" === t3.config.theme.mode ? "#424242" : "none"] : t3.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(t3.globals.radarPolygons.fill.colors, 20);
          }
        }, {
          key: "applyMarkersColors",
          value: function (t3) {
            var e2 = this.w;
            e2.globals.markers.colors = void 0 === e2.config.markers.colors ? t3 : e2.config.markers.colors.slice(), this.pushExtraColors(e2.globals.markers.colors);
          }
        }, {
          key: "pushExtraColors",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
              a2 = this.w,
              s2 = e2 || a2.globals.series.length;
            if (null === i2 && (i2 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a2.config.chart.type && a2.config.plotOptions.heatmap && a2.config.plotOptions.heatmap.colorScale.inverse), i2 && a2.globals.series.length && (s2 = a2.globals.series[a2.globals.maxValsInArrayIndex].length * a2.globals.series.length), t3.length < s2) for (var r2 = s2 - t3.length, o2 = 0; o2 < r2; o2++) t3.push(t3[o2]);
          }
        }, {
          key: "updateThemeOptions",
          value: function (t3) {
            t3.chart = t3.chart || {}, t3.tooltip = t3.tooltip || {};
            var e2 = t3.theme.mode,
              i2 = "dark" === e2 ? "palette4" : "light" === e2 ? "palette1" : t3.theme.palette || "palette1",
              a2 = "dark" === e2 ? "#f6f7f8" : "light" === e2 ? "#373d3f" : t3.chart.foreColor || "#373d3f";
            return t3.tooltip.theme = e2 || "light", t3.chart.foreColor = a2, t3.theme.palette = i2, t3;
          }
        }, {
          key: "predefined",
          value: function () {
            var t3 = {
              palette1: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"],
              palette2: ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"],
              palette3: ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"],
              palette4: ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"],
              palette5: ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"],
              palette6: ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"],
              palette7: ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"],
              palette8: ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"],
              palette9: ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"],
              palette10: ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"],
              default: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"]
            };
            return t3[this.w.config.theme.palette] || t3.default;
          }
        }]), t2;
      }(),
      rt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "draw",
          value: function () {
            this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
          }
        }, {
          key: "drawTitleSubtitle",
          value: function (t3) {
            var e2 = this.w,
              i2 = "title" === t3 ? e2.config.title : e2.config.subtitle,
              a2 = e2.globals.svgWidth / 2,
              s2 = i2.offsetY,
              r2 = "middle";
            if ("left" === i2.align ? (a2 = 10, r2 = "start") : "right" === i2.align && (a2 = e2.globals.svgWidth - 10, r2 = "end"), a2 += i2.offsetX, s2 = s2 + parseInt(i2.style.fontSize, 10) + i2.margin / 2, void 0 !== i2.text) {
              var o2 = new k(this.ctx).drawText({
                x: a2,
                y: s2,
                text: i2.text,
                textAnchor: r2,
                fontSize: i2.style.fontSize,
                fontFamily: i2.style.fontFamily,
                fontWeight: i2.style.fontWeight,
                foreColor: i2.style.color,
                opacity: 1
              });
              o2.node.setAttribute("class", "apexcharts-".concat(t3, "-text")), e2.globals.dom.Paper.add(o2);
            }
          }
        }]), t2;
      }(),
      ot = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return s(t2, [{
          key: "getTitleSubtitleCoords",
          value: function (t3) {
            var e2 = this.w,
              i2 = 0,
              a2 = 0,
              s2 = "title" === t3 ? e2.config.title.floating : e2.config.subtitle.floating,
              r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(t3, "-text"));
            if (null !== r2 && !s2) {
              var o2 = r2.getBoundingClientRect();
              i2 = o2.width, a2 = e2.globals.axisCharts ? o2.height + 5 : o2.height;
            }
            return {
              width: i2,
              height: a2
            };
          }
        }, {
          key: "getLegendsRect",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals.dom.elLegendWrap;
            t3.config.legend.height || "top" !== t3.config.legend.position && "bottom" !== t3.config.legend.position || (e2.style.maxHeight = t3.globals.svgHeight / 2 + "px");
            var i2 = Object.assign({}, m.getBoundingClientRect(e2));
            return null !== e2 && !t3.config.legend.floating && t3.config.legend.show ? this.dCtx.lgRect = {
              x: i2.x,
              y: i2.y,
              height: i2.height,
              width: 0 === i2.height ? 0 : i2.width
            } : this.dCtx.lgRect = {
              x: 0,
              y: 0,
              height: 0,
              width: 0
            }, "left" !== t3.config.legend.position && "right" !== t3.config.legend.position || 1.5 * this.dCtx.lgRect.width > t3.globals.svgWidth && (this.dCtx.lgRect.width = t3.globals.svgWidth / 1.5), this.dCtx.lgRect;
          }
        }, {
          key: "getDatalabelsRect",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = [];
            e2.config.series.forEach(function (s3, r3) {
              s3.data.forEach(function (s4, o3) {
                var n2;
                n2 = e2.globals.series[r3][o3], a2 = e2.config.dataLabels.formatter(n2, {
                  ctx: t3.dCtx.ctx,
                  seriesIndex: r3,
                  dataPointIndex: o3,
                  w: e2
                }), i2.push(a2);
              });
            });
            var a2 = m.getLargestStringFromArr(i2),
              s2 = new k(this.dCtx.ctx),
              r2 = e2.config.dataLabels.style,
              o2 = s2.getTextRects(a2, parseInt(r2.fontSize), r2.fontFamily);
            return {
              width: 1.05 * o2.width,
              height: o2.height
            };
          }
        }, {
          key: "getLargestStringFromMultiArr",
          value: function (t3, e2) {
            var i2 = t3;
            if (this.w.globals.isMultiLineX) {
              var a2 = e2.map(function (t4, e3) {
                  return Array.isArray(t4) ? t4.length : 1;
                }),
                s2 = Math.max.apply(Math, p(a2));
              i2 = e2[a2.indexOf(s2)];
            }
            return i2;
          }
        }]), t2;
      }(),
      nt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return s(t2, [{
          key: "getxAxisLabelsCoords",
          value: function () {
            var t3,
              e2 = this.w,
              i2 = e2.globals.labels.slice();
            if (e2.config.xaxis.convertedCatToNumeric && 0 === i2.length && (i2 = e2.globals.categoryLabels), e2.globals.timescaleLabels.length > 0) {
              var a2 = this.getxAxisTimeScaleLabelsCoords();
              t3 = {
                width: a2.width,
                height: a2.height
              }, e2.globals.rotateXLabels = false;
            } else {
              this.dCtx.lgWidthForSideLegends = "left" !== e2.config.legend.position && "right" !== e2.config.legend.position || e2.config.legend.floating ? 0 : this.dCtx.lgRect.width;
              var s2 = e2.globals.xLabelFormatter,
                r2 = m.getLargestStringFromArr(i2),
                o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, i2);
              e2.globals.isBarHorizontal && (o2 = r2 = e2.globals.yAxisScale[0].result.reduce(function (t4, e3) {
                return t4.length > e3.length ? t4 : e3;
              }, 0));
              var n2 = new P(this.dCtx.ctx),
                l2 = r2;
              r2 = n2.xLabelFormat(s2, r2, l2, {
                i: void 0,
                dateFormatter: new L(this.dCtx.ctx).formatDate,
                w: e2
              }), o2 = n2.xLabelFormat(s2, o2, l2, {
                i: void 0,
                dateFormatter: new L(this.dCtx.ctx).formatDate,
                w: e2
              }), (e2.config.xaxis.convertedCatToNumeric && void 0 === r2 || "" === String(r2).trim()) && (o2 = r2 = "1");
              var h2 = new k(this.dCtx.ctx),
                c2 = h2.getTextRects(r2, e2.config.xaxis.labels.style.fontSize),
                d2 = c2;
              if (r2 !== o2 && (d2 = h2.getTextRects(o2, e2.config.xaxis.labels.style.fontSize)), (t3 = {
                width: c2.width >= d2.width ? c2.width : d2.width,
                height: c2.height >= d2.height ? c2.height : d2.height
              }).width * i2.length > e2.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e2.config.xaxis.labels.rotate || e2.config.xaxis.labels.rotateAlways) {
                if (!e2.globals.isBarHorizontal) {
                  e2.globals.rotateXLabels = true;
                  var g2 = function (t4) {
                    return h2.getTextRects(t4, e2.config.xaxis.labels.style.fontSize, e2.config.xaxis.labels.style.fontFamily, "rotate(".concat(e2.config.xaxis.labels.rotate, " 0 0)"), false);
                  };
                  c2 = g2(r2), r2 !== o2 && (d2 = g2(o2)), t3.height = (c2.height > d2.height ? c2.height : d2.height) / 1.5, t3.width = c2.width > d2.width ? c2.width : d2.width;
                }
              } else e2.globals.rotateXLabels = false;
            }
            return e2.config.xaxis.labels.show || (t3 = {
              width: 0,
              height: 0
            }), {
              width: t3.width,
              height: t3.height
            };
          }
        }, {
          key: "getxAxisGroupLabelsCoords",
          value: function () {
            var t3,
              e2 = this.w;
            if (!e2.globals.hasXaxisGroups) return {
              width: 0,
              height: 0
            };
            var i2,
              a2 = (null === (t3 = e2.config.xaxis.group.style) || void 0 === t3 ? void 0 : t3.fontSize) || e2.config.xaxis.labels.style.fontSize,
              s2 = e2.globals.groups.map(function (t4) {
                return t4.title;
              }),
              r2 = m.getLargestStringFromArr(s2),
              o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, s2),
              n2 = new k(this.dCtx.ctx),
              l2 = n2.getTextRects(r2, a2),
              h2 = l2;
            return r2 !== o2 && (h2 = n2.getTextRects(o2, a2)), i2 = {
              width: l2.width >= h2.width ? l2.width : h2.width,
              height: l2.height >= h2.height ? l2.height : h2.height
            }, e2.config.xaxis.labels.show || (i2 = {
              width: 0,
              height: 0
            }), {
              width: i2.width,
              height: i2.height
            };
          }
        }, {
          key: "getxAxisTitleCoords",
          value: function () {
            var t3 = this.w,
              e2 = 0,
              i2 = 0;
            if (void 0 !== t3.config.xaxis.title.text) {
              var a2 = new k(this.dCtx.ctx).getTextRects(t3.config.xaxis.title.text, t3.config.xaxis.title.style.fontSize);
              e2 = a2.width, i2 = a2.height;
            }
            return {
              width: e2,
              height: i2
            };
          }
        }, {
          key: "getxAxisTimeScaleLabelsCoords",
          value: function () {
            var t3,
              e2 = this.w;
            this.dCtx.timescaleLabels = e2.globals.timescaleLabels.slice();
            var i2 = this.dCtx.timescaleLabels.map(function (t4) {
                return t4.value;
              }),
              a2 = i2.reduce(function (t4, e3) {
                return void 0 === t4 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t4.length > e3.length ? t4 : e3;
              }, 0);
            return 1.05 * (t3 = new k(this.dCtx.ctx).getTextRects(a2, e2.config.xaxis.labels.style.fontSize)).width * i2.length > e2.globals.gridWidth && 0 !== e2.config.xaxis.labels.rotate && (e2.globals.overlappingXLabels = true), t3;
          }
        }, {
          key: "additionalPaddingXLabels",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = i2.globals,
              s2 = i2.config,
              r2 = s2.xaxis.type,
              o2 = t3.width;
            a2.skipLastTimelinelabel = false, a2.skipFirstTimelinelabel = false;
            var n2 = i2.config.yaxis[0].opposite && i2.globals.isBarHorizontal,
              l2 = function (t4, n3) {
                s2.yaxis.length > 1 && function (t5) {
                  return -1 !== a2.collapsedSeriesIndices.indexOf(t5);
                }(n3) || function (t5) {
                  if (e2.dCtx.timescaleLabels && e2.dCtx.timescaleLabels.length) {
                    var n4 = e2.dCtx.timescaleLabels[0],
                      l3 = e2.dCtx.timescaleLabels[e2.dCtx.timescaleLabels.length - 1].position + o2 / 1.75 - e2.dCtx.yAxisWidthRight,
                      h2 = n4.position - o2 / 1.75 + e2.dCtx.yAxisWidthLeft,
                      c2 = "right" === i2.config.legend.position && e2.dCtx.lgRect.width > 0 ? e2.dCtx.lgRect.width : 0;
                    l3 > a2.svgWidth - a2.translateX - c2 && (a2.skipLastTimelinelabel = true), h2 < -(t5.show && !t5.floating || "bar" !== s2.chart.type && "candlestick" !== s2.chart.type && "rangeBar" !== s2.chart.type && "boxPlot" !== s2.chart.type ? 10 : o2 / 1.75) && (a2.skipFirstTimelinelabel = true);
                  } else "datetime" === r2 ? e2.dCtx.gridPad.right < o2 && !a2.rotateXLabels && (a2.skipLastTimelinelabel = true) : "datetime" !== r2 && e2.dCtx.gridPad.right < o2 / 2 - e2.dCtx.yAxisWidthRight && !a2.rotateXLabels && !i2.config.xaxis.labels.trim && (e2.dCtx.xPadRight = o2 / 2 + 1);
                }(t4);
              };
            s2.yaxis.forEach(function (t4, i3) {
              n2 ? (e2.dCtx.gridPad.left < o2 && (e2.dCtx.xPadLeft = o2 / 2 + 1), e2.dCtx.xPadRight = o2 / 2 + 1) : l2(t4, i3);
            });
          }
        }]), t2;
      }(),
      lt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return s(t2, [{
          key: "getyAxisLabelsCoords",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = [],
              a2 = 10,
              s2 = new M(this.dCtx.ctx);
            return e2.config.yaxis.map(function (r2, o2) {
              var n2 = {
                  seriesIndex: o2,
                  dataPointIndex: -1,
                  w: e2
                },
                l2 = e2.globals.yAxisScale[o2],
                h2 = 0;
              if (!s2.isYAxisHidden(o2) && r2.labels.show && void 0 !== r2.labels.minWidth && (h2 = r2.labels.minWidth), !s2.isYAxisHidden(o2) && r2.labels.show && l2.result.length) {
                var c2 = e2.globals.yLabelFormatters[o2],
                  d2 = l2.niceMin === Number.MIN_VALUE ? 0 : l2.niceMin,
                  g2 = l2.result.reduce(function (t4, e3) {
                    var i3, a3;
                    return (null === (i3 = String(c2(t4, n2))) || void 0 === i3 ? void 0 : i3.length) > (null === (a3 = String(c2(e3, n2))) || void 0 === a3 ? void 0 : a3.length) ? t4 : e3;
                  }, d2),
                  u2 = g2 = c2(g2, n2);
                if (void 0 !== g2 && 0 !== g2.length || (g2 = l2.niceMax), e2.globals.isBarHorizontal) {
                  a2 = 0;
                  var f2 = e2.globals.labels.slice();
                  g2 = m.getLargestStringFromArr(f2), g2 = c2(g2, {
                    seriesIndex: o2,
                    dataPointIndex: -1,
                    w: e2
                  }), u2 = t3.dCtx.dimHelpers.getLargestStringFromMultiArr(g2, f2);
                }
                var p2 = new k(t3.dCtx.ctx),
                  x2 = "rotate(".concat(r2.labels.rotate, " 0 0)"),
                  b2 = p2.getTextRects(g2, r2.labels.style.fontSize, r2.labels.style.fontFamily, x2, false),
                  v2 = b2;
                g2 !== u2 && (v2 = p2.getTextRects(u2, r2.labels.style.fontSize, r2.labels.style.fontFamily, x2, false)), i2.push({
                  width: (h2 > v2.width || h2 > b2.width ? h2 : v2.width > b2.width ? v2.width : b2.width) + a2,
                  height: v2.height > b2.height ? v2.height : b2.height
                });
              } else i2.push({
                width: 0,
                height: 0
              });
            }), i2;
          }
        }, {
          key: "getyAxisTitleCoords",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = [];
            return e2.config.yaxis.map(function (e3, a2) {
              if (e3.show && void 0 !== e3.title.text) {
                var s2 = new k(t3.dCtx.ctx),
                  r2 = "rotate(".concat(e3.title.rotate, " 0 0)"),
                  o2 = s2.getTextRects(e3.title.text, e3.title.style.fontSize, e3.title.style.fontFamily, r2, false);
                i2.push({
                  width: o2.width,
                  height: o2.height
                });
              } else i2.push({
                width: 0,
                height: 0
              });
            }), i2;
          }
        }, {
          key: "getTotalYAxisWidth",
          value: function () {
            var t3 = this.w,
              e2 = 0,
              i2 = 0,
              a2 = 0,
              s2 = t3.globals.yAxisScale.length > 1 ? 10 : 0,
              r2 = new M(this.dCtx.ctx),
              o2 = function (o3, n2) {
                var l2 = t3.config.yaxis[n2].floating,
                  h2 = 0;
                o3.width > 0 && !l2 ? (h2 = o3.width + s2, function (e3) {
                  return t3.globals.ignoreYAxisIndexes.indexOf(e3) > -1;
                }(n2) && (h2 = h2 - o3.width - s2)) : h2 = l2 || r2.isYAxisHidden(n2) ? 0 : 5, t3.config.yaxis[n2].opposite ? a2 += h2 : i2 += h2, e2 += h2;
              };
            return t3.globals.yLabelsCoords.map(function (t4, e3) {
              o2(t4, e3);
            }), t3.globals.yTitleCoords.map(function (t4, e3) {
              o2(t4, e3);
            }), t3.globals.isBarHorizontal && !t3.config.yaxis[0].floating && (e2 = t3.globals.yLabelsCoords[0].width + t3.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i2, this.dCtx.yAxisWidthRight = a2, e2;
          }
        }]), t2;
      }(),
      ht = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return s(t2, [{
          key: "gridPadForColumnsInNumericAxis",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config,
              a2 = e2.globals;
            if (a2.noData || a2.collapsedSeries.length + a2.ancillaryCollapsedSeries.length === i2.series.length) return 0;
            var s2 = function (t4) {
                return ["bar", "rangeBar", "candlestick", "boxPlot"].includes(t4);
              },
              r2 = i2.chart.type,
              o2 = 0,
              n2 = s2(r2) ? i2.series.length : 1;
            a2.comboBarCount > 0 && (n2 = a2.comboBarCount), a2.collapsedSeries.forEach(function (t4) {
              s2(t4.type) && (n2 -= 1);
            }), i2.chart.stacked && (n2 = 1);
            var l2 = s2(r2) || a2.comboBarCount > 0,
              h2 = Math.abs(a2.initialMaxX - a2.initialMinX);
            if (l2 && a2.isXNumeric && !a2.isBarHorizontal && n2 > 0 && 0 !== h2) {
              h2 <= 3 && (h2 = a2.dataPoints);
              var c2 = h2 / t3,
                d2 = a2.minXDiff && a2.minXDiff / c2 > 0 ? a2.minXDiff / c2 : 0;
              d2 > t3 / 2 && (d2 /= 2), (o2 = d2 * parseInt(i2.plotOptions.bar.columnWidth, 10) / 100) < 1 && (o2 = 1), a2.barPadForNumericAxis = o2;
            }
            return o2;
          }
        }, {
          key: "gridPadFortitleSubtitle",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = e2.globals,
              a2 = this.dCtx.isSparkline || !i2.axisCharts ? 0 : 10;
            ["title", "subtitle"].forEach(function (s3) {
              void 0 !== e2.config[s3].text ? a2 += e2.config[s3].margin : a2 += t3.dCtx.isSparkline || !i2.axisCharts ? 0 : 5;
            }), !e2.config.legend.show || "bottom" !== e2.config.legend.position || e2.config.legend.floating || i2.axisCharts || (a2 += 10);
            var s2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
              r2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
            i2.gridHeight -= s2.height + r2.height + a2, i2.translateY += s2.height + r2.height + a2;
          }
        }, {
          key: "setGridXPosForDualYAxis",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new M(this.dCtx.ctx);
            i2.config.yaxis.forEach(function (s2, r2) {
              -1 !== i2.globals.ignoreYAxisIndexes.indexOf(r2) || s2.floating || a2.isYAxisHidden(r2) || (s2.opposite && (i2.globals.translateX -= e2[r2].width + t3[r2].width + parseInt(s2.labels.style.fontSize, 10) / 1.2 + 12), i2.globals.translateX < 2 && (i2.globals.translateX = 2));
            });
          }
        }]), t2;
      }(),
      ct = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new ot(this), this.dimYAxis = new lt(this), this.dimXAxis = new nt(this), this.dimGrid = new ht(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
        }
        return s(t2, [{
          key: "plotCoords",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = e2.globals;
            this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = {
              width: 0,
              height: 0
            };
            var a2 = Array.isArray(e2.config.stroke.width) ? Math.max.apply(Math, p(e2.config.stroke.width)) : e2.config.stroke.width;
            this.isSparkline && ((e2.config.markers.discrete.length > 0 || e2.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function (e3) {
              var i3 = f(e3, 2),
                a3 = i3[0],
                s3 = i3[1];
              t3.gridPad[a3] = Math.max(s3, t3.w.globals.markers.largestSize / 1.5);
            }), this.gridPad.top = Math.max(a2 / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a2 / 2, this.gridPad.bottom)), i2.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i2.gridHeight = i2.gridHeight - this.gridPad.top - this.gridPad.bottom, i2.gridWidth = i2.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
            var s2 = this.dimGrid.gridPadForColumnsInNumericAxis(i2.gridWidth);
            i2.gridWidth = i2.gridWidth - 2 * s2, i2.translateX = i2.translateX + this.gridPad.left + this.xPadLeft + (s2 > 0 ? s2 : 0), i2.translateY = i2.translateY + this.gridPad.top;
          }
        }, {
          key: "setDimensionsForAxisCharts",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = e2.globals,
              a2 = this.dimYAxis.getyAxisLabelsCoords(),
              s2 = this.dimYAxis.getyAxisTitleCoords();
            i2.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e2.globals.yLabelsCoords = [], e2.globals.yTitleCoords = [], e2.config.yaxis.map(function (t4, i3) {
              e2.globals.yLabelsCoords.push({
                width: a2[i3].width,
                index: i3
              }), e2.globals.yTitleCoords.push({
                width: s2[i3].width,
                index: i3
              });
            }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
            var r2 = this.dimXAxis.getxAxisLabelsCoords(),
              o2 = this.dimXAxis.getxAxisGroupLabelsCoords(),
              n2 = this.dimXAxis.getxAxisTitleCoords();
            this.conditionalChecksForAxisCoords(r2, n2, o2), i2.translateXAxisY = e2.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i2.translateXAxisX = e2.globals.rotateXLabels && e2.globals.isXNumeric && e2.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e2.globals.isBarHorizontal && (i2.rotateXLabels = false, i2.translateXAxisY = parseInt(e2.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i2.translateXAxisY = i2.translateXAxisY + e2.config.xaxis.labels.offsetY, i2.translateXAxisX = i2.translateXAxisX + e2.config.xaxis.labels.offsetX;
            var l2 = this.yAxisWidth,
              h2 = this.xAxisHeight;
            i2.xAxisLabelsHeight = this.xAxisHeight - n2.height, i2.xAxisGroupLabelsHeight = i2.xAxisLabelsHeight - r2.height, i2.xAxisLabelsWidth = this.xAxisWidth, i2.xAxisHeight = this.xAxisHeight;
            var c2 = 10;
            ("radar" === e2.config.chart.type || this.isSparkline) && (l2 = 0, h2 = 0), this.isSparkline && (this.lgRect = {
              height: 0,
              width: 0
            }), (this.isSparkline || "treemap" === e2.config.chart.type) && (l2 = 0, h2 = 0, c2 = 0), this.isSparkline || "treemap" === e2.config.chart.type || this.dimXAxis.additionalPaddingXLabels(r2);
            var d2 = function () {
              i2.translateX = l2 + t3.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - t3.lgRect.height - h2 - (t3.isSparkline || "treemap" === e2.config.chart.type ? 0 : e2.globals.rotateXLabels ? 10 : 15), i2.gridWidth = i2.svgWidth - l2 - 2 * t3.datalabelsCoords.width;
            };
            switch ("top" === e2.config.xaxis.position && (c2 = i2.xAxisHeight - e2.config.xaxis.axisTicks.height - 5), e2.config.legend.position) {
              case "bottom":
                i2.translateY = c2, d2();
                break;
              case "top":
                i2.translateY = this.lgRect.height + c2, d2();
                break;
              case "left":
                i2.translateY = c2, i2.translateX = this.lgRect.width + l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width;
                break;
              case "right":
                i2.translateY = c2, i2.translateX = l2 + this.datalabelsCoords.width, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 2 * this.datalabelsCoords.width - 5;
                break;
              default:
                throw new Error("Legend position not supported");
            }
            this.dimGrid.setGridXPosForDualYAxis(s2, a2), new Q(this.ctx).setYAxisXPosition(a2, s2);
          }
        }, {
          key: "setDimensionsForNonAxisCharts",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = t3.config,
              a2 = 0;
            t3.config.legend.show && !t3.config.legend.floating && (a2 = 20);
            var s2 = "pie" === i2.chart.type || "polarArea" === i2.chart.type || "donut" === i2.chart.type ? "pie" : "radialBar",
              r2 = i2.plotOptions[s2].offsetY,
              o2 = i2.plotOptions[s2].offsetX;
            if (!i2.legend.show || i2.legend.floating) {
              e2.gridHeight = e2.svgHeight;
              var n2 = e2.dom.elWrap.getBoundingClientRect().width;
              return e2.gridWidth = Math.min(n2, e2.gridHeight), e2.translateY = r2, void (e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2);
            }
            switch (i2.legend.position) {
              case "bottom":
                e2.gridHeight = e2.svgHeight - this.lgRect.height, e2.gridWidth = e2.svgWidth, e2.translateY = r2 - 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
                break;
              case "top":
                e2.gridHeight = e2.svgHeight - this.lgRect.height, e2.gridWidth = e2.svgWidth, e2.translateY = this.lgRect.height + r2 + 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
                break;
              case "left":
                e2.gridWidth = e2.svgWidth - this.lgRect.width - a2, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + this.lgRect.width + a2;
                break;
              case "right":
                e2.gridWidth = e2.svgWidth - this.lgRect.width - a2 - 5, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + 10;
                break;
              default:
                throw new Error("Legend position not supported");
            }
          }
        }, {
          key: "conditionalChecksForAxisCoords",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = a2.globals.hasXaxisGroups ? 2 : 1,
              r2 = i2.height + t3.height + e2.height,
              o2 = a2.globals.isMultiLineX ? 1.2 : a2.globals.LINE_HEIGHT_RATIO,
              n2 = a2.globals.rotateXLabels ? 22 : 10,
              l2 = a2.globals.rotateXLabels && "bottom" === a2.config.legend.position ? 10 : 0;
            this.xAxisHeight = r2 * o2 + s2 * n2 + l2, this.xAxisWidth = t3.width, this.xAxisHeight - e2.height > a2.config.xaxis.labels.maxHeight && (this.xAxisHeight = a2.config.xaxis.labels.maxHeight), a2.config.xaxis.labels.minHeight && this.xAxisHeight < a2.config.xaxis.labels.minHeight && (this.xAxisHeight = a2.config.xaxis.labels.minHeight), a2.config.xaxis.floating && (this.xAxisHeight = 0);
            var h2 = 0,
              c2 = 0;
            a2.config.yaxis.forEach(function (t4) {
              h2 += t4.labels.minWidth, c2 += t4.labels.maxWidth;
            }), this.yAxisWidth < h2 && (this.yAxisWidth = h2), this.yAxisWidth > c2 && (this.yAxisWidth = c2);
          }
        }]), t2;
      }(),
      dt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.lgCtx = e2;
        }
        return s(t2, [{
          key: "getLegendStyles",
          value: function () {
            var t3,
              e2,
              i2,
              a2 = document.createElement("style");
            a2.setAttribute("type", "text/css");
            var s2 = (null === (t3 = this.lgCtx.ctx) || void 0 === t3 || null === (e2 = t3.opts) || void 0 === e2 || null === (i2 = e2.chart) || void 0 === i2 ? void 0 : i2.nonce) || this.w.config.chart.nonce;
            s2 && a2.setAttribute("nonce", s2);
            var r2 = document.createTextNode("\n      .apexcharts-flip-y {\n        transform: scaleY(-1) translateY(-100%);\n        transform-origin: top;\n        transform-box: fill-box;\n      }\n      .apexcharts-flip-x {\n        transform: scaleX(-1);\n        transform-origin: center;\n        transform-box: fill-box;\n      }\n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        justify-content: flex-start;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\n        justify-content: center;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\n        justify-content: flex-end;\n      }\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n        display: flex;\n        align-items: center;\n      }\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n      .apexcharts-legend-marker {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        margin-right: 1px;\n      }\n\n      .apexcharts-legend-series.apexcharts-no-click {\n        cursor: auto;\n      }\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n      .apexcharts-inactive-legend {\n        opacity: 0.45;\n      }");
            return a2.appendChild(r2), a2;
          }
        }, {
          key: "getLegendDimensions",
          value: function () {
            var t3 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),
              e2 = t3.width;
            return {
              clwh: t3.height,
              clww: e2
            };
          }
        }, {
          key: "appendToForeignObject",
          value: function () {
            this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
          }
        }, {
          key: "toggleDataSeries",
          value: function (t3, e2) {
            var i2 = this,
              a2 = this.w;
            if (a2.globals.axisCharts || "radialBar" === a2.config.chart.type) {
              a2.globals.resized = true;
              var s2 = null,
                r2 = null;
              if (a2.globals.risingSeries = [], a2.globals.axisCharts ? (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t3, "']")), r2 = parseInt(s2.getAttribute("data:realIndex"), 10)) : (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t3 + 1, "']")), r2 = parseInt(s2.getAttribute("rel"), 10) - 1), e2) [{
                cs: a2.globals.collapsedSeries,
                csi: a2.globals.collapsedSeriesIndices
              }, {
                cs: a2.globals.ancillaryCollapsedSeries,
                csi: a2.globals.ancillaryCollapsedSeriesIndices
              }].forEach(function (t4) {
                i2.riseCollapsedSeries(t4.cs, t4.csi, r2);
              });else this.hideSeries({
                seriesEl: s2,
                realIndex: r2
              });
            } else {
              var o2 = a2.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t3 + 1, "'] path")),
                n2 = a2.config.chart.type;
              if ("pie" === n2 || "polarArea" === n2 || "donut" === n2) {
                var l2 = a2.config.plotOptions.pie.donut.labels;
                new k(this.lgCtx.ctx).pathMouseDown(o2.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o2.members[0].node, l2);
              }
              o2.fire("click");
            }
          }
        }, {
          key: "getSeriesAfterCollapsing",
          value: function (t3) {
            var e2 = t3.realIndex,
              i2 = this.w,
              a2 = i2.globals,
              s2 = m.clone(i2.config.series);
            if (a2.axisCharts) {
              var r2 = i2.config.yaxis[a2.seriesYAxisReverseMap[e2]],
                o2 = {
                  index: e2,
                  data: s2[e2].data.slice(),
                  type: s2[e2].type || i2.config.chart.type
                };
              if (r2 && r2.show && r2.showAlways) a2.ancillaryCollapsedSeriesIndices.indexOf(e2) < 0 && (a2.ancillaryCollapsedSeries.push(o2), a2.ancillaryCollapsedSeriesIndices.push(e2));else if (a2.collapsedSeriesIndices.indexOf(e2) < 0) {
                a2.collapsedSeries.push(o2), a2.collapsedSeriesIndices.push(e2);
                var n2 = a2.risingSeries.indexOf(e2);
                a2.risingSeries.splice(n2, 1);
              }
            } else a2.collapsedSeries.push({
              index: e2,
              data: s2[e2]
            }), a2.collapsedSeriesIndices.push(e2);
            return a2.allSeriesCollapsed = a2.collapsedSeries.length + a2.ancillaryCollapsedSeries.length === i2.config.series.length, this._getSeriesBasedOnCollapsedState(s2);
          }
        }, {
          key: "hideSeries",
          value: function (t3) {
            for (var e2 = t3.seriesEl, i2 = t3.realIndex, a2 = this.w, s2 = this.getSeriesAfterCollapsing({
                realIndex: i2
              }), r2 = e2.childNodes, o2 = 0; o2 < r2.length; o2++) r2[o2].classList.contains("apexcharts-series-markers-wrap") && (r2[o2].classList.contains("apexcharts-hide") ? r2[o2].classList.remove("apexcharts-hide") : r2[o2].classList.add("apexcharts-hide"));
            this.lgCtx.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled);
          }
        }, {
          key: "riseCollapsedSeries",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = m.clone(a2.config.series);
            if (t3.length > 0) {
              for (var r2 = 0; r2 < t3.length; r2++) t3[r2].index === i2 && (a2.globals.axisCharts ? s2[i2].data = t3[r2].data.slice() : s2[i2] = t3[r2].data, s2[i2].hidden = false, t3.splice(r2, 1), e2.splice(r2, 1), a2.globals.risingSeries.push(i2));
              s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled);
            }
          }
        }, {
          key: "_getSeriesBasedOnCollapsedState",
          value: function (t3) {
            var e2 = this.w,
              i2 = 0;
            return e2.globals.axisCharts ? t3.forEach(function (a2, s2) {
              e2.globals.collapsedSeriesIndices.indexOf(s2) < 0 && e2.globals.ancillaryCollapsedSeriesIndices.indexOf(s2) < 0 || (t3[s2].data = [], i2++);
            }) : t3.forEach(function (a2, s2) {
              !e2.globals.collapsedSeriesIndices.indexOf(s2) < 0 && (t3[s2] = 0, i2++);
            }), e2.globals.allSeriesCollapsed = i2 === t3.length, t3;
          }
        }]), t2;
      }(),
      gt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new dt(this);
        }
        return s(t2, [{
          key: "init",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = t3.config,
              a2 = i2.legend.showForSingleSeries && 1 === e2.series.length || this.isBarsDistributed || e2.series.length > 1;
            if (this.legendHelpers.appendToForeignObject(), (a2 || !e2.axisCharts) && i2.legend.show) {
              for (; e2.dom.elLegendWrap.firstChild;) e2.dom.elLegendWrap.removeChild(e2.dom.elLegendWrap.firstChild);
              this.drawLegends(), "bottom" === i2.legend.position || "top" === i2.legend.position ? this.legendAlignHorizontal() : "right" !== i2.legend.position && "left" !== i2.legend.position || this.legendAlignVertical();
            }
          }
        }, {
          key: "createLegendMarker",
          value: function (t3) {
            var e2 = t3.i,
              i2 = t3.fillcolor,
              a2 = this.w,
              s2 = document.createElement("span");
            s2.classList.add("apexcharts-legend-marker");
            var r2 = a2.config.legend.markers.shape || a2.config.markers.shape,
              o2 = r2;
            Array.isArray(r2) && (o2 = r2[e2]);
            var n2 = Array.isArray(a2.config.legend.markers.size) ? parseFloat(a2.config.legend.markers.size[e2]) : parseFloat(a2.config.legend.markers.size),
              l2 = Array.isArray(a2.config.legend.markers.offsetX) ? parseFloat(a2.config.legend.markers.offsetX[e2]) : parseFloat(a2.config.legend.markers.offsetX),
              h2 = Array.isArray(a2.config.legend.markers.offsetY) ? parseFloat(a2.config.legend.markers.offsetY[e2]) : parseFloat(a2.config.legend.markers.offsetY),
              c2 = Array.isArray(a2.config.legend.markers.strokeWidth) ? parseFloat(a2.config.legend.markers.strokeWidth[e2]) : parseFloat(a2.config.legend.markers.strokeWidth),
              d2 = s2.style;
            if (d2.height = 2 * (n2 + c2) + "px", d2.width = 2 * (n2 + c2) + "px", d2.left = l2 + "px", d2.top = h2 + "px", a2.config.legend.markers.customHTML) d2.background = "transparent", d2.color = i2[e2], Array.isArray(a2.config.legend.markers.customHTML) ? a2.config.legend.markers.customHTML[e2] && (s2.innerHTML = a2.config.legend.markers.customHTML[e2]()) : s2.innerHTML = a2.config.legend.markers.customHTML();else {
              var u2 = new W(this.ctx).getMarkerConfig({
                  cssClass: "apexcharts-legend-marker apexcharts-marker apexcharts-marker-".concat(o2),
                  seriesIndex: e2,
                  strokeWidth: c2,
                  size: n2
                }),
                f2 = SVG(s2).size("100%", "100%"),
                p2 = new k(this.ctx).drawMarker(0, 0, g(g({}, u2), {}, {
                  pointFillColor: Array.isArray(i2) ? i2[e2] : u2.pointFillColor,
                  shape: o2
                }));
              SVG.select(".apexcharts-legend-marker.apexcharts-marker").members.forEach(function (t4) {
                t4.node.classList.contains("apexcharts-marker-triangle") ? t4.node.style.transform = "translate(50%, 45%)" : t4.node.style.transform = "translate(50%, 50%)";
              }), f2.add(p2);
            }
            return s2;
          }
        }, {
          key: "drawLegends",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = e2.config.legend.fontFamily,
              a2 = e2.globals.seriesNames,
              s2 = e2.config.legend.markers.fillColors ? e2.config.legend.markers.fillColors.slice() : e2.globals.colors.slice();
            if ("heatmap" === e2.config.chart.type) {
              var r2 = e2.config.plotOptions.heatmap.colorScale.ranges;
              a2 = r2.map(function (t4) {
                return t4.name ? t4.name : t4.from + " - " + t4.to;
              }), s2 = r2.map(function (t4) {
                return t4.color;
              });
            } else this.isBarsDistributed && (a2 = e2.globals.labels.slice());
            e2.config.legend.customLegendItems.length && (a2 = e2.config.legend.customLegendItems);
            for (var o2 = e2.globals.legendFormatter, n2 = e2.config.legend.inverseOrder, l2 = n2 ? a2.length - 1 : 0; n2 ? l2 >= 0 : l2 <= a2.length - 1; n2 ? l2-- : l2++) {
              var h2,
                c2 = o2(a2[l2], {
                  seriesIndex: l2,
                  w: e2
                }),
                d2 = false,
                g2 = false;
              if (e2.globals.collapsedSeries.length > 0) for (var u2 = 0; u2 < e2.globals.collapsedSeries.length; u2++) e2.globals.collapsedSeries[u2].index === l2 && (d2 = true);
              if (e2.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var f2 = 0; f2 < e2.globals.ancillaryCollapsedSeriesIndices.length; f2++) e2.globals.ancillaryCollapsedSeriesIndices[f2] === l2 && (g2 = true);
              var p2 = this.createLegendMarker({
                i: l2,
                fillcolor: s2
              });
              k.setAttrs(p2, {
                rel: l2 + 1,
                "data:collapsed": d2 || g2
              }), (d2 || g2) && p2.classList.add("apexcharts-inactive-legend");
              var x2 = document.createElement("div"),
                b2 = document.createElement("span");
              b2.classList.add("apexcharts-legend-text"), b2.innerHTML = Array.isArray(c2) ? c2.join(" ") : c2;
              var v2 = e2.config.legend.labels.useSeriesColors ? e2.globals.colors[l2] : Array.isArray(e2.config.legend.labels.colors) ? null === (h2 = e2.config.legend.labels.colors) || void 0 === h2 ? void 0 : h2[l2] : e2.config.legend.labels.colors;
              v2 || (v2 = e2.config.chart.foreColor), b2.style.color = v2, b2.style.fontSize = parseFloat(e2.config.legend.fontSize) + "px", b2.style.fontWeight = e2.config.legend.fontWeight, b2.style.fontFamily = i2 || e2.config.chart.fontFamily, k.setAttrs(b2, {
                rel: l2 + 1,
                i: l2,
                "data:default-text": encodeURIComponent(c2),
                "data:collapsed": d2 || g2
              }), x2.appendChild(p2), x2.appendChild(b2);
              var y2 = new A(this.ctx);
              if (!e2.config.legend.showForZeroSeries) 0 === y2.getSeriesTotalByIndex(l2) && y2.seriesHaveSameValues(l2) && !y2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && x2.classList.add("apexcharts-hidden-zero-series");
              e2.config.legend.showForNullSeries || y2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && x2.classList.add("apexcharts-hidden-null-series"), e2.globals.dom.elLegendWrap.appendChild(x2), e2.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e2.config.legend.horizontalAlign)), e2.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e2.config.legend.position), x2.classList.add("apexcharts-legend-series"), x2.style.margin = "".concat(e2.config.legend.itemMargin.vertical, "px ").concat(e2.config.legend.itemMargin.horizontal, "px"), e2.globals.dom.elLegendWrap.style.width = e2.config.legend.width ? e2.config.legend.width + "px" : "", e2.globals.dom.elLegendWrap.style.height = e2.config.legend.height ? e2.config.legend.height + "px" : "", k.setAttrs(x2, {
                rel: l2 + 1,
                seriesName: m.escapeString(a2[l2]),
                "data:collapsed": d2 || g2
              }), (d2 || g2) && x2.classList.add("apexcharts-inactive-legend"), e2.config.legend.onItemClick.toggleDataSeries || x2.classList.add("apexcharts-no-click");
            }
            e2.globals.dom.elWrap.addEventListener("click", t3.onLegendClick, true), e2.config.legend.onItemHover.highlightDataSeries && 0 === e2.config.legend.customLegendItems.length && (e2.globals.dom.elWrap.addEventListener("mousemove", t3.onLegendHovered, true), e2.globals.dom.elWrap.addEventListener("mouseout", t3.onLegendHovered, true));
          }
        }, {
          key: "setLegendWrapXY",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = i2.globals.dom.elLegendWrap,
              s2 = a2.clientHeight,
              r2 = 0,
              o2 = 0;
            if ("bottom" === i2.config.legend.position) o2 = i2.globals.svgHeight - Math.min(s2, i2.globals.svgHeight / 2) - 5;else if ("top" === i2.config.legend.position) {
              var n2 = new ct(this.ctx),
                l2 = n2.dimHelpers.getTitleSubtitleCoords("title").height,
                h2 = n2.dimHelpers.getTitleSubtitleCoords("subtitle").height;
              o2 = (l2 > 0 ? l2 - 10 : 0) + (h2 > 0 ? h2 - 10 : 0);
            }
            a2.style.position = "absolute", r2 = r2 + t3 + i2.config.legend.offsetX, o2 = o2 + e2 + i2.config.legend.offsetY, a2.style.left = r2 + "px", a2.style.top = o2 + "px", "right" === i2.config.legend.position && (a2.style.left = "auto", a2.style.right = 25 + i2.config.legend.offsetX + "px");
            ["width", "height"].forEach(function (t4) {
              a2.style[t4] && (a2.style[t4] = parseInt(i2.config.legend[t4], 10) + "px");
            });
          }
        }, {
          key: "legendAlignHorizontal",
          value: function () {
            var t3 = this.w;
            t3.globals.dom.elLegendWrap.style.right = 0;
            var e2 = new ct(this.ctx),
              i2 = e2.dimHelpers.getTitleSubtitleCoords("title"),
              a2 = e2.dimHelpers.getTitleSubtitleCoords("subtitle"),
              s2 = 0;
            "top" === t3.config.legend.position && (s2 = i2.height + a2.height + t3.config.title.margin + t3.config.subtitle.margin - 10), this.setLegendWrapXY(20, s2);
          }
        }, {
          key: "legendAlignVertical",
          value: function () {
            var t3 = this.w,
              e2 = this.legendHelpers.getLegendDimensions(),
              i2 = 0;
            "left" === t3.config.legend.position && (i2 = 20), "right" === t3.config.legend.position && (i2 = t3.globals.svgWidth - e2.clww - 10), this.setLegendWrapXY(i2, 20);
          }
        }, {
          key: "onLegendHovered",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3.target.classList.contains("apexcharts-legend-series") || t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker");
            if ("heatmap" === e2.config.chart.type || this.isBarsDistributed) {
              if (i2) {
                var a2 = parseInt(t3.target.getAttribute("rel"), 10) - 1;
                this.ctx.events.fireEvent("legendHover", [this.ctx, a2, this.w]), new V(this.ctx).highlightRangeInSeries(t3, t3.target);
              }
            } else !t3.target.classList.contains("apexcharts-inactive-legend") && i2 && new V(this.ctx).toggleSeriesOnHover(t3, t3.target);
          }
        }, {
          key: "onLegendClick",
          value: function (t3) {
            var e2 = this.w;
            if (!e2.config.legend.customLegendItems.length && (t3.target.classList.contains("apexcharts-legend-series") || t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker"))) {
              var i2 = parseInt(t3.target.getAttribute("rel"), 10) - 1,
                a2 = "true" === t3.target.getAttribute("data:collapsed"),
                s2 = this.w.config.chart.events.legendClick;
              "function" == typeof s2 && s2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i2, this.w]);
              var r2 = this.w.config.legend.markers.onClick;
              "function" == typeof r2 && t3.target.classList.contains("apexcharts-legend-marker") && (r2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i2, this.w])), "treemap" !== e2.config.chart.type && "heatmap" !== e2.config.chart.type && !this.isBarsDistributed && e2.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i2, a2);
            }
          }
        }]), t2;
      }(),
      ut = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
          var a2 = this.w;
          this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = a2.globals.minX, this.maxX = a2.globals.maxX;
        }
        return s(t2, [{
          key: "createToolbar",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = function () {
                return document.createElement("div");
              },
              a2 = i2();
            if (a2.setAttribute("class", "apexcharts-toolbar"), a2.style.top = e2.config.chart.toolbar.offsetY + "px", a2.style.right = 3 - e2.config.chart.toolbar.offsetX + "px", e2.globals.dom.elWrap.appendChild(a2), this.elZoom = i2(), this.elZoomIn = i2(), this.elZoomOut = i2(), this.elPan = i2(), this.elSelection = i2(), this.elZoomReset = i2(), this.elMenuIcon = i2(), this.elMenu = i2(), this.elCustomIcons = [], this.t = e2.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var s2 = 0; s2 < this.t.customIcons.length; s2++) this.elCustomIcons.push(i2());
            var r2 = [],
              o2 = function (i3, a3, s3) {
                var o3 = i3.toLowerCase();
                t3.t[o3] && e2.config.chart.zoom.enabled && r2.push({
                  el: a3,
                  icon: "string" == typeof t3.t[o3] ? t3.t[o3] : s3,
                  title: t3.localeValues[i3],
                  class: "apexcharts-".concat(o3, "-icon")
                });
              };
            o2("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o2("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
            var n2 = function (i3) {
              t3.t[i3] && e2.config.chart[i3].enabled && r2.push({
                el: "zoom" === i3 ? t3.elZoom : t3.elSelection,
                icon: "string" == typeof t3.t[i3] ? t3.t[i3] : "zoom" === i3 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                title: t3.localeValues["zoom" === i3 ? "selectionZoom" : "selection"],
                class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i3, "-icon")
              });
            };
            n2("zoom"), n2("selection"), this.t.pan && e2.config.chart.zoom.enabled && r2.push({
              el: this.elPan,
              icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
              title: this.localeValues.pan,
              class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon"
            }), o2("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r2.push({
              el: this.elMenuIcon,
              icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
              title: this.localeValues.menu,
              class: "apexcharts-menu-icon"
            });
            for (var l2 = 0; l2 < this.elCustomIcons.length; l2++) r2.push({
              el: this.elCustomIcons[l2],
              icon: this.t.customIcons[l2].icon,
              title: this.t.customIcons[l2].title,
              index: this.t.customIcons[l2].index,
              class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l2].class
            });
            r2.forEach(function (t4, e3) {
              t4.index && m.moveIndexInArray(r2, e3, t4.index);
            });
            for (var h2 = 0; h2 < r2.length; h2++) k.setAttrs(r2[h2].el, {
              class: r2[h2].class,
              title: r2[h2].title
            }), r2[h2].el.innerHTML = r2[h2].icon, a2.appendChild(r2[h2].el);
            this._createHamburgerMenu(a2), e2.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e2.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e2.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
          }
        }, {
          key: "_createHamburgerMenu",
          value: function (t3) {
            this.elMenuItems = [], t3.appendChild(this.elMenu), k.setAttrs(this.elMenu, {
              class: "apexcharts-menu"
            });
            for (var e2 = [{
                name: "exportSVG",
                title: this.localeValues.exportToSVG
              }, {
                name: "exportPNG",
                title: this.localeValues.exportToPNG
              }, {
                name: "exportCSV",
                title: this.localeValues.exportToCSV
              }], i2 = 0; i2 < e2.length; i2++) this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i2].innerHTML = e2[i2].title, k.setAttrs(this.elMenuItems[i2], {
              class: "apexcharts-menu-item ".concat(e2[i2].name),
              title: e2[i2].title
            }), this.elMenu.appendChild(this.elMenuItems[i2]);
          }
        }, {
          key: "addToolbarEventListeners",
          value: function () {
            var t3 = this;
            this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e3) {
              e3.classList.contains("exportSVG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "svg")) : e3.classList.contains("exportPNG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "png")) : e3.classList.contains("exportCSV") && e3.addEventListener("click", t3.handleDownload.bind(t3, "csv"));
            });
            for (var e2 = 0; e2 < this.t.customIcons.length; e2++) this.elCustomIcons[e2].addEventListener("click", this.t.customIcons[e2].click.bind(this, this.ctx, this.ctx.w));
          }
        }, {
          key: "toggleZoomSelection",
          value: function (t3) {
            this.ctx.getSyncedCharts().forEach(function (e2) {
              e2.ctx.toolbar.toggleOtherControls();
              var i2 = "selection" === t3 ? e2.ctx.toolbar.elSelection : e2.ctx.toolbar.elZoom,
                a2 = "selection" === t3 ? "selectionEnabled" : "zoomEnabled";
              e2.w.globals[a2] = !e2.w.globals[a2], i2.classList.contains(e2.ctx.toolbar.selectedClass) ? i2.classList.remove(e2.ctx.toolbar.selectedClass) : i2.classList.add(e2.ctx.toolbar.selectedClass);
            });
          }
        }, {
          key: "getToolbarIconsReference",
          value: function () {
            var t3 = this.w;
            this.elZoom || (this.elZoom = t3.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t3.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t3.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
          }
        }, {
          key: "enableZoomPanFromToolbar",
          value: function (t3) {
            this.toggleOtherControls(), "pan" === t3 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
            var e2 = "pan" === t3 ? this.elPan : this.elZoom,
              i2 = "pan" === t3 ? this.elZoom : this.elPan;
            e2 && e2.classList.add(this.selectedClass), i2 && i2.classList.remove(this.selectedClass);
          }
        }, {
          key: "togglePanning",
          value: function () {
            this.ctx.getSyncedCharts().forEach(function (t3) {
              t3.ctx.toolbar.toggleOtherControls(), t3.w.globals.panEnabled = !t3.w.globals.panEnabled, t3.ctx.toolbar.elPan.classList.contains(t3.ctx.toolbar.selectedClass) ? t3.ctx.toolbar.elPan.classList.remove(t3.ctx.toolbar.selectedClass) : t3.ctx.toolbar.elPan.classList.add(t3.ctx.toolbar.selectedClass);
            });
          }
        }, {
          key: "toggleOtherControls",
          value: function () {
            var t3 = this,
              e2 = this.w;
            e2.globals.panEnabled = false, e2.globals.zoomEnabled = false, e2.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function (e3) {
              e3 && e3.classList.remove(t3.selectedClass);
            });
          }
        }, {
          key: "handleZoomIn",
          value: function () {
            var t3 = this.w;
            t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY);
            var e2 = (this.minX + this.maxX) / 2,
              i2 = (this.minX + e2) / 2,
              a2 = (this.maxX + e2) / 2,
              s2 = this._getNewMinXMaxX(i2, a2);
            t3.globals.disableZoomIn || this.zoomUpdateOptions(s2.minX, s2.maxX);
          }
        }, {
          key: "handleZoomOut",
          value: function () {
            var t3 = this.w;
            if (t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY), !("datetime" === t3.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
              var e2 = (this.minX + this.maxX) / 2,
                i2 = this.minX - (e2 - this.minX),
                a2 = this.maxX - (e2 - this.maxX),
                s2 = this._getNewMinXMaxX(i2, a2);
              t3.globals.disableZoomOut || this.zoomUpdateOptions(s2.minX, s2.maxX);
            }
          }
        }, {
          key: "_getNewMinXMaxX",
          value: function (t3, e2) {
            var i2 = this.w.config.xaxis.convertedCatToNumeric;
            return {
              minX: i2 ? Math.floor(t3) : t3,
              maxX: i2 ? Math.floor(e2) : e2
            };
          }
        }, {
          key: "zoomUpdateOptions",
          value: function (t3, e2) {
            var i2 = this.w;
            if (void 0 !== t3 || void 0 !== e2) {
              if (!(i2.config.xaxis.convertedCatToNumeric && (t3 < 1 && (t3 = 1, e2 = i2.globals.dataPoints), e2 - t3 < 2))) {
                var a2 = {
                    min: t3,
                    max: e2
                  },
                  s2 = this.getBeforeZoomRange(a2);
                s2 && (a2 = s2.xaxis);
                var r2 = {
                    xaxis: a2
                  },
                  o2 = m.clone(i2.globals.initialConfig.yaxis);
                i2.config.chart.group || (r2.yaxis = o2), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r2, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a2, o2);
              }
            } else this.handleZoomReset();
          }
        }, {
          key: "zoomCallback",
          value: function (t3, e2) {
            "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
              xaxis: t3,
              yaxis: e2
            });
          }
        }, {
          key: "getBeforeZoomRange",
          value: function (t3, e2) {
            var i2 = null;
            return "function" == typeof this.ev.beforeZoom && (i2 = this.ev.beforeZoom(this, {
              xaxis: t3,
              yaxis: e2
            })), i2;
          }
        }, {
          key: "toggleMenu",
          value: function () {
            var t3 = this;
            window.setTimeout(function () {
              t3.elMenu.classList.contains("apexcharts-menu-open") ? t3.elMenu.classList.remove("apexcharts-menu-open") : t3.elMenu.classList.add("apexcharts-menu-open");
            }, 0);
          }
        }, {
          key: "handleDownload",
          value: function (t3) {
            var e2 = this.w,
              i2 = new U(this.ctx);
            switch (t3) {
              case "svg":
                i2.exportToSVG(this.ctx);
                break;
              case "png":
                i2.exportToPng(this.ctx);
                break;
              case "csv":
                i2.exportToCSV({
                  series: e2.config.series,
                  columnDelimiter: e2.config.chart.toolbar.export.csv.columnDelimiter
                });
            }
          }
        }, {
          key: "handleZoomReset",
          value: function (t3) {
            this.ctx.getSyncedCharts().forEach(function (t4) {
              var e2 = t4.w;
              if (e2.globals.lastXAxis.min = e2.globals.initialConfig.xaxis.min, e2.globals.lastXAxis.max = e2.globals.initialConfig.xaxis.max, t4.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e2.config.chart.events.beforeResetZoom) {
                var i2 = e2.config.chart.events.beforeResetZoom(t4, e2);
                i2 && t4.updateHelpers.revertDefaultAxisMinMax(i2);
              }
              "function" == typeof e2.config.chart.events.zoomed && t4.ctx.toolbar.zoomCallback({
                min: e2.config.xaxis.min,
                max: e2.config.xaxis.max
              }), e2.globals.zoomed = false;
              var a2 = t4.ctx.series.emptyCollapsedSeries(m.clone(e2.globals.initialSeries));
              t4.updateHelpers._updateSeries(a2, e2.config.chart.animations.dynamicAnimation.enabled);
            });
          }
        }, {
          key: "destroy",
          value: function () {
            this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
          }
        }]), t2;
      }(),
      ft = function (t2) {
        h(a2, ut);
        var e2 = o(a2);
        function a2(t3) {
          var s2;
          return i(this, a2), (s2 = e2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.dragged = false, s2.graphics = new k(s2.ctx), s2.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend", "wheel"], s2.clientX = 0, s2.clientY = 0, s2.startX = 0, s2.endX = 0, s2.dragX = 0, s2.startY = 0, s2.endY = 0, s2.dragY = 0, s2.moveDirection = "none", s2.debounceTimer = null, s2.debounceDelay = 100, s2.wheelDelay = 400, s2;
        }
        return s(a2, [{
          key: "init",
          value: function (t3) {
            var e3 = this,
              i2 = t3.xyRatios,
              a3 = this.w,
              s2 = this;
            this.xyRatios = i2, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a3.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a3.globals.dom.elGraphical.add(this.zoomRect), a3.globals.dom.elGraphical.add(this.selectionRect), "x" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
              minX: 0,
              minY: 0,
              maxX: a3.globals.gridWidth,
              maxY: a3.globals.gridHeight
            }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
              minX: 0,
              maxX: a3.globals.gridWidth
            }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a3.globals.dom.baseEl.querySelector("".concat(a3.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function (t4) {
              e3.hoverArea.addEventListener(t4, s2.svgMouseEvents.bind(s2, i2), {
                capture: false,
                passive: true
              });
            }), a3.config.chart.zoom.allowMouseWheelZoom && this.hoverArea.addEventListener("wheel", s2.mouseWheelEvent.bind(s2), {
              capture: false,
              passive: false
            });
          }
        }, {
          key: "destroy",
          value: function () {
            this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
          }
        }, {
          key: "svgMouseEvents",
          value: function (t3, e3) {
            var i2 = this.w,
              a3 = this,
              s2 = this.ctx.toolbar,
              r2 = i2.globals.zoomEnabled ? i2.config.chart.zoom.type : i2.config.chart.selection.type,
              o2 = i2.config.chart.toolbar.autoSelected;
            if (e3.shiftKey ? (this.shiftWasPressed = true, s2.enableZoomPanFromToolbar("pan" === o2 ? "zoom" : "pan")) : this.shiftWasPressed && (s2.enableZoomPanFromToolbar(o2), this.shiftWasPressed = false), e3.target) {
              var n2,
                l2 = e3.target.classList;
              if (e3.target.parentNode && null !== e3.target.parentNode && (n2 = e3.target.parentNode.classList), !(l2.contains("apexcharts-selection-rect") || l2.contains("apexcharts-legend-marker") || l2.contains("apexcharts-legend-text") || n2 && n2.contains("apexcharts-toolbar"))) {
                if (a3.clientX = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientX : "touchend" === e3.type ? e3.changedTouches[0].clientX : e3.clientX, a3.clientY = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientY : "touchend" === e3.type ? e3.changedTouches[0].clientY : e3.clientY, "mousedown" === e3.type && 1 === e3.which) {
                  var h2 = a3.gridRect.getBoundingClientRect();
                  a3.startX = a3.clientX - h2.left, a3.startY = a3.clientY - h2.top, a3.dragged = false, a3.w.globals.mousedown = true;
                }
                if (("mousemove" === e3.type && 1 === e3.which || "touchmove" === e3.type) && (a3.dragged = true, i2.globals.panEnabled ? (i2.globals.selection = null, a3.w.globals.mousedown && a3.panDragging({
                  context: a3,
                  zoomtype: r2,
                  xyRatios: t3
                })) : (a3.w.globals.mousedown && i2.globals.zoomEnabled || a3.w.globals.mousedown && i2.globals.selectionEnabled) && (a3.selection = a3.selectionDrawing({
                  context: a3,
                  zoomtype: r2
                }))), "mouseup" === e3.type || "touchend" === e3.type || "mouseleave" === e3.type) {
                  var c2,
                    d2 = null === (c2 = a3.gridRect) || void 0 === c2 ? void 0 : c2.getBoundingClientRect();
                  d2 && a3.w.globals.mousedown && (a3.endX = a3.clientX - d2.left, a3.endY = a3.clientY - d2.top, a3.dragX = Math.abs(a3.endX - a3.startX), a3.dragY = Math.abs(a3.endY - a3.startY), (i2.globals.zoomEnabled || i2.globals.selectionEnabled) && a3.selectionDrawn({
                    context: a3,
                    zoomtype: r2
                  }), i2.globals.panEnabled && i2.config.xaxis.convertedCatToNumeric && a3.delayedPanScrolled()), i2.globals.zoomEnabled && a3.hideSelectionRect(this.selectionRect), a3.dragged = false, a3.w.globals.mousedown = false;
                }
                this.makeSelectionRectDraggable();
              }
            }
          }
        }, {
          key: "mouseWheelEvent",
          value: function (t3) {
            var e3 = this,
              i2 = this.w;
            t3.preventDefault();
            var a3 = Date.now();
            a3 - i2.globals.lastWheelExecution > this.wheelDelay && (this.executeMouseWheelZoom(t3), i2.globals.lastWheelExecution = a3), this.debounceTimer && clearTimeout(this.debounceTimer), this.debounceTimer = setTimeout(function () {
              a3 - i2.globals.lastWheelExecution > e3.wheelDelay && (e3.executeMouseWheelZoom(t3), i2.globals.lastWheelExecution = a3);
            }, this.debounceDelay);
          }
        }, {
          key: "executeMouseWheelZoom",
          value: function (t3) {
            var e3,
              i2 = this.w;
            this.minX = i2.globals.isRangeBar ? i2.globals.minY : i2.globals.minX, this.maxX = i2.globals.isRangeBar ? i2.globals.maxY : i2.globals.maxX;
            var a3 = null === (e3 = this.gridRect) || void 0 === e3 ? void 0 : e3.getBoundingClientRect();
            if (a3) {
              var s2,
                r2,
                o2,
                n2 = (t3.clientX - a3.left) / a3.width,
                l2 = this.minX,
                h2 = this.maxX,
                c2 = h2 - l2;
              if (t3.deltaY < 0) {
                var d2 = l2 + n2 * c2;
                r2 = d2 - (s2 = 0.5 * c2) / 2, o2 = d2 + s2 / 2;
              } else r2 = l2 - (s2 = 1.5 * c2) / 2, o2 = h2 + s2 / 2;
              if (!i2.globals.isRangeBar) {
                r2 = Math.max(r2, i2.globals.initialMinX), o2 = Math.min(o2, i2.globals.initialMaxX);
                var g2 = 0.01 * (i2.globals.initialMaxX - i2.globals.initialMinX);
                if (o2 - r2 < g2) {
                  var u2 = (r2 + o2) / 2;
                  r2 = u2 - g2 / 2, o2 = u2 + g2 / 2;
                }
              }
              var f2 = this._getNewMinXMaxX(r2, o2);
              isNaN(f2.minX) || isNaN(f2.maxX) || this.zoomUpdateOptions(f2.minX, f2.maxX);
            }
          }
        }, {
          key: "makeSelectionRectDraggable",
          value: function () {
            var t3 = this.w;
            if (this.selectionRect) {
              var e3 = this.selectionRect.node.getBoundingClientRect();
              e3.width > 0 && e3.height > 0 && this.slDraggableRect.selectize({
                points: "l, r",
                pointSize: 8,
                pointType: "rect"
              }).resize({
                constraint: {
                  minX: 0,
                  minY: 0,
                  maxX: t3.globals.gridWidth,
                  maxY: t3.globals.gridHeight
                }
              }).on("resizing", this.selectionDragging.bind(this, "resizing"));
            }
          }
        }, {
          key: "preselectedSelection",
          value: function () {
            var t3 = this.w,
              e3 = this.xyRatios;
            if (!t3.globals.zoomEnabled) {
              if (void 0 !== t3.globals.selection && null !== t3.globals.selection) this.drawSelectionRect(t3.globals.selection);else if (void 0 !== t3.config.chart.selection.xaxis.min && void 0 !== t3.config.chart.selection.xaxis.max) {
                var i2 = (t3.config.chart.selection.xaxis.min - t3.globals.minX) / e3.xRatio,
                  a3 = t3.globals.gridWidth - (t3.globals.maxX - t3.config.chart.selection.xaxis.max) / e3.xRatio - i2;
                t3.globals.isRangeBar && (i2 = (t3.config.chart.selection.xaxis.min - t3.globals.yAxisScale[0].niceMin) / e3.invertedYRatio, a3 = (t3.config.chart.selection.xaxis.max - t3.config.chart.selection.xaxis.min) / e3.invertedYRatio);
                var s2 = {
                  x: i2,
                  y: 0,
                  width: a3,
                  height: t3.globals.gridHeight,
                  translateX: 0,
                  translateY: 0,
                  selectionEnabled: true
                };
                this.drawSelectionRect(s2), this.makeSelectionRectDraggable(), "function" == typeof t3.config.chart.events.selection && t3.config.chart.events.selection(this.ctx, {
                  xaxis: {
                    min: t3.config.chart.selection.xaxis.min,
                    max: t3.config.chart.selection.xaxis.max
                  },
                  yaxis: {}
                });
              }
            }
          }
        }, {
          key: "drawSelectionRect",
          value: function (t3) {
            var e3 = t3.x,
              i2 = t3.y,
              a3 = t3.width,
              s2 = t3.height,
              r2 = t3.translateX,
              o2 = void 0 === r2 ? 0 : r2,
              n2 = t3.translateY,
              l2 = void 0 === n2 ? 0 : n2,
              h2 = this.w,
              c2 = this.zoomRect,
              d2 = this.selectionRect;
            if (this.dragged || null !== h2.globals.selection) {
              var g2 = {
                transform: "translate(" + o2 + ", " + l2 + ")"
              };
              h2.globals.zoomEnabled && this.dragged && (a3 < 0 && (a3 = 1), c2.attr({
                x: e3,
                y: i2,
                width: a3,
                height: s2,
                fill: h2.config.chart.zoom.zoomedArea.fill.color,
                "fill-opacity": h2.config.chart.zoom.zoomedArea.fill.opacity,
                stroke: h2.config.chart.zoom.zoomedArea.stroke.color,
                "stroke-width": h2.config.chart.zoom.zoomedArea.stroke.width,
                "stroke-opacity": h2.config.chart.zoom.zoomedArea.stroke.opacity
              }), k.setAttrs(c2.node, g2)), h2.globals.selectionEnabled && (d2.attr({
                x: e3,
                y: i2,
                width: a3 > 0 ? a3 : 0,
                height: s2 > 0 ? s2 : 0,
                fill: h2.config.chart.selection.fill.color,
                "fill-opacity": h2.config.chart.selection.fill.opacity,
                stroke: h2.config.chart.selection.stroke.color,
                "stroke-width": h2.config.chart.selection.stroke.width,
                "stroke-dasharray": h2.config.chart.selection.stroke.dashArray,
                "stroke-opacity": h2.config.chart.selection.stroke.opacity
              }), k.setAttrs(d2.node, g2));
            }
          }
        }, {
          key: "hideSelectionRect",
          value: function (t3) {
            t3 && t3.attr({
              x: 0,
              y: 0,
              width: 0,
              height: 0
            });
          }
        }, {
          key: "selectionDrawing",
          value: function (t3) {
            var e3 = t3.context,
              i2 = t3.zoomtype,
              a3 = this.w,
              s2 = e3,
              r2 = this.gridRect.getBoundingClientRect(),
              o2 = s2.startX - 1,
              n2 = s2.startY,
              l2 = false,
              h2 = false,
              c2 = s2.clientX - r2.left - o2,
              d2 = s2.clientY - r2.top - n2,
              g2 = {};
            return Math.abs(c2 + o2) > a3.globals.gridWidth ? c2 = a3.globals.gridWidth - o2 : s2.clientX - r2.left < 0 && (c2 = o2), o2 > s2.clientX - r2.left && (l2 = true, c2 = Math.abs(c2)), n2 > s2.clientY - r2.top && (h2 = true, d2 = Math.abs(d2)), g2 = "x" === i2 ? {
              x: l2 ? o2 - c2 : o2,
              y: 0,
              width: c2,
              height: a3.globals.gridHeight
            } : "y" === i2 ? {
              x: 0,
              y: h2 ? n2 - d2 : n2,
              width: a3.globals.gridWidth,
              height: d2
            } : {
              x: l2 ? o2 - c2 : o2,
              y: h2 ? n2 - d2 : n2,
              width: c2,
              height: d2
            }, s2.drawSelectionRect(g2), s2.selectionDragging("resizing"), g2;
          }
        }, {
          key: "selectionDragging",
          value: function (t3, e3) {
            var i2 = this,
              a3 = this.w,
              s2 = this.xyRatios,
              r2 = this.selectionRect,
              o2 = 0;
            "resizing" === t3 && (o2 = 30);
            var n2 = function (t4) {
                return parseFloat(r2.node.getAttribute(t4));
              },
              l2 = {
                x: n2("x"),
                y: n2("y"),
                width: n2("width"),
                height: n2("height")
              };
            a3.globals.selection = l2, "function" == typeof a3.config.chart.events.selection && a3.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {
              var t4,
                e4,
                o3,
                n3,
                l3 = i2.gridRect.getBoundingClientRect(),
                h2 = r2.node.getBoundingClientRect();
              a3.globals.isRangeBar ? (t4 = a3.globals.yAxisScale[0].niceMin + (h2.left - l3.left) * s2.invertedYRatio, e4 = a3.globals.yAxisScale[0].niceMin + (h2.right - l3.left) * s2.invertedYRatio, o3 = 0, n3 = 1) : (t4 = a3.globals.xAxisScale.niceMin + (h2.left - l3.left) * s2.xRatio, e4 = a3.globals.xAxisScale.niceMin + (h2.right - l3.left) * s2.xRatio, o3 = a3.globals.yAxisScale[0].niceMin + (l3.bottom - h2.bottom) * s2.yRatio[0], n3 = a3.globals.yAxisScale[0].niceMax - (h2.top - l3.top) * s2.yRatio[0]);
              var c2 = {
                xaxis: {
                  min: t4,
                  max: e4
                },
                yaxis: {
                  min: o3,
                  max: n3
                }
              };
              a3.config.chart.events.selection(i2.ctx, c2), a3.config.chart.brush.enabled && void 0 !== a3.config.chart.events.brushScrolled && a3.config.chart.events.brushScrolled(i2.ctx, c2);
            }, o2));
          }
        }, {
          key: "selectionDrawn",
          value: function (t3) {
            var e3 = t3.context,
              i2 = t3.zoomtype,
              a3 = this.w,
              s2 = e3,
              r2 = this.xyRatios,
              o2 = this.ctx.toolbar;
            if (s2.startX > s2.endX) {
              var n2 = s2.startX;
              s2.startX = s2.endX, s2.endX = n2;
            }
            if (s2.startY > s2.endY) {
              var l2 = s2.startY;
              s2.startY = s2.endY, s2.endY = l2;
            }
            var h2 = void 0,
              c2 = void 0;
            a3.globals.isRangeBar ? (h2 = a3.globals.yAxisScale[0].niceMin + s2.startX * r2.invertedYRatio, c2 = a3.globals.yAxisScale[0].niceMin + s2.endX * r2.invertedYRatio) : (h2 = a3.globals.xAxisScale.niceMin + s2.startX * r2.xRatio, c2 = a3.globals.xAxisScale.niceMin + s2.endX * r2.xRatio);
            var d2 = [],
              g2 = [];
            if (a3.config.yaxis.forEach(function (t4, e4) {
              var i3 = a3.globals.seriesYAxisMap[e4][0];
              d2.push(a3.globals.yAxisScale[e4].niceMax - r2.yRatio[i3] * s2.startY), g2.push(a3.globals.yAxisScale[e4].niceMax - r2.yRatio[i3] * s2.endY);
            }), s2.dragged && (s2.dragX > 10 || s2.dragY > 10) && h2 !== c2) {
              if (a3.globals.zoomEnabled) {
                var u2 = m.clone(a3.globals.initialConfig.yaxis),
                  f2 = m.clone(a3.globals.initialConfig.xaxis);
                if (a3.globals.zoomed = true, a3.config.xaxis.convertedCatToNumeric && (h2 = Math.floor(h2), c2 = Math.floor(c2), h2 < 1 && (h2 = 1, c2 = a3.globals.dataPoints), c2 - h2 < 2 && (c2 = h2 + 1)), "xy" !== i2 && "x" !== i2 || (f2 = {
                  min: h2,
                  max: c2
                }), "xy" !== i2 && "y" !== i2 || u2.forEach(function (t4, e4) {
                  u2[e4].min = g2[e4], u2[e4].max = d2[e4];
                }), o2) {
                  var p2 = o2.getBeforeZoomRange(f2, u2);
                  p2 && (f2 = p2.xaxis ? p2.xaxis : f2, u2 = p2.yaxis ? p2.yaxis : u2);
                }
                var x2 = {
                  xaxis: f2
                };
                a3.config.chart.group || (x2.yaxis = u2), s2.ctx.updateHelpers._updateOptions(x2, false, s2.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a3.config.chart.events.zoomed && o2.zoomCallback(f2, u2);
              } else if (a3.globals.selectionEnabled) {
                var b2,
                  v2 = null;
                b2 = {
                  min: h2,
                  max: c2
                }, "xy" !== i2 && "y" !== i2 || (v2 = m.clone(a3.config.yaxis)).forEach(function (t4, e4) {
                  v2[e4].min = g2[e4], v2[e4].max = d2[e4];
                }), a3.globals.selection = s2.selection, "function" == typeof a3.config.chart.events.selection && a3.config.chart.events.selection(s2.ctx, {
                  xaxis: b2,
                  yaxis: v2
                });
              }
            }
          }
        }, {
          key: "panDragging",
          value: function (t3) {
            var e3 = t3.context,
              i2 = this.w,
              a3 = e3;
            if (void 0 !== i2.globals.lastClientPosition.x) {
              var s2 = i2.globals.lastClientPosition.x - a3.clientX,
                r2 = i2.globals.lastClientPosition.y - a3.clientY;
              Math.abs(s2) > Math.abs(r2) && s2 > 0 ? this.moveDirection = "left" : Math.abs(s2) > Math.abs(r2) && s2 < 0 ? this.moveDirection = "right" : Math.abs(r2) > Math.abs(s2) && r2 > 0 ? this.moveDirection = "up" : Math.abs(r2) > Math.abs(s2) && r2 < 0 && (this.moveDirection = "down");
            }
            i2.globals.lastClientPosition = {
              x: a3.clientX,
              y: a3.clientY
            };
            var o2 = i2.globals.isRangeBar ? i2.globals.minY : i2.globals.minX,
              n2 = i2.globals.isRangeBar ? i2.globals.maxY : i2.globals.maxX;
            i2.config.xaxis.convertedCatToNumeric || a3.panScrolled(o2, n2);
          }
        }, {
          key: "delayedPanScrolled",
          value: function () {
            var t3 = this.w,
              e3 = t3.globals.minX,
              i2 = t3.globals.maxX,
              a3 = (t3.globals.maxX - t3.globals.minX) / 2;
            "left" === this.moveDirection ? (e3 = t3.globals.minX + a3, i2 = t3.globals.maxX + a3) : "right" === this.moveDirection && (e3 = t3.globals.minX - a3, i2 = t3.globals.maxX - a3), e3 = Math.floor(e3), i2 = Math.floor(i2), this.updateScrolledChart({
              xaxis: {
                min: e3,
                max: i2
              }
            }, e3, i2);
          }
        }, {
          key: "panScrolled",
          value: function (t3, e3) {
            var i2 = this.w,
              a3 = this.xyRatios,
              s2 = m.clone(i2.globals.initialConfig.yaxis),
              r2 = a3.xRatio,
              o2 = i2.globals.minX,
              n2 = i2.globals.maxX;
            i2.globals.isRangeBar && (r2 = a3.invertedYRatio, o2 = i2.globals.minY, n2 = i2.globals.maxY), "left" === this.moveDirection ? (t3 = o2 + i2.globals.gridWidth / 15 * r2, e3 = n2 + i2.globals.gridWidth / 15 * r2) : "right" === this.moveDirection && (t3 = o2 - i2.globals.gridWidth / 15 * r2, e3 = n2 - i2.globals.gridWidth / 15 * r2), i2.globals.isRangeBar || (t3 < i2.globals.initialMinX || e3 > i2.globals.initialMaxX) && (t3 = o2, e3 = n2);
            var l2 = {
              xaxis: {
                min: t3,
                max: e3
              }
            };
            i2.config.chart.group || (l2.yaxis = s2), this.updateScrolledChart(l2, t3, e3);
          }
        }, {
          key: "updateScrolledChart",
          value: function (t3, e3, i2) {
            var a3 = this.w;
            this.ctx.updateHelpers._updateOptions(t3, false, false), "function" == typeof a3.config.chart.events.scrolled && a3.config.chart.events.scrolled(this.ctx, {
              xaxis: {
                min: e3,
                max: i2
              }
            });
          }
        }]), a2;
      }(),
      pt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx;
        }
        return s(t2, [{
          key: "getNearestValues",
          value: function (t3) {
            var e2 = t3.hoverArea,
              i2 = t3.elGrid,
              a2 = t3.clientX,
              s2 = t3.clientY,
              r2 = this.w,
              o2 = i2.getBoundingClientRect(),
              n2 = o2.width,
              l2 = o2.height,
              h2 = n2 / (r2.globals.dataPoints - 1),
              c2 = l2 / r2.globals.dataPoints,
              d2 = this.hasBars();
            !r2.globals.comboCharts && !d2 || r2.config.xaxis.convertedCatToNumeric || (h2 = n2 / r2.globals.dataPoints);
            var g2 = a2 - o2.left - r2.globals.barPadForNumericAxis,
              u2 = s2 - o2.top;
            g2 < 0 || u2 < 0 || g2 > n2 || u2 > l2 ? (e2.classList.remove("hovering-zoom"), e2.classList.remove("hovering-pan")) : r2.globals.zoomEnabled ? (e2.classList.remove("hovering-pan"), e2.classList.add("hovering-zoom")) : r2.globals.panEnabled && (e2.classList.remove("hovering-zoom"), e2.classList.add("hovering-pan"));
            var f2 = Math.round(g2 / h2),
              p2 = Math.floor(u2 / c2);
            d2 && !r2.config.xaxis.convertedCatToNumeric && (f2 = Math.ceil(g2 / h2), f2 -= 1);
            var x2 = null,
              b2 = null,
              v2 = r2.globals.seriesXvalues.map(function (t4) {
                return t4.filter(function (t5) {
                  return m.isNumber(t5);
                });
              }),
              y2 = r2.globals.seriesYvalues.map(function (t4) {
                return t4.filter(function (t5) {
                  return m.isNumber(t5);
                });
              });
            if (r2.globals.isXNumeric) {
              var w2 = this.ttCtx.getElGrid().getBoundingClientRect(),
                k2 = g2 * (w2.width / n2),
                A2 = u2 * (w2.height / l2);
              x2 = (b2 = this.closestInMultiArray(k2, A2, v2, y2)).index, f2 = b2.j, null !== x2 && (v2 = r2.globals.seriesXvalues[x2], f2 = (b2 = this.closestInArray(k2, v2)).index);
            }
            return r2.globals.capturedSeriesIndex = null === x2 ? -1 : x2, (!f2 || f2 < 1) && (f2 = 0), r2.globals.isBarHorizontal ? r2.globals.capturedDataPointIndex = p2 : r2.globals.capturedDataPointIndex = f2, {
              capturedSeries: x2,
              j: r2.globals.isBarHorizontal ? p2 : f2,
              hoverX: g2,
              hoverY: u2
            };
          }
        }, {
          key: "closestInMultiArray",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = 0,
              o2 = null,
              n2 = -1;
            s2.globals.series.length > 1 ? r2 = this.getFirstActiveXArray(i2) : o2 = 0;
            var l2 = i2[r2][0],
              h2 = Math.abs(t3 - l2);
            if (i2.forEach(function (e3) {
              e3.forEach(function (e4, i3) {
                var a3 = Math.abs(t3 - e4);
                a3 <= h2 && (h2 = a3, n2 = i3);
              });
            }), -1 !== n2) {
              var c2 = a2[r2][n2],
                d2 = Math.abs(e2 - c2);
              o2 = r2, a2.forEach(function (t4, i3) {
                var a3 = Math.abs(e2 - t4[n2]);
                a3 <= d2 && (d2 = a3, o2 = i3);
              });
            }
            return {
              index: o2,
              j: n2
            };
          }
        }, {
          key: "getFirstActiveXArray",
          value: function (t3) {
            for (var e2 = this.w, i2 = 0, a2 = t3.map(function (t4, e3) {
                return t4.length > 0 ? e3 : -1;
              }), s2 = 0; s2 < a2.length; s2++) if (-1 !== a2[s2] && -1 === e2.globals.collapsedSeriesIndices.indexOf(s2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(s2)) {
              i2 = a2[s2];
              break;
            }
            return i2;
          }
        }, {
          key: "closestInArray",
          value: function (t3, e2) {
            for (var i2 = e2[0], a2 = null, s2 = Math.abs(t3 - i2), r2 = 0; r2 < e2.length; r2++) {
              var o2 = Math.abs(t3 - e2[r2]);
              o2 < s2 && (s2 = o2, a2 = r2);
            }
            return {
              index: a2
            };
          }
        }, {
          key: "isXoverlap",
          value: function (t3) {
            var e2 = [],
              i2 = this.w.globals.seriesX.filter(function (t4) {
                return void 0 !== t4[0];
              });
            if (i2.length > 0) for (var a2 = 0; a2 < i2.length - 1; a2++) void 0 !== i2[a2][t3] && void 0 !== i2[a2 + 1][t3] && i2[a2][t3] !== i2[a2 + 1][t3] && e2.push("unEqual");
            return 0 === e2.length;
          }
        }, {
          key: "isInitialSeriesSameLen",
          value: function () {
            for (var t3 = true, e2 = this.w.globals.initialSeries, i2 = 0; i2 < e2.length - 1; i2++) if (e2[i2].data.length !== e2[i2 + 1].data.length) {
              t3 = false;
              break;
            }
            return t3;
          }
        }, {
          key: "getBarsHeight",
          value: function (t3) {
            return p(t3).reduce(function (t4, e2) {
              return t4 + e2.getBBox().height;
            }, 0);
          }
        }, {
          key: "getElMarkers",
          value: function (t3) {
            return "number" == typeof t3 ? this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex='".concat(t3, "'] .apexcharts-series-markers-wrap > *")) : this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap > *");
          }
        }, {
          key: "getAllMarkers",
          value: function () {
            var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
            (t3 = p(t3)).sort(function (t4, e3) {
              var i2 = Number(t4.getAttribute("data:realIndex")),
                a2 = Number(e3.getAttribute("data:realIndex"));
              return a2 < i2 ? 1 : a2 > i2 ? -1 : 0;
            });
            var e2 = [];
            return t3.forEach(function (t4) {
              e2.push(t4.querySelector(".apexcharts-marker"));
            }), e2;
          }
        }, {
          key: "hasMarkers",
          value: function (t3) {
            return this.getElMarkers(t3).length > 0;
          }
        }, {
          key: "getPathFromPoint",
          value: function (t3, e2) {
            var i2 = Number(t3.getAttribute("cx")),
              a2 = Number(t3.getAttribute("cy")),
              s2 = t3.getAttribute("shape");
            return new k(this.ctx).getMarkerPath(i2, a2, s2, e2);
          }
        }, {
          key: "getElBars",
          value: function () {
            return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
          }
        }, {
          key: "hasBars",
          value: function () {
            return this.getElBars().length > 0;
          }
        }, {
          key: "getHoverMarkerSize",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.config.markers.hover.size;
            return void 0 === i2 && (i2 = e2.globals.markers.size[t3] + e2.config.markers.hover.sizeOffset), i2;
          }
        }, {
          key: "toggleAllTooltipSeriesGroups",
          value: function (t3) {
            var e2 = this.w,
              i2 = this.ttCtx;
            0 === i2.allTooltipSeriesGroups.length && (i2.allTooltipSeriesGroups = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
            for (var a2 = i2.allTooltipSeriesGroups, s2 = 0; s2 < a2.length; s2++) "enable" === t3 ? (a2[s2].classList.add("apexcharts-active"), a2[s2].style.display = e2.config.tooltip.items.display) : (a2[s2].classList.remove("apexcharts-active"), a2[s2].style.display = "none");
          }
        }]), t2;
      }(),
      xt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.ctx = e2.ctx, this.ttCtx = e2, this.tooltipUtil = new pt(e2);
        }
        return s(t2, [{
          key: "drawSeriesTexts",
          value: function (t3) {
            var e2 = t3.shared,
              i2 = void 0 === e2 || e2,
              a2 = t3.ttItems,
              s2 = t3.i,
              r2 = void 0 === s2 ? 0 : s2,
              o2 = t3.j,
              n2 = void 0 === o2 ? null : o2,
              l2 = t3.y1,
              h2 = t3.y2,
              c2 = t3.e,
              d2 = this.w;
            void 0 !== d2.config.tooltip.custom ? this.handleCustomTooltip({
              i: r2,
              j: n2,
              y1: l2,
              y2: h2,
              w: d2
            }) : this.toggleActiveInactiveSeries(i2, r2);
            var g2 = this.getValuesToPrint({
              i: r2,
              j: n2
            });
            this.printLabels({
              i: r2,
              j: n2,
              values: g2,
              ttItems: a2,
              shared: i2,
              e: c2
            });
            var u2 = this.ttCtx.getElTooltip();
            this.ttCtx.tooltipRect.ttWidth = u2.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u2.getBoundingClientRect().height;
          }
        }, {
          key: "printLabels",
          value: function (t3) {
            var e2,
              i2 = this,
              a2 = t3.i,
              s2 = t3.j,
              r2 = t3.values,
              o2 = t3.ttItems,
              n2 = t3.shared,
              l2 = t3.e,
              h2 = this.w,
              c2 = [],
              d2 = function (t4) {
                return h2.globals.seriesGoals[t4] && h2.globals.seriesGoals[t4][s2] && Array.isArray(h2.globals.seriesGoals[t4][s2]);
              },
              u2 = r2.xVal,
              f2 = r2.zVal,
              p2 = r2.xAxisTTVal,
              x2 = "",
              b2 = h2.globals.colors[a2];
            null !== s2 && h2.config.plotOptions.bar.distributed && (b2 = h2.globals.colors[s2]);
            for (var v2 = function (t4, r3) {
                var v3 = i2.getFormatters(a2);
                x2 = i2.getSeriesName({
                  fn: v3.yLbTitleFormatter,
                  index: a2,
                  seriesIndex: a2,
                  j: s2
                }), "treemap" === h2.config.chart.type && (x2 = v3.yLbTitleFormatter(String(h2.config.series[a2].data[s2].x), {
                  series: h2.globals.series,
                  seriesIndex: a2,
                  dataPointIndex: s2,
                  w: h2
                }));
                var m3 = h2.config.tooltip.inverseOrder ? r3 : t4;
                if (h2.globals.axisCharts) {
                  var y3 = function (t5) {
                    var e3, i3, a3, r4;
                    return h2.globals.isRangeData ? v3.yLbFormatter(null === (e3 = h2.globals.seriesRangeStart) || void 0 === e3 || null === (i3 = e3[t5]) || void 0 === i3 ? void 0 : i3[s2], {
                      series: h2.globals.seriesRangeStart,
                      seriesIndex: t5,
                      dataPointIndex: s2,
                      w: h2
                    }) + " - " + v3.yLbFormatter(null === (a3 = h2.globals.seriesRangeEnd) || void 0 === a3 || null === (r4 = a3[t5]) || void 0 === r4 ? void 0 : r4[s2], {
                      series: h2.globals.seriesRangeEnd,
                      seriesIndex: t5,
                      dataPointIndex: s2,
                      w: h2
                    }) : v3.yLbFormatter(h2.globals.series[t5][s2], {
                      series: h2.globals.series,
                      seriesIndex: t5,
                      dataPointIndex: s2,
                      w: h2
                    });
                  };
                  if (n2) v3 = i2.getFormatters(m3), x2 = i2.getSeriesName({
                    fn: v3.yLbTitleFormatter,
                    index: m3,
                    seriesIndex: a2,
                    j: s2
                  }), b2 = h2.globals.colors[m3], e2 = y3(m3), d2(m3) && (c2 = h2.globals.seriesGoals[m3][s2].map(function (t5) {
                    return {
                      attrs: t5,
                      val: v3.yLbFormatter(t5.value, {
                        seriesIndex: m3,
                        dataPointIndex: s2,
                        w: h2
                      })
                    };
                  }));else {
                    var w2,
                      k2 = null == l2 || null === (w2 = l2.target) || void 0 === w2 ? void 0 : w2.getAttribute("fill");
                    k2 && (-1 !== k2.indexOf("url") ? -1 !== k2.indexOf("Pattern") && (b2 = h2.globals.dom.baseEl.querySelector(k2.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke")) : b2 = k2), e2 = y3(a2), d2(a2) && Array.isArray(h2.globals.seriesGoals[a2][s2]) && (c2 = h2.globals.seriesGoals[a2][s2].map(function (t5) {
                      return {
                        attrs: t5,
                        val: v3.yLbFormatter(t5.value, {
                          seriesIndex: a2,
                          dataPointIndex: s2,
                          w: h2
                        })
                      };
                    }));
                  }
                }
                null === s2 && (e2 = v3.yLbFormatter(h2.globals.series[a2], g(g({}, h2), {}, {
                  seriesIndex: a2,
                  dataPointIndex: a2
                }))), i2.DOMHandling({
                  i: a2,
                  t: m3,
                  j: s2,
                  ttItems: o2,
                  values: {
                    val: e2,
                    goalVals: c2,
                    xVal: u2,
                    xAxisTTVal: p2,
                    zVal: f2
                  },
                  seriesName: x2,
                  shared: n2,
                  pColor: b2
                });
              }, m2 = 0, y2 = h2.globals.series.length - 1; m2 < h2.globals.series.length; m2++, y2--) v2(m2, y2);
          }
        }, {
          key: "getFormatters",
          value: function (t3) {
            var e2,
              i2 = this.w,
              a2 = i2.globals.yLabelFormatters[t3];
            return void 0 !== i2.globals.ttVal ? Array.isArray(i2.globals.ttVal) ? (a2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].formatter, e2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].title && i2.globals.ttVal[t3].title.formatter) : (a2 = i2.globals.ttVal.formatter, "function" == typeof i2.globals.ttVal.title.formatter && (e2 = i2.globals.ttVal.title.formatter)) : e2 = i2.config.tooltip.y.title.formatter, "function" != typeof a2 && (a2 = i2.globals.yLabelFormatters[0] ? i2.globals.yLabelFormatters[0] : function (t4) {
              return t4;
            }), "function" != typeof e2 && (e2 = function (t4) {
              return t4;
            }), {
              yLbFormatter: a2,
              yLbTitleFormatter: e2
            };
          }
        }, {
          key: "getSeriesName",
          value: function (t3) {
            var e2 = t3.fn,
              i2 = t3.index,
              a2 = t3.seriesIndex,
              s2 = t3.j,
              r2 = this.w;
            return e2(String(r2.globals.seriesNames[i2]), {
              series: r2.globals.series,
              seriesIndex: a2,
              dataPointIndex: s2,
              w: r2
            });
          }
        }, {
          key: "DOMHandling",
          value: function (t3) {
            t3.i;
            var e2 = t3.t,
              i2 = t3.j,
              a2 = t3.ttItems,
              s2 = t3.values,
              r2 = t3.seriesName,
              o2 = t3.shared,
              n2 = t3.pColor,
              l2 = this.w,
              h2 = this.ttCtx,
              c2 = s2.val,
              d2 = s2.goalVals,
              g2 = s2.xVal,
              u2 = s2.xAxisTTVal,
              f2 = s2.zVal,
              p2 = null;
            p2 = a2[e2].children, l2.config.tooltip.fillSeriesColor && (a2[e2].style.backgroundColor = n2, p2[0].style.display = "none"), h2.showTooltipTitle && (null === h2.tooltipTitle && (h2.tooltipTitle = l2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h2.tooltipTitle.innerHTML = g2), h2.isXAxisTooltipEnabled && (h2.xaxisTooltipText.innerHTML = "" !== u2 ? u2 : g2);
            var x2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-label");
            x2 && (x2.innerHTML = r2 || "");
            var b2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-value");
            b2 && (b2.innerHTML = void 0 !== c2 ? c2 : ""), p2[0] && p2[0].classList.contains("apexcharts-tooltip-marker") && (l2.config.tooltip.marker.fillColors && Array.isArray(l2.config.tooltip.marker.fillColors) && (n2 = l2.config.tooltip.marker.fillColors[e2]), p2[0].style.backgroundColor = n2), l2.config.tooltip.marker.show || (p2[0].style.display = "none");
            var v2 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-label"),
              m2 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-value");
            if (d2.length && l2.globals.seriesGoals[e2]) {
              var y2 = function () {
                var t4 = "<div >",
                  e3 = "<div>";
                d2.forEach(function (i3, a3) {
                  t4 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i3.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i3.attrs.name, "</div>"), e3 += "<div>".concat(i3.val, "</div>");
                }), v2.innerHTML = t4 + "</div>", m2.innerHTML = e3 + "</div>";
              };
              o2 ? l2.globals.seriesGoals[e2][i2] && Array.isArray(l2.globals.seriesGoals[e2][i2]) ? y2() : (v2.innerHTML = "", m2.innerHTML = "") : y2();
            } else v2.innerHTML = "", m2.innerHTML = "";
            null !== f2 && (a2[e2].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l2.config.tooltip.z.title, a2[e2].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== f2 ? f2 : "");
            if (o2 && p2[0]) {
              if (l2.config.tooltip.hideEmptySeries) {
                var w2 = a2[e2].querySelector(".apexcharts-tooltip-marker"),
                  k2 = a2[e2].querySelector(".apexcharts-tooltip-text");
                0 == parseFloat(c2) ? (w2.style.display = "none", k2.style.display = "none") : (w2.style.display = "block", k2.style.display = "block");
              }
              null == c2 || l2.globals.ancillaryCollapsedSeriesIndices.indexOf(e2) > -1 || l2.globals.collapsedSeriesIndices.indexOf(e2) > -1 || Array.isArray(h2.tConfig.enabledOnSeries) && -1 === h2.tConfig.enabledOnSeries.indexOf(e2) ? p2[0].parentNode.style.display = "none" : p2[0].parentNode.style.display = l2.config.tooltip.items.display;
            } else Array.isArray(h2.tConfig.enabledOnSeries) && -1 === h2.tConfig.enabledOnSeries.indexOf(e2) && (p2[0].parentNode.style.display = "none");
          }
        }, {
          key: "toggleActiveInactiveSeries",
          value: function (t3, e2) {
            var i2 = this.w;
            if (t3) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else {
              this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
              var a2 = i2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group-".concat(e2));
              a2 && (a2.classList.add("apexcharts-active"), a2.style.display = i2.config.tooltip.items.display);
            }
          }
        }, {
          key: "getValuesToPrint",
          value: function (t3) {
            var e2 = t3.i,
              i2 = t3.j,
              a2 = this.w,
              s2 = this.ctx.series.filteredSeriesX(),
              r2 = "",
              o2 = "",
              n2 = null,
              l2 = null,
              h2 = {
                series: a2.globals.series,
                seriesIndex: e2,
                dataPointIndex: i2,
                w: a2
              },
              c2 = a2.globals.ttZFormatter;
            null === i2 ? l2 = a2.globals.series[e2] : a2.globals.isXNumeric && "treemap" !== a2.config.chart.type ? (r2 = s2[e2][i2], 0 === s2[e2].length && (r2 = s2[this.tooltipUtil.getFirstActiveXArray(s2)][i2])) : r2 = new _(this.ctx).isFormatXY() ? void 0 !== a2.config.series[e2].data[i2] ? a2.config.series[e2].data[i2].x : "" : void 0 !== a2.globals.labels[i2] ? a2.globals.labels[i2] : "";
            var d2 = r2;
            a2.globals.isXNumeric && "datetime" === a2.config.xaxis.type ? r2 = new P(this.ctx).xLabelFormat(a2.globals.ttKeyFormatter, d2, d2, {
              i: void 0,
              dateFormatter: new L(this.ctx).formatDate,
              w: this.w
            }) : r2 = a2.globals.isBarHorizontal ? a2.globals.yLabelFormatters[0](d2, h2) : a2.globals.xLabelFormatter(d2, h2);
            return void 0 !== a2.config.tooltip.x.formatter && (r2 = a2.globals.ttKeyFormatter(d2, h2)), a2.globals.seriesZ.length > 0 && a2.globals.seriesZ[e2].length > 0 && (n2 = c2(a2.globals.seriesZ[e2][i2], a2)), o2 = "function" == typeof a2.config.xaxis.tooltip.formatter ? a2.globals.xaxisTooltipFormatter(d2, h2) : r2, {
              val: Array.isArray(l2) ? l2.join(" ") : l2,
              xVal: Array.isArray(r2) ? r2.join(" ") : r2,
              xAxisTTVal: Array.isArray(o2) ? o2.join(" ") : o2,
              zVal: n2
            };
          }
        }, {
          key: "handleCustomTooltip",
          value: function (t3) {
            var e2 = t3.i,
              i2 = t3.j,
              a2 = t3.y1,
              s2 = t3.y2,
              r2 = t3.w,
              o2 = this.ttCtx.getElTooltip(),
              n2 = r2.config.tooltip.custom;
            Array.isArray(n2) && n2[e2] && (n2 = n2[e2]), o2.innerHTML = n2({
              ctx: this.ctx,
              series: r2.globals.series,
              seriesIndex: e2,
              dataPointIndex: i2,
              y1: a2,
              y2: s2,
              w: r2
            });
          }
        }]), t2;
      }(),
      bt = function () {
        function t2(e2) {
          i(this, t2), this.ttCtx = e2, this.ctx = e2.ctx, this.w = e2.w;
        }
        return s(t2, [{
          key: "moveXCrosshairs",
          value: function (t3) {
            var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
              i2 = this.ttCtx,
              a2 = this.w,
              s2 = i2.getElXCrosshairs(),
              r2 = t3 - i2.xcrosshairsWidth / 2,
              o2 = a2.globals.labels.slice().length;
            if (null !== e2 && (r2 = a2.globals.gridWidth / o2 * e2), null === s2 || a2.globals.isBarHorizontal || (s2.setAttribute("x", r2), s2.setAttribute("x1", r2), s2.setAttribute("x2", r2), s2.setAttribute("y2", a2.globals.gridHeight), s2.classList.add("apexcharts-active")), r2 < 0 && (r2 = 0), r2 > a2.globals.gridWidth && (r2 = a2.globals.gridWidth), i2.isXAxisTooltipEnabled) {
              var n2 = r2;
              "tickWidth" !== a2.config.xaxis.crosshairs.width && "barWidth" !== a2.config.xaxis.crosshairs.width || (n2 = r2 + i2.xcrosshairsWidth / 2), this.moveXAxisTooltip(n2);
            }
          }
        }, {
          key: "moveYCrosshairs",
          value: function (t3) {
            var e2 = this.ttCtx;
            null !== e2.ycrosshairs && k.setAttrs(e2.ycrosshairs, {
              y1: t3,
              y2: t3
            }), null !== e2.ycrosshairsHidden && k.setAttrs(e2.ycrosshairsHidden, {
              y1: t3,
              y2: t3
            });
          }
        }, {
          key: "moveXAxisTooltip",
          value: function (t3) {
            var e2 = this.w,
              i2 = this.ttCtx;
            if (null !== i2.xaxisTooltip && 0 !== i2.xcrosshairsWidth) {
              i2.xaxisTooltip.classList.add("apexcharts-active");
              var a2 = i2.xaxisOffY + e2.config.xaxis.tooltip.offsetY + e2.globals.translateY + 1 + e2.config.xaxis.offsetY;
              if (t3 -= i2.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t3)) {
                t3 += e2.globals.translateX;
                var s2;
                s2 = new k(this.ctx).getTextRects(i2.xaxisTooltipText.innerHTML), i2.xaxisTooltipText.style.minWidth = s2.width + "px", i2.xaxisTooltip.style.left = t3 + "px", i2.xaxisTooltip.style.top = a2 + "px";
              }
            }
          }
        }, {
          key: "moveYAxisTooltip",
          value: function (t3) {
            var e2 = this.w,
              i2 = this.ttCtx;
            null === i2.yaxisTTEls && (i2.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
            var a2 = parseInt(i2.ycrosshairsHidden.getAttribute("y1"), 10),
              s2 = e2.globals.translateY + a2,
              r2 = i2.yaxisTTEls[t3].getBoundingClientRect().height,
              o2 = e2.globals.translateYAxisX[t3] - 2;
            e2.config.yaxis[t3].opposite && (o2 -= 26), s2 -= r2 / 2, -1 === e2.globals.ignoreYAxisIndexes.indexOf(t3) ? (i2.yaxisTTEls[t3].classList.add("apexcharts-active"), i2.yaxisTTEls[t3].style.top = s2 + "px", i2.yaxisTTEls[t3].style.left = o2 + e2.config.yaxis[t3].tooltip.offsetX + "px") : i2.yaxisTTEls[t3].classList.remove("apexcharts-active");
          }
        }, {
          key: "moveTooltip",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
              a2 = this.w,
              s2 = this.ttCtx,
              r2 = s2.getElTooltip(),
              o2 = s2.tooltipRect,
              n2 = null !== i2 ? parseFloat(i2) : 1,
              l2 = parseFloat(t3) + n2 + 5,
              h2 = parseFloat(e2) + n2 / 2;
            if (l2 > a2.globals.gridWidth / 2 && (l2 = l2 - o2.ttWidth - n2 - 10), l2 > a2.globals.gridWidth - o2.ttWidth - 10 && (l2 = a2.globals.gridWidth - o2.ttWidth), l2 < -20 && (l2 = -20), a2.config.tooltip.followCursor) {
              var c2 = s2.getElGrid().getBoundingClientRect();
              (l2 = s2.e.clientX - c2.left) > a2.globals.gridWidth / 2 && (l2 -= s2.tooltipRect.ttWidth), (h2 = s2.e.clientY + a2.globals.translateY - c2.top) > a2.globals.gridHeight / 2 && (h2 -= s2.tooltipRect.ttHeight);
            } else a2.globals.isBarHorizontal || o2.ttHeight / 2 + h2 > a2.globals.gridHeight && (h2 = a2.globals.gridHeight - o2.ttHeight + a2.globals.translateY);
            isNaN(l2) || (l2 += a2.globals.translateX, r2.style.left = l2 + "px", r2.style.top = h2 + "px");
          }
        }, {
          key: "moveMarkers",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = this.ttCtx;
            if (i2.globals.markers.size[t3] > 0) for (var s2 = i2.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t3, "'] .apexcharts-marker")), r2 = 0; r2 < s2.length; r2++) parseInt(s2[r2].getAttribute("rel"), 10) === e2 && (a2.marker.resetPointsSize(), a2.marker.enlargeCurrentPoint(e2, s2[r2]));else a2.marker.resetPointsSize(), this.moveDynamicPointOnHover(e2, t3);
          }
        }, {
          key: "moveDynamicPointOnHover",
          value: function (t3, e2) {
            var i2,
              a2,
              s2,
              r2,
              o2 = this.w,
              n2 = this.ttCtx,
              l2 = new k(this.ctx),
              h2 = o2.globals.pointsArray,
              c2 = n2.tooltipUtil.getHoverMarkerSize(e2),
              d2 = o2.config.series[e2].type;
            if (!d2 || "column" !== d2 && "candlestick" !== d2 && "boxPlot" !== d2) {
              s2 = null === (i2 = h2[e2][t3]) || void 0 === i2 ? void 0 : i2[0], r2 = (null === (a2 = h2[e2][t3]) || void 0 === a2 ? void 0 : a2[1]) || 0;
              var g2 = o2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e2, "'] .apexcharts-series-markers path"));
              if (g2 && r2 < o2.globals.gridHeight && r2 > 0) {
                var u2 = g2.getAttribute("shape"),
                  f2 = l2.getMarkerPath(s2, r2, u2, 1.5 * c2);
                g2.setAttribute("d", f2);
              }
              this.moveXCrosshairs(s2), n2.fixedTooltip || this.moveTooltip(s2, r2, c2);
            }
          }
        }, {
          key: "moveDynamicPointsOnHover",
          value: function (t3) {
            var e2,
              i2 = this.ttCtx,
              a2 = i2.w,
              s2 = 0,
              r2 = 0,
              o2 = a2.globals.pointsArray,
              n2 = new V(this.ctx),
              l2 = new k(this.ctx);
            e2 = n2.getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
            var h2 = i2.tooltipUtil.getHoverMarkerSize(e2);
            o2[e2] && (s2 = o2[e2][t3][0], r2 = o2[e2][t3][1]);
            var c2 = i2.tooltipUtil.getAllMarkers();
            if (null !== c2) for (var d2 = 0; d2 < a2.globals.series.length; d2++) {
              var g2 = o2[d2];
              if (a2.globals.comboCharts && void 0 === g2 && c2.splice(d2, 0, null), g2 && g2.length) {
                var u2 = o2[d2][t3][1],
                  f2 = void 0;
                c2[d2].setAttribute("cx", s2);
                var p2 = c2[d2].getAttribute("shape");
                if ("rangeArea" === a2.config.chart.type && !a2.globals.comboCharts) {
                  var x2 = t3 + a2.globals.series[d2].length;
                  f2 = o2[d2][x2][1], u2 -= Math.abs(u2 - f2) / 2;
                }
                if (null !== u2 && !isNaN(u2) && u2 < a2.globals.gridHeight + h2 && u2 + h2 > 0) {
                  var b2 = l2.getMarkerPath(s2, u2, p2, h2);
                  c2[d2].setAttribute("d", b2);
                } else c2[d2].setAttribute("d", "");
              }
            }
            this.moveXCrosshairs(s2), i2.fixedTooltip || this.moveTooltip(s2, r2 || a2.globals.gridHeight, h2);
          }
        }, {
          key: "moveStickyTooltipOverBars",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = this.ttCtx,
              s2 = i2.globals.columnSeries ? i2.globals.columnSeries.length : i2.globals.series.length,
              r2 = s2 >= 2 && s2 % 2 == 0 ? Math.floor(s2 / 2) : Math.floor(s2 / 2) + 1;
            i2.globals.isBarHorizontal && (r2 = new V(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
            var o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r2, "'] path[j='").concat(t3, "']"));
            o2 || "number" != typeof e2 || (o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[data\\:realIndex='".concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='").concat(e2, "'] path[j='").concat(t3, "']")));
            var n2 = o2 ? parseFloat(o2.getAttribute("cx")) : 0,
              l2 = o2 ? parseFloat(o2.getAttribute("cy")) : 0,
              h2 = o2 ? parseFloat(o2.getAttribute("barWidth")) : 0,
              c2 = a2.getElGrid().getBoundingClientRect(),
              d2 = o2 && (o2.classList.contains("apexcharts-candlestick-area") || o2.classList.contains("apexcharts-boxPlot-area"));
            i2.globals.isXNumeric ? (o2 && !d2 && (n2 -= s2 % 2 != 0 ? h2 / 2 : 0), o2 && d2 && i2.globals.comboCharts && (n2 -= h2 / 2)) : i2.globals.isBarHorizontal || (n2 = a2.xAxisTicksPositions[t3 - 1] + a2.dataPointsDividedWidth / 2, isNaN(n2) && (n2 = a2.xAxisTicksPositions[t3] - a2.dataPointsDividedWidth / 2)), i2.globals.isBarHorizontal ? l2 -= a2.tooltipRect.ttHeight : i2.config.tooltip.followCursor ? l2 = a2.e.clientY - c2.top - a2.tooltipRect.ttHeight / 2 : l2 + a2.tooltipRect.ttHeight + 15 > i2.globals.gridHeight && (l2 = i2.globals.gridHeight), i2.globals.isBarHorizontal || this.moveXCrosshairs(n2), a2.fixedTooltip || this.moveTooltip(n2, l2 || i2.globals.gridHeight);
          }
        }]), t2;
      }(),
      vt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx, this.tooltipPosition = new bt(e2);
        }
        return s(t2, [{
          key: "drawDynamicPoints",
          value: function () {
            var t3 = this.w,
              e2 = new k(this.ctx),
              i2 = new W(this.ctx),
              a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
            a2 = p(a2), t3.config.chart.stacked && a2.sort(function (t4, e3) {
              return parseFloat(t4.getAttribute("data:realIndex")) - parseFloat(e3.getAttribute("data:realIndex"));
            });
            for (var s2 = 0; s2 < a2.length; s2++) {
              var r2 = a2[s2].querySelector(".apexcharts-series-markers-wrap");
              if (null !== r2) {
                var o2 = void 0,
                  n2 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
                "line" !== t3.config.chart.type && "area" !== t3.config.chart.type || t3.globals.comboCharts || t3.config.tooltip.intersect || (n2 += " no-pointer-events");
                var l2 = i2.getMarkerConfig({
                  cssClass: n2,
                  seriesIndex: Number(r2.getAttribute("data:realIndex"))
                });
                (o2 = e2.drawMarker(0, 0, l2)).node.setAttribute("default-marker-size", 0);
                var h2 = document.createElementNS(t3.globals.SVGNS, "g");
                h2.classList.add("apexcharts-series-markers"), h2.appendChild(o2.node), r2.appendChild(h2);
              }
            }
          }
        }, {
          key: "enlargeCurrentPoint",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
              a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
              s2 = this.w;
            "bubble" !== s2.config.chart.type && this.newPointSize(t3, e2);
            var r2 = e2.getAttribute("cx"),
              o2 = e2.getAttribute("cy");
            if (null !== i2 && null !== a2 && (r2 = i2, o2 = a2), this.tooltipPosition.moveXCrosshairs(r2), !this.fixedTooltip) {
              if ("radar" === s2.config.chart.type) {
                var n2 = this.ttCtx.getElGrid().getBoundingClientRect();
                r2 = this.ttCtx.e.clientX - n2.left;
              }
              this.tooltipPosition.moveTooltip(r2, o2, s2.config.markers.hover.size);
            }
          }
        }, {
          key: "enlargePoints",
          value: function (t3) {
            for (var e2 = this.w, i2 = this, a2 = this.ttCtx, s2 = t3, r2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o2 = e2.config.markers.hover.size, n2 = 0; n2 < r2.length; n2++) {
              var l2 = r2[n2].getAttribute("rel"),
                h2 = r2[n2].getAttribute("index");
              if (void 0 === o2 && (o2 = e2.globals.markers.size[h2] + e2.config.markers.hover.sizeOffset), s2 === parseInt(l2, 10)) {
                i2.newPointSize(s2, r2[n2]);
                var c2 = r2[n2].getAttribute("cx"),
                  d2 = r2[n2].getAttribute("cy");
                i2.tooltipPosition.moveXCrosshairs(c2), a2.fixedTooltip || i2.tooltipPosition.moveTooltip(c2, d2, o2);
              } else i2.oldPointSize(r2[n2]);
            }
          }
        }, {
          key: "newPointSize",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = i2.config.markers.hover.size,
              s2 = 0 === t3 ? e2.parentNode.firstChild : e2.parentNode.lastChild;
            if ("0" !== s2.getAttribute("default-marker-size")) {
              var r2 = parseInt(s2.getAttribute("index"), 10);
              void 0 === a2 && (a2 = i2.globals.markers.size[r2] + i2.config.markers.hover.sizeOffset), a2 < 0 && (a2 = 0);
              var o2 = this.ttCtx.tooltipUtil.getPathFromPoint(e2, a2);
              e2.setAttribute("d", o2);
            }
          }
        }, {
          key: "oldPointSize",
          value: function (t3) {
            var e2 = parseFloat(t3.getAttribute("default-marker-size")),
              i2 = this.ttCtx.tooltipUtil.getPathFromPoint(t3, e2);
            t3.setAttribute("d", i2);
          }
        }, {
          key: "resetPointsSize",
          value: function () {
            for (var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e2 = 0; e2 < t3.length; e2++) {
              var i2 = parseFloat(t3[e2].getAttribute("default-marker-size"));
              if (m.isNumber(i2) && i2 >= 0) {
                var a2 = this.ttCtx.tooltipUtil.getPathFromPoint(t3[e2], i2);
                t3[e2].setAttribute("d", a2);
              } else t3[e2].setAttribute("d", "M0,0");
            }
          }
        }]), t2;
      }(),
      mt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w;
          var a2 = this.w;
          this.ttCtx = e2, this.isVerticalGroupedRangeBar = !a2.globals.isBarHorizontal && "rangeBar" === a2.config.chart.type && a2.config.plotOptions.bar.rangeBarGroupRows;
        }
        return s(t2, [{
          key: "getAttr",
          value: function (t3, e2) {
            return parseFloat(t3.target.getAttribute(e2));
          }
        }, {
          key: "handleHeatTreeTooltip",
          value: function (t3) {
            var e2 = t3.e,
              i2 = t3.opt,
              a2 = t3.x,
              s2 = t3.y,
              r2 = t3.type,
              o2 = this.ttCtx,
              n2 = this.w;
            if (e2.target.classList.contains("apexcharts-".concat(r2, "-rect"))) {
              var l2 = this.getAttr(e2, "i"),
                h2 = this.getAttr(e2, "j"),
                c2 = this.getAttr(e2, "cx"),
                d2 = this.getAttr(e2, "cy"),
                g2 = this.getAttr(e2, "width"),
                u2 = this.getAttr(e2, "height");
              if (o2.tooltipLabels.drawSeriesTexts({
                ttItems: i2.ttItems,
                i: l2,
                j: h2,
                shared: false,
                e: e2
              }), n2.globals.capturedSeriesIndex = l2, n2.globals.capturedDataPointIndex = h2, a2 = c2 + o2.tooltipRect.ttWidth / 2 + g2, s2 = d2 + o2.tooltipRect.ttHeight / 2 - u2 / 2, o2.tooltipPosition.moveXCrosshairs(c2 + g2 / 2), a2 > n2.globals.gridWidth / 2 && (a2 = c2 - o2.tooltipRect.ttWidth / 2 + g2), o2.w.config.tooltip.followCursor) {
                var f2 = n2.globals.dom.elWrap.getBoundingClientRect();
                a2 = n2.globals.clientX - f2.left - (a2 > n2.globals.gridWidth / 2 ? o2.tooltipRect.ttWidth : 0), s2 = n2.globals.clientY - f2.top - (s2 > n2.globals.gridHeight / 2 ? o2.tooltipRect.ttHeight : 0);
              }
            }
            return {
              x: a2,
              y: s2
            };
          }
        }, {
          key: "handleMarkerTooltip",
          value: function (t3) {
            var e2,
              i2,
              a2 = t3.e,
              s2 = t3.opt,
              r2 = t3.x,
              o2 = t3.y,
              n2 = this.w,
              l2 = this.ttCtx;
            if (a2.target.classList.contains("apexcharts-marker")) {
              var h2 = parseInt(s2.paths.getAttribute("cx"), 10),
                c2 = parseInt(s2.paths.getAttribute("cy"), 10),
                d2 = parseFloat(s2.paths.getAttribute("val"));
              if (i2 = parseInt(s2.paths.getAttribute("rel"), 10), e2 = parseInt(s2.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l2.intersect) {
                var g2 = m.findAncestor(s2.paths, "apexcharts-series");
                g2 && (e2 = parseInt(g2.getAttribute("data:realIndex"), 10));
              }
              if (l2.tooltipLabels.drawSeriesTexts({
                ttItems: s2.ttItems,
                i: e2,
                j: i2,
                shared: !l2.showOnIntersect && n2.config.tooltip.shared,
                e: a2
              }), "mouseup" === a2.type && l2.markerClick(a2, e2, i2), n2.globals.capturedSeriesIndex = e2, n2.globals.capturedDataPointIndex = i2, r2 = h2, o2 = c2 + n2.globals.translateY - 1.4 * l2.tooltipRect.ttHeight, l2.w.config.tooltip.followCursor) {
                var u2 = l2.getElGrid().getBoundingClientRect();
                o2 = l2.e.clientY + n2.globals.translateY - u2.top;
              }
              d2 < 0 && (o2 = c2), l2.marker.enlargeCurrentPoint(i2, s2.paths, r2, o2);
            }
            return {
              x: r2,
              y: o2
            };
          }
        }, {
          key: "handleBarTooltip",
          value: function (t3) {
            var e2,
              i2,
              a2 = t3.e,
              s2 = t3.opt,
              r2 = this.w,
              o2 = this.ttCtx,
              n2 = o2.getElTooltip(),
              l2 = 0,
              h2 = 0,
              c2 = 0,
              d2 = this.getBarTooltipXY({
                e: a2,
                opt: s2
              });
            e2 = d2.i;
            var g2 = d2.j;
            r2.globals.capturedSeriesIndex = e2, r2.globals.capturedDataPointIndex = g2, r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars() || !r2.config.tooltip.shared ? (h2 = d2.x, c2 = d2.y, i2 = Array.isArray(r2.config.stroke.width) ? r2.config.stroke.width[e2] : r2.config.stroke.width, l2 = h2) : r2.globals.comboCharts || r2.config.tooltip.shared || (l2 /= 2), isNaN(c2) && (c2 = r2.globals.svgHeight - o2.tooltipRect.ttHeight);
            var u2 = parseInt(s2.paths.parentNode.getAttribute("data:realIndex"), 10);
            if (r2.globals.isMultipleYAxis ? r2.config.yaxis[u2] && r2.config.yaxis[u2].reversed : r2.config.yaxis[0].reversed, h2 + o2.tooltipRect.ttWidth > r2.globals.gridWidth ? h2 -= o2.tooltipRect.ttWidth : h2 < 0 && (h2 = 0), o2.w.config.tooltip.followCursor) {
              var f2 = o2.getElGrid().getBoundingClientRect();
              c2 = o2.e.clientY - f2.top;
            }
            null === o2.tooltip && (o2.tooltip = r2.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r2.config.tooltip.shared || (r2.globals.comboBarCount > 0 ? o2.tooltipPosition.moveXCrosshairs(l2 + i2 / 2) : o2.tooltipPosition.moveXCrosshairs(l2)), !o2.fixedTooltip && (!r2.config.tooltip.shared || r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars()) && (c2 = c2 + r2.globals.translateY - o2.tooltipRect.ttHeight / 2, n2.style.left = h2 + r2.globals.translateX + "px", n2.style.top = c2 + "px");
          }
        }, {
          key: "getBarTooltipXY",
          value: function (t3) {
            var e2 = this,
              i2 = t3.e,
              a2 = t3.opt,
              s2 = this.w,
              r2 = null,
              o2 = this.ttCtx,
              n2 = 0,
              l2 = 0,
              h2 = 0,
              c2 = 0,
              d2 = 0,
              g2 = i2.target.classList;
            if (g2.contains("apexcharts-bar-area") || g2.contains("apexcharts-candlestick-area") || g2.contains("apexcharts-boxPlot-area") || g2.contains("apexcharts-rangebar-area")) {
              var u2 = i2.target,
                f2 = u2.getBoundingClientRect(),
                p2 = a2.elGrid.getBoundingClientRect(),
                x2 = f2.height;
              d2 = f2.height;
              var b2 = f2.width,
                v2 = parseInt(u2.getAttribute("cx"), 10),
                m2 = parseInt(u2.getAttribute("cy"), 10);
              c2 = parseFloat(u2.getAttribute("barWidth"));
              var y2 = "touchmove" === i2.type ? i2.touches[0].clientX : i2.clientX;
              r2 = parseInt(u2.getAttribute("j"), 10), n2 = parseInt(u2.parentNode.getAttribute("rel"), 10) - 1;
              var w2 = u2.getAttribute("data-range-y1"),
                k2 = u2.getAttribute("data-range-y2");
              s2.globals.comboCharts && (n2 = parseInt(u2.parentNode.getAttribute("data:realIndex"), 10));
              var A2 = function (t4) {
                  return s2.globals.isXNumeric ? v2 - b2 / 2 : e2.isVerticalGroupedRangeBar ? v2 + b2 / 2 : v2 - o2.dataPointsDividedWidth + b2 / 2;
                },
                S2 = function () {
                  return m2 - o2.dataPointsDividedHeight + x2 / 2 - o2.tooltipRect.ttHeight / 2;
                };
              o2.tooltipLabels.drawSeriesTexts({
                ttItems: a2.ttItems,
                i: n2,
                j: r2,
                y1: w2 ? parseInt(w2, 10) : null,
                y2: k2 ? parseInt(k2, 10) : null,
                shared: !o2.showOnIntersect && s2.config.tooltip.shared,
                e: i2
              }), s2.config.tooltip.followCursor ? s2.globals.isBarHorizontal ? (l2 = y2 - p2.left + 15, h2 = S2()) : (l2 = A2(), h2 = i2.clientY - p2.top - o2.tooltipRect.ttHeight / 2 - 15) : s2.globals.isBarHorizontal ? ((l2 = v2) < o2.xyRatios.baseLineInvertedY && (l2 = v2 - o2.tooltipRect.ttWidth), h2 = S2()) : (l2 = A2(), h2 = m2);
            }
            return {
              x: l2,
              y: h2,
              barHeight: d2,
              barWidth: c2,
              i: n2,
              j: r2
            };
          }
        }]), t2;
      }(),
      yt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.ttCtx = e2;
        }
        return s(t2, [{
          key: "drawXaxisTooltip",
          value: function () {
            var t3 = this.w,
              e2 = this.ttCtx,
              i2 = "bottom" === t3.config.xaxis.position;
            e2.xaxisOffY = i2 ? t3.globals.gridHeight + 1 : -t3.globals.xAxisHeight - t3.config.xaxis.axisTicks.height + 3;
            var a2 = i2 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
              s2 = t3.globals.dom.elWrap;
            e2.isXAxisTooltipEnabled && null === t3.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e2.xaxisTooltip = document.createElement("div"), e2.xaxisTooltip.setAttribute("class", a2 + " apexcharts-theme-" + t3.config.tooltip.theme), s2.appendChild(e2.xaxisTooltip), e2.xaxisTooltipText = document.createElement("div"), e2.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e2.xaxisTooltipText.style.fontFamily = t3.config.xaxis.tooltip.style.fontFamily || t3.config.chart.fontFamily, e2.xaxisTooltipText.style.fontSize = t3.config.xaxis.tooltip.style.fontSize, e2.xaxisTooltip.appendChild(e2.xaxisTooltipText));
          }
        }, {
          key: "drawYaxisTooltip",
          value: function () {
            for (var t3 = this.w, e2 = this.ttCtx, i2 = 0; i2 < t3.config.yaxis.length; i2++) {
              var a2 = t3.config.yaxis[i2].opposite || t3.config.yaxis[i2].crosshairs.opposite;
              e2.yaxisOffX = a2 ? t3.globals.gridWidth + 1 : 1;
              var s2 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2, a2 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left"),
                r2 = t3.globals.dom.elWrap;
              null === t3.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i2)) && (e2.yaxisTooltip = document.createElement("div"), e2.yaxisTooltip.setAttribute("class", s2 + " apexcharts-theme-" + t3.config.tooltip.theme), r2.appendChild(e2.yaxisTooltip), 0 === i2 && (e2.yaxisTooltipText = []), e2.yaxisTooltipText[i2] = document.createElement("div"), e2.yaxisTooltipText[i2].classList.add("apexcharts-yaxistooltip-text"), e2.yaxisTooltip.appendChild(e2.yaxisTooltipText[i2]));
            }
          }
        }, {
          key: "setXCrosshairWidth",
          value: function () {
            var t3 = this.w,
              e2 = this.ttCtx,
              i2 = e2.getElXCrosshairs();
            if (e2.xcrosshairsWidth = parseInt(t3.config.xaxis.crosshairs.width, 10), t3.globals.comboCharts) {
              var a2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
              if (null !== a2 && "barWidth" === t3.config.xaxis.crosshairs.width) {
                var s2 = parseFloat(a2.getAttribute("barWidth"));
                e2.xcrosshairsWidth = s2;
              } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
                var r2 = t3.globals.labels.length;
                e2.xcrosshairsWidth = t3.globals.gridWidth / r2;
              }
            } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
              var o2 = t3.globals.labels.length;
              e2.xcrosshairsWidth = t3.globals.gridWidth / o2;
            } else if ("barWidth" === t3.config.xaxis.crosshairs.width) {
              var n2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
              if (null !== n2) {
                var l2 = parseFloat(n2.getAttribute("barWidth"));
                e2.xcrosshairsWidth = l2;
              } else e2.xcrosshairsWidth = 1;
            }
            t3.globals.isBarHorizontal && (e2.xcrosshairsWidth = 0), null !== i2 && e2.xcrosshairsWidth > 0 && i2.setAttribute("width", e2.xcrosshairsWidth);
          }
        }, {
          key: "handleYCrosshair",
          value: function () {
            var t3 = this.w,
              e2 = this.ttCtx;
            e2.ycrosshairs = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e2.ycrosshairsHidden = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
          }
        }, {
          key: "drawYaxisTooltipText",
          value: function (t3, e2, i2) {
            var a2 = this.ttCtx,
              s2 = this.w,
              r2 = s2.globals,
              o2 = r2.seriesYAxisMap[t3];
            if (a2.yaxisTooltips[t3] && o2.length > 0) {
              var n2 = r2.yLabelFormatters[t3],
                l2 = a2.getElGrid().getBoundingClientRect(),
                h2 = o2[0],
                c2 = 0;
              i2.yRatio.length > 1 && (c2 = h2);
              var d2 = (e2 - l2.top) * i2.yRatio[c2],
                g2 = r2.maxYArr[h2] - r2.minYArr[h2],
                u2 = r2.minYArr[h2] + (g2 - d2);
              s2.config.yaxis[t3].reversed && (u2 = r2.maxYArr[h2] - (g2 - d2)), a2.tooltipPosition.moveYCrosshairs(e2 - l2.top), a2.yaxisTooltipText[t3].innerHTML = n2(u2), a2.tooltipPosition.moveYAxisTooltip(t3);
            }
          }
        }]), t2;
      }(),
      wt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
          var a2 = this.w;
          this.tConfig = a2.config.tooltip, this.tooltipUtil = new pt(this), this.tooltipLabels = new xt(this), this.tooltipPosition = new bt(this), this.marker = new vt(this), this.intersect = new mt(this), this.axesTooltip = new yt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a2.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
        }
        return s(t2, [{
          key: "getElTooltip",
          value: function (t3) {
            return t3 || (t3 = this), t3.w.globals.dom.baseEl ? t3.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
          }
        }, {
          key: "getElXCrosshairs",
          value: function () {
            return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
          }
        }, {
          key: "getElGrid",
          value: function () {
            return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
          }
        }, {
          key: "drawTooltip",
          value: function (t3) {
            var e2 = this.w;
            this.xyRatios = t3, this.isXAxisTooltipEnabled = e2.config.xaxis.tooltip.enabled && e2.globals.axisCharts, this.yaxisTooltips = e2.config.yaxis.map(function (t4, i3) {
              return !!(t4.show && t4.tooltip.enabled && e2.globals.axisCharts);
            }), this.allTooltipSeriesGroups = [], e2.globals.axisCharts || (this.showTooltipTitle = false);
            var i2 = document.createElement("div");
            if (i2.classList.add("apexcharts-tooltip"), e2.config.tooltip.cssClass && i2.classList.add(e2.config.tooltip.cssClass), i2.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e2.globals.dom.elWrap.appendChild(i2), e2.globals.axisCharts) {
              this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
              var a2 = new q(this.ctx);
              this.xAxisTicksPositions = a2.getXAxisTicksPositions();
            }
            if (!e2.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e2.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e2.config.markers.size && 0 !== e2.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e2.globals.collapsedSeries.length !== e2.globals.series.length) {
              this.dataPointsDividedHeight = e2.globals.gridHeight / e2.globals.dataPoints, this.dataPointsDividedWidth = e2.globals.gridWidth / e2.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e2.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i2.appendChild(this.tooltipTitle));
              var s2 = e2.globals.series.length;
              (e2.globals.xyCharts || e2.globals.comboCharts) && this.tConfig.shared && (s2 = this.showOnIntersect ? 1 : e2.globals.series.length), this.legendLabels = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s2), this.addSVGEvents();
            }
          }
        }, {
          key: "createTTElements",
          value: function (t3) {
            for (var e2 = this, i2 = this.w, a2 = [], s2 = this.getElTooltip(), r2 = function (r3) {
                var o3 = document.createElement("div");
                o3.classList.add("apexcharts-tooltip-series-group", "apexcharts-tooltip-series-group-".concat(r3)), o3.style.order = i2.config.tooltip.inverseOrder ? t3 - r3 : r3 + 1;
                var n2 = document.createElement("span");
                n2.classList.add("apexcharts-tooltip-marker"), n2.style.backgroundColor = i2.globals.colors[r3], o3.appendChild(n2);
                var l2 = document.createElement("div");
                l2.classList.add("apexcharts-tooltip-text"), l2.style.fontFamily = e2.tConfig.style.fontFamily || i2.config.chart.fontFamily, l2.style.fontSize = e2.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function (t4) {
                  var e3 = document.createElement("div");
                  e3.classList.add("apexcharts-tooltip-".concat(t4, "-group"));
                  var i3 = document.createElement("span");
                  i3.classList.add("apexcharts-tooltip-text-".concat(t4, "-label")), e3.appendChild(i3);
                  var a3 = document.createElement("span");
                  a3.classList.add("apexcharts-tooltip-text-".concat(t4, "-value")), e3.appendChild(a3), l2.appendChild(e3);
                }), o3.appendChild(l2), s2.appendChild(o3), a2.push(o3);
              }, o2 = 0; o2 < t3; o2++) r2(o2);
            return a2;
          }
        }, {
          key: "addSVGEvents",
          value: function () {
            var t3 = this.w,
              e2 = t3.config.chart.type,
              i2 = this.getElTooltip(),
              a2 = !("bar" !== e2 && "candlestick" !== e2 && "boxPlot" !== e2 && "rangeBar" !== e2),
              s2 = "area" === e2 || "line" === e2 || "scatter" === e2 || "bubble" === e2 || "radar" === e2,
              r2 = t3.globals.dom.Paper.node,
              o2 = this.getElGrid();
            o2 && (this.seriesBound = o2.getBoundingClientRect());
            var n2,
              l2 = [],
              h2 = [],
              c2 = {
                hoverArea: r2,
                elGrid: o2,
                tooltipEl: i2,
                tooltipY: l2,
                tooltipX: h2,
                ttItems: this.ttItems
              };
            if (t3.globals.axisCharts && (s2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e2 && "treemap" !== e2 || (n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n2 && n2.length)) for (var d2 = 0; d2 < n2.length; d2++) l2.push(n2[d2].getAttribute("cy")), h2.push(n2[d2].getAttribute("cx"));
            if (t3.globals.xyCharts && !this.showOnIntersect || t3.globals.comboCharts && !this.showOnIntersect || a2 && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([r2], c2);else if (a2 && !t3.globals.comboCharts || s2 && this.showOnIntersect) this.addDatapointEventsListeners(c2);else if (!t3.globals.axisCharts || "heatmap" === e2 || "treemap" === e2) {
              var g2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
              this.addPathsEventListeners(g2, c2);
            }
            if (this.showOnIntersect) {
              var u2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
              u2.length > 0 && this.addPathsEventListeners(u2, c2), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c2);
            }
          }
        }, {
          key: "drawFixedTooltipRect",
          value: function () {
            var t3 = this.w,
              e2 = this.getElTooltip(),
              i2 = e2.getBoundingClientRect(),
              a2 = i2.width + 10,
              s2 = i2.height + 10,
              r2 = this.tConfig.fixed.offsetX,
              o2 = this.tConfig.fixed.offsetY,
              n2 = this.tConfig.fixed.position.toLowerCase();
            return n2.indexOf("right") > -1 && (r2 = r2 + t3.globals.svgWidth - a2 + 10), n2.indexOf("bottom") > -1 && (o2 = o2 + t3.globals.svgHeight - s2 - 10), e2.style.left = r2 + "px", e2.style.top = o2 + "px", {
              x: r2,
              y: o2,
              ttWidth: a2,
              ttHeight: s2
            };
          }
        }, {
          key: "addDatapointEventsListeners",
          value: function (t3) {
            var e2 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
            this.addPathsEventListeners(e2, t3);
          }
        }, {
          key: "addPathsEventListeners",
          value: function (t3, e2) {
            for (var i2 = this, a2 = function (a3) {
                var s3 = {
                  paths: t3[a3],
                  tooltipEl: e2.tooltipEl,
                  tooltipY: e2.tooltipY,
                  tooltipX: e2.tooltipX,
                  elGrid: e2.elGrid,
                  hoverArea: e2.hoverArea,
                  ttItems: e2.ttItems
                };
                ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function (e3) {
                  return t3[a3].addEventListener(e3, i2.onSeriesHover.bind(i2, s3), {
                    capture: false,
                    passive: true
                  });
                });
              }, s2 = 0; s2 < t3.length; s2++) a2(s2);
          }
        }, {
          key: "onSeriesHover",
          value: function (t3, e2) {
            var i2 = this,
              a2 = Date.now() - this.lastHoverTime;
            a2 >= 100 ? this.seriesHover(t3, e2) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function () {
              i2.seriesHover(t3, e2);
            }, 100 - a2));
          }
        }, {
          key: "seriesHover",
          value: function (t3, e2) {
            var i2 = this;
            this.lastHoverTime = Date.now();
            var a2 = [],
              s2 = this.w;
            s2.config.chart.group && (a2 = this.ctx.getGroupedCharts()), s2.globals.axisCharts && (s2.globals.minX === -1 / 0 && s2.globals.maxX === 1 / 0 || 0 === s2.globals.dataPoints) || (a2.length ? a2.forEach(function (a3) {
              var s3 = i2.getElTooltip(a3),
                r2 = {
                  paths: t3.paths,
                  tooltipEl: s3,
                  tooltipY: t3.tooltipY,
                  tooltipX: t3.tooltipX,
                  elGrid: t3.elGrid,
                  hoverArea: t3.hoverArea,
                  ttItems: a3.w.globals.tooltip.ttItems
                };
              a3.w.globals.minX === i2.w.globals.minX && a3.w.globals.maxX === i2.w.globals.maxX && a3.w.globals.tooltip.seriesHoverByContext({
                chartCtx: a3,
                ttCtx: a3.w.globals.tooltip,
                opt: r2,
                e: e2
              });
            }) : this.seriesHoverByContext({
              chartCtx: this.ctx,
              ttCtx: this.w.globals.tooltip,
              opt: t3,
              e: e2
            }));
          }
        }, {
          key: "seriesHoverByContext",
          value: function (t3) {
            var e2 = t3.chartCtx,
              i2 = t3.ttCtx,
              a2 = t3.opt,
              s2 = t3.e,
              r2 = e2.w,
              o2 = this.getElTooltip(e2);
            if (o2) {
              if (i2.tooltipRect = {
                x: 0,
                y: 0,
                ttWidth: o2.getBoundingClientRect().width,
                ttHeight: o2.getBoundingClientRect().height
              }, i2.e = s2, i2.tooltipUtil.hasBars() && !r2.globals.comboCharts && !i2.isBarShared) {
                if (this.tConfig.onDatasetHover.highlightDataSeries) new V(e2).toggleSeriesOnHover(s2, s2.target.parentNode);
              }
              i2.fixedTooltip && i2.drawFixedTooltipRect(), r2.globals.axisCharts ? i2.axisChartsTooltips({
                e: s2,
                opt: a2,
                tooltipRect: i2.tooltipRect
              }) : i2.nonAxisChartsTooltips({
                e: s2,
                opt: a2,
                tooltipRect: i2.tooltipRect
              });
            }
          }
        }, {
          key: "axisChartsTooltips",
          value: function (t3) {
            var e2,
              i2,
              a2 = t3.e,
              s2 = t3.opt,
              r2 = this.w,
              o2 = s2.elGrid.getBoundingClientRect(),
              n2 = "touchmove" === a2.type ? a2.touches[0].clientX : a2.clientX,
              l2 = "touchmove" === a2.type ? a2.touches[0].clientY : a2.clientY;
            if (this.clientY = l2, this.clientX = n2, r2.globals.capturedSeriesIndex = -1, r2.globals.capturedDataPointIndex = -1, l2 < o2.top || l2 > o2.top + o2.height) this.handleMouseOut(s2);else {
              if (Array.isArray(this.tConfig.enabledOnSeries) && !r2.config.tooltip.shared) {
                var h2 = parseInt(s2.paths.getAttribute("index"), 10);
                if (this.tConfig.enabledOnSeries.indexOf(h2) < 0) return void this.handleMouseOut(s2);
              }
              var c2 = this.getElTooltip(),
                d2 = this.getElXCrosshairs(),
                g2 = [];
              r2.config.chart.group && (g2 = this.ctx.getSyncedCharts());
              var u2 = r2.globals.xyCharts || "bar" === r2.config.chart.type && !r2.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r2.globals.comboCharts && this.tooltipUtil.hasBars();
              if ("mousemove" === a2.type || "touchmove" === a2.type || "mouseup" === a2.type) {
                if (r2.globals.collapsedSeries.length + r2.globals.ancillaryCollapsedSeries.length === r2.globals.series.length) return;
                null !== d2 && d2.classList.add("apexcharts-active");
                var f2 = this.yaxisTooltips.filter(function (t4) {
                  return true === t4;
                });
                if (null !== this.ycrosshairs && f2.length && this.ycrosshairs.classList.add("apexcharts-active"), u2 && !this.showOnIntersect || g2.length > 1) this.handleStickyTooltip(a2, n2, l2, s2);else if ("heatmap" === r2.config.chart.type || "treemap" === r2.config.chart.type) {
                  var p2 = this.intersect.handleHeatTreeTooltip({
                    e: a2,
                    opt: s2,
                    x: e2,
                    y: i2,
                    type: r2.config.chart.type
                  });
                  e2 = p2.x, i2 = p2.y, c2.style.left = e2 + "px", c2.style.top = i2 + "px";
                } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({
                  e: a2,
                  opt: s2
                }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({
                  e: a2,
                  opt: s2,
                  x: e2,
                  y: i2
                });
                if (this.yaxisTooltips.length) for (var x2 = 0; x2 < r2.config.yaxis.length; x2++) this.axesTooltip.drawYaxisTooltipText(x2, l2, this.xyRatios);
                r2.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), s2.tooltipEl.classList.add("apexcharts-active");
              } else "mouseout" !== a2.type && "touchend" !== a2.type || this.handleMouseOut(s2);
            }
          }
        }, {
          key: "nonAxisChartsTooltips",
          value: function (t3) {
            var e2 = t3.e,
              i2 = t3.opt,
              a2 = t3.tooltipRect,
              s2 = this.w,
              r2 = i2.paths.getAttribute("rel"),
              o2 = this.getElTooltip(),
              n2 = s2.globals.dom.elWrap.getBoundingClientRect();
            if ("mousemove" === e2.type || "touchmove" === e2.type) {
              s2.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), o2.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({
                ttItems: i2.ttItems,
                i: parseInt(r2, 10) - 1,
                shared: false
              });
              var l2 = s2.globals.clientX - n2.left - a2.ttWidth / 2,
                h2 = s2.globals.clientY - n2.top - a2.ttHeight - 10;
              if (o2.style.left = l2 + "px", o2.style.top = h2 + "px", s2.config.legend.tooltipHoverFormatter) {
                var c2 = r2 - 1,
                  d2 = (0, s2.config.legend.tooltipHoverFormatter)(this.legendLabels[c2].getAttribute("data:default-text"), {
                    seriesIndex: c2,
                    dataPointIndex: c2,
                    w: s2
                  });
                this.legendLabels[c2].innerHTML = d2;
              }
            } else "mouseout" !== e2.type && "touchend" !== e2.type || (o2.classList.remove("apexcharts-active"), s2.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), s2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t4) {
              var e3 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e3);
            }));
          }
        }, {
          key: "handleStickyTooltip",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = this.tooltipUtil.getNearestValues({
                context: this,
                hoverArea: a2.hoverArea,
                elGrid: a2.elGrid,
                clientX: e2,
                clientY: i2
              }),
              o2 = r2.j,
              n2 = r2.capturedSeries;
            s2.globals.collapsedSeriesIndices.includes(n2) && (n2 = null);
            var l2 = a2.elGrid.getBoundingClientRect();
            if (r2.hoverX < 0 || r2.hoverX > l2.width) this.handleMouseOut(a2);else if (null !== n2) this.handleStickyCapturedSeries(t3, n2, a2, o2);else if (this.tooltipUtil.isXoverlap(o2) || s2.globals.isBarHorizontal) {
              var h2 = s2.globals.series.findIndex(function (t4, e3) {
                return !s2.globals.collapsedSeriesIndices.includes(e3);
              });
              this.create(t3, this, h2, o2, a2.ttItems);
            }
          }
        }, {
          key: "handleStickyCapturedSeries",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w;
            if (!this.tConfig.shared && null === s2.globals.series[e2][a2]) return void this.handleMouseOut(i2);
            if (void 0 !== s2.globals.series[e2][a2]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a2) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t3, this, e2, a2, i2.ttItems) : this.create(t3, this, e2, a2, i2.ttItems, false);else if (this.tooltipUtil.isXoverlap(a2)) {
              var r2 = s2.globals.series.findIndex(function (t4, e3) {
                return !s2.globals.collapsedSeriesIndices.includes(e3);
              });
              this.create(t3, this, r2, a2, i2.ttItems);
            }
          }
        }, {
          key: "deactivateHoverFilter",
          value: function () {
            for (var t3 = this.w, e2 = new k(this.ctx), i2 = t3.globals.dom.Paper.select(".apexcharts-bar-area"), a2 = 0; a2 < i2.length; a2++) e2.pathMouseLeave(i2[a2]);
          }
        }, {
          key: "handleMouseOut",
          value: function (t3) {
            var e2 = this.w,
              i2 = this.getElXCrosshairs();
            if (e2.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), t3.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e2.config.chart.type && this.marker.resetPointsSize(), null !== i2 && i2.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
              null === this.yaxisTTEls && (this.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
              for (var a2 = 0; a2 < this.yaxisTTEls.length; a2++) this.yaxisTTEls[a2].classList.remove("apexcharts-active");
            }
            e2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t4) {
              var e3 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e3);
            });
          }
        }, {
          key: "markerClick",
          value: function (t3, e2, i2) {
            var a2 = this.w;
            "function" == typeof a2.config.chart.events.markerClick && a2.config.chart.events.markerClick(t3, this.ctx, {
              seriesIndex: e2,
              dataPointIndex: i2,
              w: a2
            }), this.ctx.events.fireEvent("markerClick", [t3, this.ctx, {
              seriesIndex: e2,
              dataPointIndex: i2,
              w: a2
            }]);
          }
        }, {
          key: "create",
          value: function (t3, e2, i2, a2, s2) {
            var r2,
              o2,
              n2,
              l2,
              h2,
              c2,
              d2,
              u2,
              f2,
              p2,
              x2,
              b2,
              v2,
              m2,
              y2,
              w2,
              A2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
              S2 = this.w,
              C2 = e2;
            "mouseup" === t3.type && this.markerClick(t3, i2, a2), null === A2 && (A2 = this.tConfig.shared);
            var L2 = this.tooltipUtil.hasMarkers(i2),
              P2 = this.tooltipUtil.getElBars();
            if (S2.config.legend.tooltipHoverFormatter) {
              var M2 = S2.config.legend.tooltipHoverFormatter,
                I2 = Array.from(this.legendLabels);
              I2.forEach(function (t4) {
                var e3 = t4.getAttribute("data:default-text");
                t4.innerHTML = decodeURIComponent(e3);
              });
              for (var T2 = 0; T2 < I2.length; T2++) {
                var z2 = I2[T2],
                  X2 = parseInt(z2.getAttribute("i"), 10),
                  E2 = decodeURIComponent(z2.getAttribute("data:default-text")),
                  Y2 = M2(E2, {
                    seriesIndex: A2 ? X2 : i2,
                    dataPointIndex: a2,
                    w: S2
                  });
                if (A2) z2.innerHTML = S2.globals.collapsedSeriesIndices.indexOf(X2) < 0 ? Y2 : E2;else if (z2.innerHTML = X2 === i2 ? Y2 : E2, i2 === X2) break;
              }
            }
            var R2 = g(g({
              ttItems: s2,
              i: i2,
              j: a2
            }, void 0 !== (null === (r2 = S2.globals.seriesRange) || void 0 === r2 || null === (o2 = r2[i2]) || void 0 === o2 || null === (n2 = o2[a2]) || void 0 === n2 || null === (l2 = n2.y[0]) || void 0 === l2 ? void 0 : l2.y1) && {
              y1: null === (h2 = S2.globals.seriesRange) || void 0 === h2 || null === (c2 = h2[i2]) || void 0 === c2 || null === (d2 = c2[a2]) || void 0 === d2 || null === (u2 = d2.y[0]) || void 0 === u2 ? void 0 : u2.y1
            }), void 0 !== (null === (f2 = S2.globals.seriesRange) || void 0 === f2 || null === (p2 = f2[i2]) || void 0 === p2 || null === (x2 = p2[a2]) || void 0 === x2 || null === (b2 = x2.y[0]) || void 0 === b2 ? void 0 : b2.y2) && {
              y2: null === (v2 = S2.globals.seriesRange) || void 0 === v2 || null === (m2 = v2[i2]) || void 0 === m2 || null === (y2 = m2[a2]) || void 0 === y2 || null === (w2 = y2.y[0]) || void 0 === w2 ? void 0 : w2.y2
            });
            if (A2) {
              if (C2.tooltipLabels.drawSeriesTexts(g(g({}, R2), {}, {
                shared: !this.showOnIntersect && this.tConfig.shared
              })), L2) S2.globals.markers.largestSize > 0 ? C2.marker.enlargePoints(a2) : C2.tooltipPosition.moveDynamicPointsOnHover(a2);else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P2), this.barSeriesHeight > 0)) {
                var F2 = new k(this.ctx),
                  D2 = S2.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a2, "']"));
                this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a2, i2);
                for (var H2 = 0; H2 < D2.length; H2++) F2.pathMouseEnter(D2[H2]);
              }
            } else C2.tooltipLabels.drawSeriesTexts(g({
              shared: false
            }, R2)), this.tooltipUtil.hasBars() && C2.tooltipPosition.moveStickyTooltipOverBars(a2, i2), L2 && C2.tooltipPosition.moveMarkers(i2, a2);
          }
        }]), t2;
      }(),
      kt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.barCtx = e2, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
        }
        return s(t2, [{
          key: "handleBarDataLabels",
          value: function (t3) {
            var e2,
              i2,
              a2 = t3.x,
              s2 = t3.y,
              r2 = t3.y1,
              o2 = t3.y2,
              n2 = t3.i,
              l2 = t3.j,
              h2 = t3.realIndex,
              c2 = t3.columnGroupIndex,
              d2 = t3.series,
              u2 = t3.barHeight,
              f2 = t3.barWidth,
              p2 = t3.barXPosition,
              x2 = t3.barYPosition,
              b2 = t3.visibleSeries,
              v2 = t3.renderedPath,
              m2 = this.w,
              y2 = new k(this.barCtx.ctx),
              w2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h2] : this.barCtx.strokeWidth;
            m2.globals.isXNumeric && !m2.globals.isBarHorizontal ? (e2 = a2 + parseFloat(f2 * (b2 + 1)), i2 = s2 + parseFloat(u2 * (b2 + 1)) - w2) : (e2 = a2 + parseFloat(f2 * b2), i2 = s2 + parseFloat(u2 * b2));
            var A2,
              S2 = null,
              C2 = a2,
              L2 = s2,
              P2 = {},
              M2 = m2.config.dataLabels,
              I2 = this.barCtx.barOptions.dataLabels,
              T2 = this.barCtx.barOptions.dataLabels.total;
            void 0 !== x2 && this.barCtx.isRangeBar && (i2 = x2, L2 = x2), void 0 !== p2 && this.barCtx.isVerticalGroupedRangeBar && (e2 = p2, C2 = p2);
            var z2 = M2.offsetX,
              X2 = M2.offsetY,
              E2 = {
                width: 0,
                height: 0
              };
            if (m2.config.dataLabels.enabled) {
              var Y2 = m2.globals.series[n2][l2];
              E2 = y2.getTextRects(m2.config.dataLabels.formatter ? m2.config.dataLabels.formatter(Y2, g(g({}, m2), {}, {
                seriesIndex: n2,
                dataPointIndex: l2,
                w: m2
              })) : m2.globals.yLabelFormatters[0](Y2), parseFloat(M2.style.fontSize));
            }
            var R2 = {
              x: a2,
              y: s2,
              i: n2,
              j: l2,
              realIndex: h2,
              columnGroupIndex: c2,
              renderedPath: v2,
              bcx: e2,
              bcy: i2,
              barHeight: u2,
              barWidth: f2,
              textRects: E2,
              strokeWidth: w2,
              dataLabelsX: C2,
              dataLabelsY: L2,
              dataLabelsConfig: M2,
              barDataLabelsConfig: I2,
              barTotalDataLabelsConfig: T2,
              offX: z2,
              offY: X2
            };
            return P2 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(R2) : this.calculateColumnsDataLabelsPosition(R2), v2.attr({
              cy: P2.bcy,
              cx: P2.bcx,
              j: l2,
              val: m2.globals.series[n2][l2],
              barHeight: u2,
              barWidth: f2
            }), A2 = this.drawCalculatedDataLabels({
              x: P2.dataLabelsX,
              y: P2.dataLabelsY,
              val: this.barCtx.isRangeBar ? [r2, o2] : "100%" === m2.config.chart.stackType ? d2[h2][l2] : m2.globals.series[h2][l2],
              i: h2,
              j: l2,
              barWidth: f2,
              barHeight: u2,
              textRects: E2,
              dataLabelsConfig: M2
            }), m2.config.chart.stacked && T2.enabled && (S2 = this.drawTotalDataLabels({
              x: P2.totalDataLabelsX,
              y: P2.totalDataLabelsY,
              barWidth: f2,
              barHeight: u2,
              realIndex: h2,
              textAnchor: P2.totalDataLabelsAnchor,
              val: this.getStackedTotalDataLabel({
                realIndex: h2,
                j: l2
              }),
              dataLabelsConfig: M2,
              barTotalDataLabelsConfig: T2
            })), {
              dataLabels: A2,
              totalDataLabels: S2
            };
          }
        }, {
          key: "getStackedTotalDataLabel",
          value: function (t3) {
            var e2 = t3.realIndex,
              i2 = t3.j,
              a2 = this.w,
              s2 = this.barCtx.stackedSeriesTotals[i2];
            return this.totalFormatter && (s2 = this.totalFormatter(s2, g(g({}, a2), {}, {
              seriesIndex: e2,
              dataPointIndex: i2,
              w: a2
            }))), s2;
          }
        }, {
          key: "calculateColumnsDataLabelsPosition",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3.i,
              a2 = t3.j,
              s2 = t3.realIndex;
            t3.columnGroupIndex;
            var r2,
              o2,
              n2 = t3.y,
              l2 = t3.bcx,
              h2 = t3.barWidth,
              c2 = t3.barHeight,
              d2 = t3.textRects,
              g2 = t3.dataLabelsX,
              u2 = t3.dataLabelsY,
              f2 = t3.dataLabelsConfig,
              p2 = t3.barDataLabelsConfig,
              x2 = t3.barTotalDataLabelsConfig,
              b2 = t3.strokeWidth,
              v2 = t3.offX,
              m2 = t3.offY,
              y2 = l2;
            c2 = Math.abs(c2);
            var w2 = "vertical" === e2.config.plotOptions.bar.dataLabels.orientation,
              A2 = this.barCtx.barHelpers.getZeroValueEncounters({
                i: i2,
                j: a2
              }).zeroEncounters;
            l2 -= b2 / 2;
            var S2 = e2.globals.gridWidth / e2.globals.dataPoints;
            if (this.barCtx.isVerticalGroupedRangeBar ? g2 += h2 / 2 : (g2 = e2.globals.isXNumeric ? l2 - h2 / 2 + v2 : l2 - S2 + h2 / 2 + v2, A2 > 0 && e2.config.plotOptions.bar.hideZeroBarsWhenGrouped && (g2 -= h2 * A2)), w2) {
              g2 = g2 + d2.height / 2 - b2 / 2 - 2;
            }
            var C2 = e2.globals.series[i2][a2] < 0,
              L2 = n2;
            switch (this.barCtx.isReversed && (L2 = n2 + (C2 ? c2 : -c2)), p2.position) {
              case "center":
                u2 = w2 ? C2 ? L2 - c2 / 2 + m2 : L2 + c2 / 2 - m2 : C2 ? L2 - c2 / 2 + d2.height / 2 + m2 : L2 + c2 / 2 + d2.height / 2 - m2;
                break;
              case "bottom":
                u2 = w2 ? C2 ? L2 - c2 + m2 : L2 + c2 - m2 : C2 ? L2 - c2 + d2.height + b2 + m2 : L2 + c2 - d2.height / 2 + b2 - m2;
                break;
              case "top":
                u2 = w2 ? C2 ? L2 + m2 : L2 - m2 : C2 ? L2 - d2.height / 2 - m2 : L2 + d2.height + m2;
            }
            if (this.barCtx.lastActiveBarSerieIndex === s2 && x2.enabled) {
              var P2 = new k(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({
                realIndex: s2,
                j: a2
              }), f2.fontSize);
              r2 = C2 ? L2 - P2.height / 2 - m2 - x2.offsetY + 18 : L2 + P2.height + m2 + x2.offsetY - 18;
              var M2 = S2;
              o2 = y2 + (e2.globals.isXNumeric ? -h2 * e2.globals.barGroups.length / 2 : e2.globals.barGroups.length * h2 / 2 - (e2.globals.barGroups.length - 1) * h2 - M2) + x2.offsetX;
            }
            return e2.config.chart.stacked || (u2 < 0 ? u2 = 0 + b2 : u2 + d2.height / 3 > e2.globals.gridHeight && (u2 = e2.globals.gridHeight - b2)), {
              bcx: l2,
              bcy: n2,
              dataLabelsX: g2,
              dataLabelsY: u2,
              totalDataLabelsX: o2,
              totalDataLabelsY: r2,
              totalDataLabelsAnchor: "middle"
            };
          }
        }, {
          key: "calculateBarsDataLabelsPosition",
          value: function (t3) {
            var e2 = this.w,
              i2 = t3.x,
              a2 = t3.i,
              s2 = t3.j,
              r2 = t3.realIndex,
              o2 = t3.bcy,
              n2 = t3.barHeight,
              l2 = t3.barWidth,
              h2 = t3.textRects,
              c2 = t3.dataLabelsX,
              d2 = t3.strokeWidth,
              g2 = t3.dataLabelsConfig,
              u2 = t3.barDataLabelsConfig,
              f2 = t3.barTotalDataLabelsConfig,
              p2 = t3.offX,
              x2 = t3.offY,
              b2 = e2.globals.gridHeight / e2.globals.dataPoints;
            l2 = Math.abs(l2);
            var v2,
              m2,
              y2 = o2 - (this.barCtx.isRangeBar ? 0 : b2) + n2 / 2 + h2.height / 2 + x2 - 3,
              w2 = "start",
              A2 = e2.globals.series[a2][s2] < 0,
              S2 = i2;
            switch (this.barCtx.isReversed && (S2 = i2 + (A2 ? -l2 : l2), w2 = A2 ? "start" : "end"), u2.position) {
              case "center":
                c2 = A2 ? S2 + l2 / 2 - p2 : Math.max(h2.width / 2, S2 - l2 / 2) + p2;
                break;
              case "bottom":
                c2 = A2 ? S2 + l2 - d2 - p2 : S2 - l2 + d2 + p2;
                break;
              case "top":
                c2 = A2 ? S2 - d2 - p2 : S2 - d2 + p2;
            }
            if (this.barCtx.lastActiveBarSerieIndex === r2 && f2.enabled) {
              var C2 = new k(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({
                realIndex: r2,
                j: s2
              }), g2.fontSize);
              A2 ? (v2 = S2 - d2 - p2 - f2.offsetX, w2 = "end") : v2 = S2 + p2 + f2.offsetX + (this.barCtx.isReversed ? -(l2 + d2) : d2), m2 = y2 - h2.height / 2 + C2.height / 2 + f2.offsetY + d2;
            }
            return e2.config.chart.stacked || ("start" === g2.textAnchor ? c2 - h2.width < 0 ? c2 = A2 ? h2.width + d2 : d2 : c2 + h2.width > e2.globals.gridWidth && (c2 = A2 ? e2.globals.gridWidth - d2 : e2.globals.gridWidth - h2.width - d2) : "middle" === g2.textAnchor ? c2 - h2.width / 2 < 0 ? c2 = h2.width / 2 + d2 : c2 + h2.width / 2 > e2.globals.gridWidth && (c2 = e2.globals.gridWidth - h2.width / 2 - d2) : "end" === g2.textAnchor && (c2 < 1 ? c2 = h2.width + d2 : c2 + 1 > e2.globals.gridWidth && (c2 = e2.globals.gridWidth - h2.width - d2))), {
              bcx: i2,
              bcy: o2,
              dataLabelsX: c2,
              dataLabelsY: y2,
              totalDataLabelsX: v2,
              totalDataLabelsY: m2,
              totalDataLabelsAnchor: w2
            };
          }
        }, {
          key: "drawCalculatedDataLabels",
          value: function (t3) {
            var e2 = t3.x,
              i2 = t3.y,
              a2 = t3.val,
              s2 = t3.i,
              r2 = t3.j,
              o2 = t3.textRects,
              n2 = t3.barHeight,
              l2 = t3.barWidth,
              h2 = t3.dataLabelsConfig,
              c2 = this.w,
              d2 = "rotate(0)";
            "vertical" === c2.config.plotOptions.bar.dataLabels.orientation && (d2 = "rotate(-90, ".concat(e2, ", ").concat(i2, ")"));
            var u2 = new G(this.barCtx.ctx),
              f2 = new k(this.barCtx.ctx),
              p2 = h2.formatter,
              x2 = null,
              b2 = c2.globals.collapsedSeriesIndices.indexOf(s2) > -1;
            if (h2.enabled && !b2) {
              x2 = f2.group({
                class: "apexcharts-data-labels",
                transform: d2
              });
              var v2 = "";
              void 0 !== a2 && (v2 = p2(a2, g(g({}, c2), {}, {
                seriesIndex: s2,
                dataPointIndex: r2,
                w: c2
              }))), !a2 && c2.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v2 = "");
              var m2 = c2.globals.series[s2][r2] < 0,
                y2 = c2.config.plotOptions.bar.dataLabels.position;
              if ("vertical" === c2.config.plotOptions.bar.dataLabels.orientation && ("top" === y2 && (h2.textAnchor = m2 ? "end" : "start"), "center" === y2 && (h2.textAnchor = "middle"), "bottom" === y2 && (h2.textAnchor = m2 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) l2 < f2.getTextRects(v2, parseFloat(h2.style.fontSize)).width && (v2 = "");
              c2.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? o2.width / 1.6 > Math.abs(l2) && (v2 = "") : o2.height / 1.6 > Math.abs(n2) && (v2 = ""));
              var w2 = g({}, h2);
              this.barCtx.isHorizontal && a2 < 0 && ("start" === h2.textAnchor ? w2.textAnchor = "end" : "end" === h2.textAnchor && (w2.textAnchor = "start")), u2.plotDataLabelsText({
                x: e2,
                y: i2,
                text: v2,
                i: s2,
                j: r2,
                parent: x2,
                dataLabelsConfig: w2,
                alwaysDrawDataLabel: true,
                offsetCorrection: true
              });
            }
            return x2;
          }
        }, {
          key: "drawTotalDataLabels",
          value: function (t3) {
            var e2 = t3.x,
              i2 = t3.y,
              a2 = t3.val,
              s2 = t3.realIndex,
              r2 = t3.textAnchor,
              o2 = t3.barTotalDataLabelsConfig;
            this.w;
            var n2,
              l2 = new k(this.barCtx.ctx);
            return o2.enabled && void 0 !== e2 && void 0 !== i2 && this.barCtx.lastActiveBarSerieIndex === s2 && (n2 = l2.drawText({
              x: e2,
              y: i2,
              foreColor: o2.style.color,
              text: a2,
              textAnchor: r2,
              fontFamily: o2.style.fontFamily,
              fontSize: o2.style.fontSize,
              fontWeight: o2.style.fontWeight
            })), n2;
          }
        }]), t2;
      }(),
      At = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.barCtx = e2;
        }
        return s(t2, [{
          key: "initVariables",
          value: function (t3) {
            var e2 = this.w;
            this.barCtx.series = t3, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
            for (var i2 = 0; i2 < t3.length; i2++) if (t3[i2].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t3[i2].length), e2.globals.isXNumeric) for (var a2 = 0; a2 < t3[i2].length; a2++) e2.globals.seriesX[i2][a2] > e2.globals.minX && e2.globals.seriesX[i2][a2] < e2.globals.maxX && this.barCtx.visibleItems++;else this.barCtx.visibleItems = e2.globals.dataPoints;
            this.arrBorderRadius = this.createBorderRadiusArr(e2.globals.series), 0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e2.globals.comboCharts || this.checkZeroSeries({
              series: t3
            });
          }
        }, {
          key: "initialPositions",
          value: function () {
            var t3,
              e2,
              i2,
              a2,
              s2,
              r2,
              o2,
              n2,
              l2 = this.w,
              h2 = l2.globals.dataPoints;
            this.barCtx.isRangeBar && (h2 = l2.globals.labels.length);
            var c2 = this.barCtx.seriesLen;
            if (l2.config.plotOptions.bar.rangeBarGroupRows && (c2 = 1), this.barCtx.isHorizontal) s2 = (i2 = l2.globals.gridHeight / h2) / c2, l2.globals.isXNumeric && (s2 = (i2 = l2.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s2 = s2 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (s2 = parseInt(this.barCtx.barOptions.barHeight, 10)), n2 = this.barCtx.baseLineInvertedY + l2.globals.padHorizontal + (this.barCtx.isReversed ? l2.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n2 = l2.globals.gridWidth / 2), e2 = (i2 - s2 * this.barCtx.seriesLen) / 2;else {
              if (a2 = l2.globals.gridWidth / this.barCtx.visibleItems, l2.config.xaxis.convertedCatToNumeric && (a2 = l2.globals.gridWidth / l2.globals.dataPoints), r2 = a2 / c2 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l2.globals.isXNumeric) {
                var d2 = this.barCtx.xRatio;
                l2.globals.minXDiff && 0.5 !== l2.globals.minXDiff && l2.globals.minXDiff / d2 > 0 && (a2 = l2.globals.minXDiff / d2), (r2 = a2 / c2 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r2 = 1);
              }
              -1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (r2 = parseInt(this.barCtx.barOptions.columnWidth, 10)), o2 = l2.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? l2.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), t3 = l2.globals.padHorizontal + (a2 - r2 * this.barCtx.seriesLen) / 2;
            }
            return l2.globals.barHeight = s2, l2.globals.barWidth = r2, {
              x: t3,
              y: e2,
              yDivision: i2,
              xDivision: a2,
              barHeight: s2,
              barWidth: r2,
              zeroH: o2,
              zeroW: n2
            };
          }
        }, {
          key: "initializeStackedPrevVars",
          value: function (t3) {
            t3.w.globals.seriesGroups.forEach(function (e2) {
              t3[e2] || (t3[e2] = {}), t3[e2].prevY = [], t3[e2].prevX = [], t3[e2].prevYF = [], t3[e2].prevXF = [], t3[e2].prevYVal = [], t3[e2].prevXVal = [];
            });
          }
        }, {
          key: "initializeStackedXYVars",
          value: function (t3) {
            t3.w.globals.seriesGroups.forEach(function (e2) {
              t3[e2] || (t3[e2] = {}), t3[e2].xArrj = [], t3[e2].xArrjF = [], t3[e2].xArrjVal = [], t3[e2].yArrj = [], t3[e2].yArrjF = [], t3[e2].yArrjVal = [];
            });
          }
        }, {
          key: "getPathFillColor",
          value: function (t3, e2, i2, a2) {
            var s2,
              r2,
              o2,
              n2,
              l2,
              h2 = this.w,
              c2 = this.barCtx.ctx.fill,
              d2 = null,
              g2 = this.barCtx.barOptions.distributed ? i2 : e2;
            this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function (a3) {
              t3[e2][i2] >= a3.from && t3[e2][i2] <= a3.to && (d2 = a3.color);
            });
            return null !== (s2 = h2.config.series[e2].data[i2]) && void 0 !== s2 && s2.fillColor && (d2 = h2.config.series[e2].data[i2].fillColor), c2.fillPath({
              seriesNumber: this.barCtx.barOptions.distributed ? g2 : a2,
              dataPointIndex: i2,
              color: d2,
              value: t3[e2][i2],
              fillConfig: null === (r2 = h2.config.series[e2].data[i2]) || void 0 === r2 ? void 0 : r2.fill,
              fillType: null !== (o2 = h2.config.series[e2].data[i2]) && void 0 !== o2 && null !== (n2 = o2.fill) && void 0 !== n2 && n2.type ? null === (l2 = h2.config.series[e2].data[i2]) || void 0 === l2 ? void 0 : l2.fill.type : Array.isArray(h2.config.fill.type) ? h2.config.fill.type[a2] : h2.config.fill.type
            });
          }
        }, {
          key: "getStrokeWidth",
          value: function (t3, e2, i2) {
            var a2 = 0,
              s2 = this.w;
            return this.barCtx.series[t3][e2] ? this.barCtx.isNullValue = false : this.barCtx.isNullValue = true, s2.config.stroke.show && (this.barCtx.isNullValue || (a2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i2] : this.barCtx.strokeWidth)), a2;
          }
        }, {
          key: "createBorderRadiusArr",
          value: function (t3) {
            var e2 = this.w,
              i2 = !this.w.config.chart.stacked || "last" !== e2.config.plotOptions.bar.borderRadiusWhenStacked || e2.config.plotOptions.bar.borderRadius <= 0,
              a2 = t3.length,
              s2 = t3[0].length,
              o2 = Array.from({
                length: a2
              }, function () {
                return Array(s2).fill(i2 ? "top" : "none");
              });
            if (i2) return o2;
            for (var n2 = 0; n2 < s2; n2++) {
              for (var l2 = [], h2 = [], c2 = 0, d2 = 0; d2 < a2; d2++) {
                var g2 = t3[d2][n2];
                g2 > 0 ? (l2.push(d2), c2++) : g2 < 0 && (h2.push(d2), c2++);
              }
              if (l2.length > 0 && 0 === h2.length) {
                if (1 === l2.length) o2[l2[0]][n2] = "both";else {
                  var u2,
                    f2 = l2[0],
                    p2 = l2[l2.length - 1],
                    x2 = r(l2);
                  try {
                    for (x2.s(); !(u2 = x2.n()).done;) {
                      var b2 = u2.value;
                      o2[b2][n2] = b2 === f2 ? "bottom" : b2 === p2 ? "top" : "none";
                    }
                  } catch (t4) {
                    x2.e(t4);
                  } finally {
                    x2.f();
                  }
                }
              } else if (h2.length > 0 && 0 === l2.length) {
                if (1 === h2.length) o2[h2[0]][n2] = "both";else {
                  var v2,
                    m2 = h2[0],
                    y2 = h2[h2.length - 1],
                    w2 = r(h2);
                  try {
                    for (w2.s(); !(v2 = w2.n()).done;) {
                      var k2 = v2.value;
                      o2[k2][n2] = k2 === m2 ? "bottom" : k2 === y2 ? "top" : "none";
                    }
                  } catch (t4) {
                    w2.e(t4);
                  } finally {
                    w2.f();
                  }
                }
              } else if (l2.length > 0 && h2.length > 0) {
                var A2,
                  S2 = l2[l2.length - 1],
                  C2 = r(l2);
                try {
                  for (C2.s(); !(A2 = C2.n()).done;) {
                    var L2 = A2.value;
                    o2[L2][n2] = L2 === S2 ? "top" : "none";
                  }
                } catch (t4) {
                  C2.e(t4);
                } finally {
                  C2.f();
                }
                var P2,
                  M2 = h2[h2.length - 1],
                  I2 = r(h2);
                try {
                  for (I2.s(); !(P2 = I2.n()).done;) {
                    var T2 = P2.value;
                    o2[T2][n2] = T2 === M2 ? "bottom" : "none";
                  }
                } catch (t4) {
                  I2.e(t4);
                } finally {
                  I2.f();
                }
              } else if (1 === c2) {
                o2[l2[0] || h2[0]][n2] = "both";
              }
            }
            return o2;
          }
        }, {
          key: "barBackground",
          value: function (t3) {
            var e2 = t3.j,
              i2 = t3.i,
              a2 = t3.x1,
              s2 = t3.x2,
              r2 = t3.y1,
              o2 = t3.y2,
              n2 = t3.elSeries,
              l2 = this.w,
              h2 = new k(this.barCtx.ctx),
              c2 = new V(this.barCtx.ctx).getActiveConfigSeriesIndex();
            if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c2 === i2) {
              e2 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e2 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
              var d2 = this.barCtx.barOptions.colors.backgroundBarColors[e2],
                g2 = h2.drawRect(void 0 !== a2 ? a2 : 0, void 0 !== r2 ? r2 : 0, void 0 !== s2 ? s2 : l2.globals.gridWidth, void 0 !== o2 ? o2 : l2.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d2, this.barCtx.barOptions.colors.backgroundBarOpacity);
              n2.add(g2), g2.node.classList.add("apexcharts-backgroundBar");
            }
          }
        }, {
          key: "getColumnPaths",
          value: function (t3) {
            var e2,
              i2 = t3.barWidth,
              a2 = t3.barXPosition,
              s2 = t3.y1,
              r2 = t3.y2,
              o2 = t3.strokeWidth,
              n2 = t3.isReversed,
              l2 = t3.series,
              h2 = t3.seriesGroup,
              c2 = t3.realIndex,
              d2 = t3.i,
              g2 = t3.j,
              u2 = t3.w,
              f2 = new k(this.barCtx.ctx);
            (o2 = Array.isArray(o2) ? o2[c2] : o2) || (o2 = 0);
            var p2 = i2,
              x2 = a2;
            null !== (e2 = u2.config.series[c2].data[g2]) && void 0 !== e2 && e2.columnWidthOffset && (x2 = a2 - u2.config.series[c2].data[g2].columnWidthOffset / 2, p2 = i2 + u2.config.series[c2].data[g2].columnWidthOffset);
            var b2 = o2 / 2,
              v2 = x2 + b2,
              m2 = x2 + p2 - b2,
              y2 = (l2[d2][g2] >= 0 ? 1 : -1) * (n2 ? -1 : 1);
            s2 += 1e-3 - b2 * y2, r2 += 1e-3 + b2 * y2;
            var w2 = f2.move(v2, s2),
              A2 = f2.move(v2, s2),
              S2 = f2.line(m2, s2);
            if (u2.globals.previousPaths.length > 0 && (A2 = this.barCtx.getPreviousPath(c2, g2, false)), w2 = w2 + f2.line(v2, r2) + f2.line(m2, r2) + S2 + ("around" === u2.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c2][g2] ? " Z" : " z"), A2 = A2 + f2.line(v2, s2) + S2 + S2 + S2 + S2 + S2 + f2.line(v2, s2) + ("around" === u2.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c2][g2] ? " Z" : " z"), "none" !== this.arrBorderRadius[c2][g2] && (w2 = f2.roundPathCorners(w2, u2.config.plotOptions.bar.borderRadius)), u2.config.chart.stacked) {
              var C2 = this.barCtx;
              (C2 = this.barCtx[h2]).yArrj.push(r2 - b2 * y2), C2.yArrjF.push(Math.abs(s2 - r2 + o2 * y2)), C2.yArrjVal.push(this.barCtx.series[d2][g2]);
            }
            return {
              pathTo: w2,
              pathFrom: A2
            };
          }
        }, {
          key: "getBarpaths",
          value: function (t3) {
            var e2,
              i2 = t3.barYPosition,
              a2 = t3.barHeight,
              s2 = t3.x1,
              r2 = t3.x2,
              o2 = t3.strokeWidth,
              n2 = t3.isReversed,
              l2 = t3.series,
              h2 = t3.seriesGroup,
              c2 = t3.realIndex,
              d2 = t3.i,
              g2 = t3.j,
              u2 = t3.w,
              f2 = new k(this.barCtx.ctx);
            (o2 = Array.isArray(o2) ? o2[c2] : o2) || (o2 = 0);
            var p2 = i2,
              x2 = a2;
            null !== (e2 = u2.config.series[c2].data[g2]) && void 0 !== e2 && e2.barHeightOffset && (p2 = i2 - u2.config.series[c2].data[g2].barHeightOffset / 2, x2 = a2 + u2.config.series[c2].data[g2].barHeightOffset);
            var b2 = o2 / 2,
              v2 = p2 + b2,
              m2 = p2 + x2 - b2,
              y2 = (l2[d2][g2] >= 0 ? 1 : -1) * (n2 ? -1 : 1);
            s2 += 1e-3 + b2 * y2, r2 += 1e-3 - b2 * y2;
            var w2 = f2.move(s2, v2),
              A2 = f2.move(s2, v2);
            u2.globals.previousPaths.length > 0 && (A2 = this.barCtx.getPreviousPath(c2, g2, false));
            var S2 = f2.line(s2, m2);
            if (w2 = w2 + f2.line(r2, v2) + f2.line(r2, m2) + S2 + ("around" === u2.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c2][g2] ? " Z" : " z"), A2 = A2 + f2.line(s2, v2) + S2 + S2 + S2 + S2 + S2 + f2.line(s2, v2) + ("around" === u2.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c2][g2] ? " Z" : " z"), "none" !== this.arrBorderRadius[c2][g2] && (w2 = f2.roundPathCorners(w2, u2.config.plotOptions.bar.borderRadius)), u2.config.chart.stacked) {
              var C2 = this.barCtx;
              (C2 = this.barCtx[h2]).xArrj.push(r2 + b2 * y2), C2.xArrjF.push(Math.abs(s2 - r2 - o2 * y2)), C2.xArrjVal.push(this.barCtx.series[d2][g2]);
            }
            return {
              pathTo: w2,
              pathFrom: A2
            };
          }
        }, {
          key: "checkZeroSeries",
          value: function (t3) {
            for (var e2 = t3.series, i2 = this.w, a2 = 0; a2 < e2.length; a2++) {
              for (var s2 = 0, r2 = 0; r2 < e2[i2.globals.maxValsInArrayIndex].length; r2++) s2 += e2[a2][r2];
              0 === s2 && this.barCtx.zeroSerieses.push(a2);
            }
          }
        }, {
          key: "getXForValue",
          value: function (t3, e2) {
            var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e2 : null;
            return null != t3 && (i2 = e2 + t3 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t3 / this.barCtx.invertedYRatio : 0)), i2;
          }
        }, {
          key: "getYForValue",
          value: function (t3, e2, i2) {
            var a2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e2 : null;
            return null != t3 && (a2 = e2 - t3 / this.barCtx.yRatio[i2] + 2 * (this.barCtx.isReversed ? t3 / this.barCtx.yRatio[i2] : 0)), a2;
          }
        }, {
          key: "getGoalValues",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2 = this,
              l2 = this.w,
              h2 = [],
              c2 = function (a3, s3) {
                var l3;
                h2.push((n(l3 = {}, t3, "x" === t3 ? o2.getXForValue(a3, e2, false) : o2.getYForValue(a3, i2, r2, false)), n(l3, "attrs", s3), l3));
              };
            if (l2.globals.seriesGoals[a2] && l2.globals.seriesGoals[a2][s2] && Array.isArray(l2.globals.seriesGoals[a2][s2]) && l2.globals.seriesGoals[a2][s2].forEach(function (t4) {
              c2(t4.value, t4);
            }), this.barCtx.barOptions.isDumbbell && l2.globals.seriesRange.length) {
              var d2 = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l2.globals.colors,
                u2 = {
                  strokeHeight: "x" === t3 ? 0 : l2.globals.markers.size[a2],
                  strokeWidth: "x" === t3 ? l2.globals.markers.size[a2] : 0,
                  strokeDashArray: 0,
                  strokeLineCap: "round",
                  strokeColor: Array.isArray(d2[a2]) ? d2[a2][0] : d2[a2]
                };
              c2(l2.globals.seriesRangeStart[a2][s2], u2), c2(l2.globals.seriesRangeEnd[a2][s2], g(g({}, u2), {}, {
                strokeColor: Array.isArray(d2[a2]) ? d2[a2][1] : d2[a2]
              }));
            }
            return h2;
          }
        }, {
          key: "drawGoalLine",
          value: function (t3) {
            var e2 = t3.barXPosition,
              i2 = t3.barYPosition,
              a2 = t3.goalX,
              s2 = t3.goalY,
              r2 = t3.barWidth,
              o2 = t3.barHeight,
              n2 = new k(this.barCtx.ctx),
              l2 = n2.group({
                className: "apexcharts-bar-goals-groups"
              });
            l2.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({
              el: l2.node
            }), l2.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
            var h2 = null;
            return this.barCtx.isHorizontal ? Array.isArray(a2) && a2.forEach(function (t4) {
              if (t4.x >= -1 && t4.x <= n2.w.globals.gridWidth + 1) {
                var e3 = void 0 !== t4.attrs.strokeHeight ? t4.attrs.strokeHeight : o2 / 2,
                  a3 = i2 + e3 + o2 / 2;
                h2 = n2.drawLine(t4.x, a3 - 2 * e3, t4.x, a3, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeWidth ? t4.attrs.strokeWidth : 2, t4.attrs.strokeLineCap), l2.add(h2);
              }
            }) : Array.isArray(s2) && s2.forEach(function (t4) {
              if (t4.y >= -1 && t4.y <= n2.w.globals.gridHeight + 1) {
                var i3 = void 0 !== t4.attrs.strokeWidth ? t4.attrs.strokeWidth : r2 / 2,
                  a3 = e2 + i3 + r2 / 2;
                h2 = n2.drawLine(a3 - 2 * i3, t4.y, a3, t4.y, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeHeight ? t4.attrs.strokeHeight : 2, t4.attrs.strokeLineCap), l2.add(h2);
              }
            }), l2;
          }
        }, {
          key: "drawBarShadow",
          value: function (t3) {
            var e2 = t3.prevPaths,
              i2 = t3.currPaths,
              a2 = t3.color,
              s2 = this.w,
              r2 = e2.x,
              o2 = e2.x1,
              n2 = e2.barYPosition,
              l2 = i2.x,
              h2 = i2.x1,
              c2 = i2.barYPosition,
              d2 = n2 + i2.barHeight,
              g2 = new k(this.barCtx.ctx),
              u2 = new m(),
              f2 = g2.move(o2, d2) + g2.line(r2, d2) + g2.line(l2, c2) + g2.line(h2, c2) + g2.line(o2, d2) + ("around" === s2.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[realIndex][j] ? " Z" : " z");
            return g2.drawPath({
              d: f2,
              fill: u2.shadeColor(0.5, m.rgb2hex(a2)),
              stroke: "none",
              strokeWidth: 0,
              fillOpacity: 1,
              classes: "apexcharts-bar-shadows"
            });
          }
        }, {
          key: "getZeroValueEncounters",
          value: function (t3) {
            var e2,
              i2 = t3.i,
              a2 = t3.j,
              s2 = this.w,
              r2 = 0,
              o2 = 0;
            return (s2.config.plotOptions.bar.horizontal ? s2.globals.series.map(function (t4, e3) {
              return e3;
            }) : (null === (e2 = s2.globals.columnSeries) || void 0 === e2 ? void 0 : e2.i.map(function (t4) {
              return t4;
            })) || []).forEach(function (t4) {
              var e3 = s2.globals.seriesPercent[t4][a2];
              e3 && r2++, t4 < i2 && 0 === e3 && o2++;
            }), {
              nonZeroColumns: r2,
              zeroEncounters: o2
            };
          }
        }, {
          key: "getGroupIndex",
          value: function (t3) {
            var e2 = this.w,
              i2 = e2.globals.seriesGroups.findIndex(function (i3) {
                return i3.indexOf(e2.globals.seriesNames[t3]) > -1;
              }),
              a2 = this.barCtx.columnGroupIndices,
              s2 = a2.indexOf(i2);
            return s2 < 0 && (a2.push(i2), s2 = a2.length - 1), {
              groupIndex: i2,
              columnGroupIndex: s2
            };
          }
        }]), t2;
      }(),
      St = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
          var s2 = this.w;
          this.barOptions = s2.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s2.config.stroke.width, this.isNullValue = false, this.isRangeBar = s2.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s2.globals.isBarHorizontal && s2.globals.seriesRange.length && s2.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = a2, null !== this.xyRatios && (this.xRatio = a2.xRatio, this.yRatio = a2.yRatio, this.invertedXRatio = a2.invertedXRatio, this.invertedYRatio = a2.invertedYRatio, this.baseLineY = a2.baseLineY, this.baseLineInvertedY = a2.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];
          var r2 = new V(this.ctx);
          this.lastActiveBarSerieIndex = r2.getActiveConfigSeriesIndex("desc", ["bar", "column"]), this.columnGroupIndices = [];
          var o2 = r2.getBarSeriesIndices(),
            n2 = new A(this.ctx);
          this.stackedSeriesTotals = n2.getStackedSeriesTotals(this.w.config.series.map(function (t3, e3) {
            return -1 === o2.indexOf(e3) ? e3 : -1;
          }).filter(function (t3) {
            return -1 !== t3;
          })), this.barHelpers = new At(this);
        }
        return s(t2, [{
          key: "draw",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new k(this.ctx),
              s2 = new A(this.ctx, i2);
            t3 = s2.getLogSeries(t3), this.series = t3, this.yRatio = s2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
            var r2 = a2.group({
              class: "apexcharts-bar-series apexcharts-plot-series"
            });
            i2.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts");
            for (var o2 = 0, n2 = 0; o2 < t3.length; o2++, n2++) {
              var l2,
                h2,
                c2,
                d2,
                u2 = void 0,
                f2 = void 0,
                p2 = [],
                x2 = [],
                b2 = i2.globals.comboCharts ? e2[o2] : o2,
                v2 = this.barHelpers.getGroupIndex(b2).columnGroupIndex,
                y2 = a2.group({
                  class: "apexcharts-series",
                  rel: o2 + 1,
                  seriesName: m.escapeString(i2.globals.seriesNames[b2]),
                  "data:realIndex": b2
                });
              this.ctx.series.addCollapsedClassToSeries(y2, b2), t3[o2].length > 0 && (this.visibleI = this.visibleI + 1);
              var w2 = 0,
                S2 = 0;
              this.yRatio.length > 1 && (this.yaxisIndex = i2.globals.seriesYAxisReverseMap[b2], this.translationsIndex = b2);
              var C2 = this.translationsIndex;
              this.isReversed = i2.config.yaxis[this.yaxisIndex] && i2.config.yaxis[this.yaxisIndex].reversed;
              var L2 = this.barHelpers.initialPositions();
              f2 = L2.y, w2 = L2.barHeight, h2 = L2.yDivision, d2 = L2.zeroW, u2 = L2.x, S2 = L2.barWidth, l2 = L2.xDivision, c2 = L2.zeroH, this.horizontal || x2.push(u2 + S2 / 2);
              var P2 = a2.group({
                class: "apexcharts-datalabels",
                "data:realIndex": b2
              });
              i2.globals.delayedElements.push({
                el: P2.node
              }), P2.node.classList.add("apexcharts-element-hidden");
              var M2 = a2.group({
                  class: "apexcharts-bar-goals-markers"
                }),
                I2 = a2.group({
                  class: "apexcharts-bar-shadows"
                });
              i2.globals.delayedElements.push({
                el: I2.node
              }), I2.node.classList.add("apexcharts-element-hidden");
              for (var T2 = 0; T2 < t3[o2].length; T2++) {
                var z2 = this.barHelpers.getStrokeWidth(o2, T2, b2),
                  X2 = null,
                  E2 = {
                    indexes: {
                      i: o2,
                      j: T2,
                      realIndex: b2,
                      translationsIndex: C2,
                      bc: n2
                    },
                    x: u2,
                    y: f2,
                    strokeWidth: z2,
                    elSeries: y2
                  };
                this.isHorizontal ? (X2 = this.drawBarPaths(g(g({}, E2), {}, {
                  barHeight: w2,
                  zeroW: d2,
                  yDivision: h2
                })), S2 = this.series[o2][T2] / this.invertedYRatio) : (X2 = this.drawColumnPaths(g(g({}, E2), {}, {
                  xDivision: l2,
                  barWidth: S2,
                  zeroH: c2
                })), w2 = this.series[o2][T2] / this.yRatio[C2]);
                var Y2 = this.barHelpers.getPathFillColor(t3, o2, T2, b2);
                if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && T2 > 0) {
                  var R2 = this.barHelpers.drawBarShadow({
                    color: "string" == typeof Y2 && -1 === (null == Y2 ? void 0 : Y2.indexOf("url")) ? Y2 : m.hexToRgba(i2.globals.colors[o2]),
                    prevPaths: this.pathArr[this.pathArr.length - 1],
                    currPaths: X2
                  });
                  R2 && I2.add(R2);
                }
                this.pathArr.push(X2);
                var F2 = this.barHelpers.drawGoalLine({
                  barXPosition: X2.barXPosition,
                  barYPosition: X2.barYPosition,
                  goalX: X2.goalX,
                  goalY: X2.goalY,
                  barHeight: w2,
                  barWidth: S2
                });
                F2 && M2.add(F2), f2 = X2.y, u2 = X2.x, T2 > 0 && x2.push(u2 + S2 / 2), p2.push(f2), this.renderSeries({
                  realIndex: b2,
                  pathFill: Y2,
                  j: T2,
                  i: o2,
                  columnGroupIndex: v2,
                  pathFrom: X2.pathFrom,
                  pathTo: X2.pathTo,
                  strokeWidth: z2,
                  elSeries: y2,
                  x: u2,
                  y: f2,
                  series: t3,
                  barHeight: Math.abs(X2.barHeight ? X2.barHeight : w2),
                  barWidth: Math.abs(X2.barWidth ? X2.barWidth : S2),
                  elDataLabelsWrap: P2,
                  elGoalsMarkers: M2,
                  elBarShadows: I2,
                  visibleSeries: this.visibleI,
                  type: "bar"
                });
              }
              i2.globals.seriesXvalues[b2] = x2, i2.globals.seriesYvalues[b2] = p2, r2.add(y2);
            }
            return r2;
          }
        }, {
          key: "renderSeries",
          value: function (t3) {
            var e2 = t3.realIndex,
              i2 = t3.pathFill,
              a2 = t3.lineFill,
              s2 = t3.j,
              r2 = t3.i,
              o2 = t3.columnGroupIndex,
              n2 = t3.pathFrom,
              l2 = t3.pathTo,
              h2 = t3.strokeWidth,
              c2 = t3.elSeries,
              d2 = t3.x,
              g2 = t3.y,
              u2 = t3.y1,
              f2 = t3.y2,
              p2 = t3.series,
              x2 = t3.barHeight,
              b2 = t3.barWidth,
              v2 = t3.barXPosition,
              m2 = t3.barYPosition,
              y2 = t3.elDataLabelsWrap,
              A2 = t3.elGoalsMarkers,
              S2 = t3.elBarShadows,
              C2 = t3.visibleSeries,
              L2 = t3.type,
              P2 = t3.classes,
              M2 = this.w,
              I2 = new k(this.ctx);
            if (!a2) {
              var T2 = "function" == typeof M2.globals.stroke.colors[e2] ? function (t4) {
                var e3,
                  i3 = M2.config.stroke.colors;
                return Array.isArray(i3) && i3.length > 0 && ((e3 = i3[t4]) || (e3 = ""), "function" == typeof e3) ? e3({
                  value: M2.globals.series[t4][s2],
                  dataPointIndex: s2,
                  w: M2
                }) : e3;
              }(e2) : M2.globals.stroke.colors[e2];
              a2 = this.barOptions.distributed ? M2.globals.stroke.colors[s2] : T2;
            }
            M2.config.series[r2].data[s2] && M2.config.series[r2].data[s2].strokeColor && (a2 = M2.config.series[r2].data[s2].strokeColor), this.isNullValue && (i2 = "none");
            var z2 = s2 / M2.config.chart.animations.animateGradually.delay * (M2.config.chart.animations.speed / M2.globals.dataPoints) / 2.4,
              X2 = I2.renderPaths({
                i: r2,
                j: s2,
                realIndex: e2,
                pathFrom: n2,
                pathTo: l2,
                stroke: a2,
                strokeWidth: h2,
                strokeLineCap: M2.config.stroke.lineCap,
                fill: i2,
                animationDelay: z2,
                initialSpeed: M2.config.chart.animations.speed,
                dataChangeSpeed: M2.config.chart.animations.dynamicAnimation.speed,
                className: "apexcharts-".concat(L2, "-area ").concat(P2),
                chartType: L2
              });
            X2.attr("clip-path", "url(#gridRectBarMask".concat(M2.globals.cuid, ")"));
            var E2 = M2.config.forecastDataPoints;
            E2.count > 0 && s2 >= M2.globals.dataPoints - E2.count && (X2.node.setAttribute("stroke-dasharray", E2.dashArray), X2.node.setAttribute("stroke-width", E2.strokeWidth), X2.node.setAttribute("fill-opacity", E2.fillOpacity)), void 0 !== u2 && void 0 !== f2 && (X2.attr("data-range-y1", u2), X2.attr("data-range-y2", f2)), new w(this.ctx).setSelectionFilter(X2, e2, s2), c2.add(X2);
            var Y2 = new kt(this).handleBarDataLabels({
              x: d2,
              y: g2,
              y1: u2,
              y2: f2,
              i: r2,
              j: s2,
              series: p2,
              realIndex: e2,
              columnGroupIndex: o2,
              barHeight: x2,
              barWidth: b2,
              barXPosition: v2,
              barYPosition: m2,
              renderedPath: X2,
              visibleSeries: C2
            });
            return null !== Y2.dataLabels && y2.add(Y2.dataLabels), Y2.totalDataLabels && y2.add(Y2.totalDataLabels), c2.add(y2), A2 && c2.add(A2), S2 && c2.add(S2), c2;
          }
        }, {
          key: "drawBarPaths",
          value: function (t3) {
            var e2,
              i2 = t3.indexes,
              a2 = t3.barHeight,
              s2 = t3.strokeWidth,
              r2 = t3.zeroW,
              o2 = t3.x,
              n2 = t3.y,
              l2 = t3.yDivision,
              h2 = t3.elSeries,
              c2 = this.w,
              d2 = i2.i,
              g2 = i2.j;
            if (c2.globals.isXNumeric) e2 = (n2 = (c2.globals.seriesX[d2][g2] - c2.globals.minX) / this.invertedXRatio - a2) + a2 * this.visibleI;else if (c2.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
              var u2 = 0,
                f2 = 0;
              c2.globals.seriesPercent.forEach(function (t4, e3) {
                t4[g2] && u2++, e3 < d2 && 0 === t4[g2] && f2++;
              }), u2 > 0 && (a2 = this.seriesLen * a2 / u2), e2 = n2 + a2 * this.visibleI, e2 -= a2 * f2;
            } else e2 = n2 + a2 * this.visibleI;
            this.isFunnel && (r2 -= (this.barHelpers.getXForValue(this.series[d2][g2], r2) - r2) / 2), o2 = this.barHelpers.getXForValue(this.series[d2][g2], r2);
            var p2 = this.barHelpers.getBarpaths({
              barYPosition: e2,
              barHeight: a2,
              x1: r2,
              x2: o2,
              strokeWidth: s2,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: i2.realIndex,
              i: d2,
              j: g2,
              w: c2
            });
            return c2.globals.isXNumeric || (n2 += l2), this.barHelpers.barBackground({
              j: g2,
              i: d2,
              y1: e2 - a2 * this.visibleI,
              y2: a2 * this.seriesLen,
              elSeries: h2
            }), {
              pathTo: p2.pathTo,
              pathFrom: p2.pathFrom,
              x1: r2,
              x: o2,
              y: n2,
              goalX: this.barHelpers.getGoalValues("x", r2, null, d2, g2),
              barYPosition: e2,
              barHeight: a2
            };
          }
        }, {
          key: "drawColumnPaths",
          value: function (t3) {
            var e2,
              i2 = t3.indexes,
              a2 = t3.x,
              s2 = t3.y,
              r2 = t3.xDivision,
              o2 = t3.barWidth,
              n2 = t3.zeroH,
              l2 = t3.strokeWidth,
              h2 = t3.elSeries,
              c2 = this.w,
              d2 = i2.realIndex,
              g2 = i2.translationsIndex,
              u2 = i2.i,
              f2 = i2.j,
              p2 = i2.bc;
            if (c2.globals.isXNumeric) {
              var x2 = this.getBarXForNumericXAxis({
                x: a2,
                j: f2,
                realIndex: d2,
                barWidth: o2
              });
              a2 = x2.x, e2 = x2.barXPosition;
            } else if (c2.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
              var b2 = this.barHelpers.getZeroValueEncounters({
                  i: u2,
                  j: f2
                }),
                v2 = b2.nonZeroColumns,
                m2 = b2.zeroEncounters;
              v2 > 0 && (o2 = this.seriesLen * o2 / v2), e2 = a2 + o2 * this.visibleI, e2 -= o2 * m2;
            } else e2 = a2 + o2 * this.visibleI;
            s2 = this.barHelpers.getYForValue(this.series[u2][f2], n2, g2);
            var y2 = this.barHelpers.getColumnPaths({
              barXPosition: e2,
              barWidth: o2,
              y1: n2,
              y2: s2,
              strokeWidth: l2,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: d2,
              i: u2,
              j: f2,
              w: c2
            });
            return c2.globals.isXNumeric || (a2 += r2), this.barHelpers.barBackground({
              bc: p2,
              j: f2,
              i: u2,
              x1: e2 - l2 / 2 - o2 * this.visibleI,
              x2: o2 * this.seriesLen + l2 / 2,
              elSeries: h2
            }), {
              pathTo: y2.pathTo,
              pathFrom: y2.pathFrom,
              x: a2,
              y: s2,
              goalY: this.barHelpers.getGoalValues("y", null, n2, u2, f2, g2),
              barXPosition: e2,
              barWidth: o2
            };
          }
        }, {
          key: "getBarXForNumericXAxis",
          value: function (t3) {
            var e2 = t3.x,
              i2 = t3.barWidth,
              a2 = t3.realIndex,
              s2 = t3.j,
              r2 = this.w,
              o2 = a2;
            return r2.globals.seriesX[a2].length || (o2 = r2.globals.maxValsInArrayIndex), r2.globals.seriesX[o2][s2] && (e2 = (r2.globals.seriesX[o2][s2] - r2.globals.minX) / this.xRatio - i2 * this.seriesLen / 2), {
              barXPosition: e2 + i2 * this.visibleI,
              x: e2
            };
          }
        }, {
          key: "getPreviousPath",
          value: function (t3, e2) {
            for (var i2, a2 = this.w, s2 = 0; s2 < a2.globals.previousPaths.length; s2++) {
              var r2 = a2.globals.previousPaths[s2];
              r2.paths && r2.paths.length > 0 && parseInt(r2.realIndex, 10) === parseInt(t3, 10) && void 0 !== a2.globals.previousPaths[s2].paths[e2] && (i2 = a2.globals.previousPaths[s2].paths[e2].d);
            }
            return i2;
          }
        }]), t2;
      }(),
      Ct = function (t2) {
        h(a2, St);
        var e2 = o(a2);
        function a2() {
          return i(this, a2), e2.apply(this, arguments);
        }
        return s(a2, [{
          key: "draw",
          value: function (t3, e3) {
            var i2 = this,
              a3 = this.w;
            this.graphics = new k(this.ctx), this.bar = new St(this.ctx, this.xyRatios);
            var s2 = new A(this.ctx, a3);
            t3 = s2.getLogSeries(t3), this.yRatio = s2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3), "100%" === a3.config.chart.stackType && (t3 = a3.globals.comboCharts ? e3.map(function (t4) {
              return a3.globals.seriesPercent[t4];
            }) : a3.globals.seriesPercent.slice()), this.series = t3, this.barHelpers.initializeStackedPrevVars(this);
            for (var r2 = this.graphics.group({
                class: "apexcharts-bar-series apexcharts-plot-series"
              }), o2 = 0, n2 = 0, l2 = function (s3, l3) {
                var h3 = void 0,
                  c3 = void 0,
                  d2 = void 0,
                  u2 = void 0,
                  f2 = a3.globals.comboCharts ? e3[s3] : s3,
                  p2 = i2.barHelpers.getGroupIndex(f2),
                  x2 = p2.groupIndex,
                  b2 = p2.columnGroupIndex;
                i2.groupCtx = i2[a3.globals.seriesGroups[x2]];
                var v2 = [],
                  y2 = [],
                  w2 = 0;
                i2.yRatio.length > 1 && (i2.yaxisIndex = a3.globals.seriesYAxisReverseMap[f2][0], w2 = f2), i2.isReversed = a3.config.yaxis[i2.yaxisIndex] && a3.config.yaxis[i2.yaxisIndex].reversed;
                var k2 = i2.graphics.group({
                  class: "apexcharts-series",
                  seriesName: m.escapeString(a3.globals.seriesNames[f2]),
                  rel: s3 + 1,
                  "data:realIndex": f2
                });
                i2.ctx.series.addCollapsedClassToSeries(k2, f2);
                var A2 = i2.graphics.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": f2
                  }),
                  S2 = i2.graphics.group({
                    class: "apexcharts-bar-goals-markers"
                  }),
                  C2 = 0,
                  L2 = 0,
                  P2 = i2.initialPositions(o2, n2, h3, c3, d2, u2, w2);
                n2 = P2.y, C2 = P2.barHeight, c3 = P2.yDivision, u2 = P2.zeroW, o2 = P2.x, L2 = P2.barWidth, h3 = P2.xDivision, d2 = P2.zeroH, a3.globals.barHeight = C2, a3.globals.barWidth = L2, i2.barHelpers.initializeStackedXYVars(i2), 1 === i2.groupCtx.prevY.length && i2.groupCtx.prevY[0].every(function (t4) {
                  return isNaN(t4);
                }) && (i2.groupCtx.prevY[0] = i2.groupCtx.prevY[0].map(function () {
                  return d2;
                }), i2.groupCtx.prevYF[0] = i2.groupCtx.prevYF[0].map(function () {
                  return 0;
                }));
                for (var M2 = 0; M2 < a3.globals.dataPoints; M2++) {
                  var I2 = i2.barHelpers.getStrokeWidth(s3, M2, f2),
                    T2 = {
                      indexes: {
                        i: s3,
                        j: M2,
                        realIndex: f2,
                        translationsIndex: w2,
                        bc: l3
                      },
                      strokeWidth: I2,
                      x: o2,
                      y: n2,
                      elSeries: k2,
                      columnGroupIndex: b2,
                      seriesGroup: a3.globals.seriesGroups[x2]
                    },
                    z2 = null;
                  i2.isHorizontal ? (z2 = i2.drawStackedBarPaths(g(g({}, T2), {}, {
                    zeroW: u2,
                    barHeight: C2,
                    yDivision: c3
                  })), L2 = i2.series[s3][M2] / i2.invertedYRatio) : (z2 = i2.drawStackedColumnPaths(g(g({}, T2), {}, {
                    xDivision: h3,
                    barWidth: L2,
                    zeroH: d2
                  })), C2 = i2.series[s3][M2] / i2.yRatio[w2]);
                  var X2 = i2.barHelpers.drawGoalLine({
                    barXPosition: z2.barXPosition,
                    barYPosition: z2.barYPosition,
                    goalX: z2.goalX,
                    goalY: z2.goalY,
                    barHeight: C2,
                    barWidth: L2
                  });
                  X2 && S2.add(X2), n2 = z2.y, o2 = z2.x, v2.push(o2), y2.push(n2);
                  var E2 = i2.barHelpers.getPathFillColor(t3, s3, M2, f2),
                    Y2 = "";
                  a3.globals.isBarHorizontal ? "bottom" === i2.barHelpers.arrBorderRadius[f2][M2] && a3.globals.series[f2][M2] > 0 && (Y2 = "apexcharts-flip-x") : "bottom" === i2.barHelpers.arrBorderRadius[f2][M2] && a3.globals.series[f2][M2] > 0 && (Y2 = "apexcharts-flip-y"), k2 = i2.renderSeries({
                    realIndex: f2,
                    pathFill: E2,
                    j: M2,
                    i: s3,
                    columnGroupIndex: b2,
                    pathFrom: z2.pathFrom,
                    pathTo: z2.pathTo,
                    strokeWidth: I2,
                    elSeries: k2,
                    x: o2,
                    y: n2,
                    series: t3,
                    barHeight: C2,
                    barWidth: L2,
                    elDataLabelsWrap: A2,
                    elGoalsMarkers: S2,
                    type: "bar",
                    visibleSeries: b2,
                    classes: Y2
                  });
                }
                a3.globals.seriesXvalues[f2] = v2, a3.globals.seriesYvalues[f2] = y2, i2.groupCtx.prevY.push(i2.groupCtx.yArrj), i2.groupCtx.prevYF.push(i2.groupCtx.yArrjF), i2.groupCtx.prevYVal.push(i2.groupCtx.yArrjVal), i2.groupCtx.prevX.push(i2.groupCtx.xArrj), i2.groupCtx.prevXF.push(i2.groupCtx.xArrjF), i2.groupCtx.prevXVal.push(i2.groupCtx.xArrjVal), r2.add(k2);
              }, h2 = 0, c2 = 0; h2 < t3.length; h2++, c2++) l2(h2, c2);
            return r2;
          }
        }, {
          key: "initialPositions",
          value: function (t3, e3, i2, a3, s2, r2, o2) {
            var n2,
              l2,
              h2 = this.w;
            if (this.isHorizontal) {
              a3 = h2.globals.gridHeight / h2.globals.dataPoints;
              var c2 = h2.config.plotOptions.bar.barHeight;
              n2 = -1 === String(c2).indexOf("%") ? parseInt(c2, 10) : a3 * parseInt(c2, 10) / 100, r2 = h2.globals.padHorizontal + (this.isReversed ? h2.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e3 = (a3 - n2) / 2;
            } else {
              l2 = i2 = h2.globals.gridWidth / h2.globals.dataPoints;
              var d2 = h2.config.plotOptions.bar.columnWidth;
              h2.globals.isXNumeric && h2.globals.dataPoints > 1 ? l2 = (i2 = h2.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d2).indexOf("%") ? l2 = parseInt(d2, 10) : l2 *= parseInt(d2, 10) / 100, s2 = this.isReversed ? this.baseLineY[o2] : h2.globals.gridHeight - this.baseLineY[o2], t3 = h2.globals.padHorizontal + (i2 - l2) / 2;
            }
            var g2 = h2.globals.barGroups.length || 1;
            return {
              x: t3,
              y: e3,
              yDivision: a3,
              xDivision: i2,
              barHeight: n2 / g2,
              barWidth: l2 / g2,
              zeroH: s2,
              zeroW: r2
            };
          }
        }, {
          key: "drawStackedBarPaths",
          value: function (t3) {
            for (var e3, i2 = t3.indexes, a3 = t3.barHeight, s2 = t3.strokeWidth, r2 = t3.zeroW, o2 = t3.x, n2 = t3.y, l2 = t3.columnGroupIndex, h2 = t3.seriesGroup, c2 = t3.yDivision, d2 = t3.elSeries, g2 = this.w, u2 = n2 + l2 * a3, f2 = i2.i, p2 = i2.j, x2 = i2.realIndex, b2 = i2.translationsIndex, v2 = 0, m2 = 0; m2 < this.groupCtx.prevXF.length; m2++) v2 += this.groupCtx.prevXF[m2][p2];
            var y2;
            if ((y2 = h2.indexOf(g2.config.series[x2].name)) > 0) {
              var w2 = r2;
              this.groupCtx.prevXVal[y2 - 1][p2] < 0 ? w2 = this.series[f2][p2] >= 0 ? this.groupCtx.prevX[y2 - 1][p2] + v2 - 2 * (this.isReversed ? v2 : 0) : this.groupCtx.prevX[y2 - 1][p2] : this.groupCtx.prevXVal[y2 - 1][p2] >= 0 && (w2 = this.series[f2][p2] >= 0 ? this.groupCtx.prevX[y2 - 1][p2] : this.groupCtx.prevX[y2 - 1][p2] - v2 + 2 * (this.isReversed ? v2 : 0)), e3 = w2;
            } else e3 = r2;
            o2 = null === this.series[f2][p2] ? e3 : e3 + this.series[f2][p2] / this.invertedYRatio - 2 * (this.isReversed ? this.series[f2][p2] / this.invertedYRatio : 0);
            var k2 = this.barHelpers.getBarpaths({
              barYPosition: u2,
              barHeight: a3,
              x1: e3,
              x2: o2,
              strokeWidth: s2,
              isReversed: this.isReversed,
              series: this.series,
              realIndex: i2.realIndex,
              seriesGroup: h2,
              i: f2,
              j: p2,
              w: g2
            });
            return this.barHelpers.barBackground({
              j: p2,
              i: f2,
              y1: u2,
              y2: a3,
              elSeries: d2
            }), n2 += c2, {
              pathTo: k2.pathTo,
              pathFrom: k2.pathFrom,
              goalX: this.barHelpers.getGoalValues("x", r2, null, f2, p2, b2),
              barXPosition: e3,
              barYPosition: u2,
              x: o2,
              y: n2
            };
          }
        }, {
          key: "drawStackedColumnPaths",
          value: function (t3) {
            var e3 = t3.indexes,
              i2 = t3.x,
              a3 = t3.y,
              s2 = t3.xDivision,
              r2 = t3.barWidth,
              o2 = t3.zeroH,
              n2 = t3.columnGroupIndex,
              l2 = t3.seriesGroup,
              h2 = t3.elSeries,
              c2 = this.w,
              d2 = e3.i,
              g2 = e3.j,
              u2 = e3.bc,
              f2 = e3.realIndex,
              p2 = e3.translationsIndex;
            if (c2.globals.isXNumeric) {
              var x2 = c2.globals.seriesX[f2][g2];
              x2 || (x2 = 0), i2 = (x2 - c2.globals.minX) / this.xRatio - r2 / 2 * c2.globals.barGroups.length;
            }
            for (var b2, v2 = i2 + n2 * r2, m2 = 0, y2 = 0; y2 < this.groupCtx.prevYF.length; y2++) m2 += isNaN(this.groupCtx.prevYF[y2][g2]) ? 0 : this.groupCtx.prevYF[y2][g2];
            var w2 = d2;
            if (l2 && (w2 = l2.indexOf(c2.globals.seriesNames[f2])), w2 > 0 && !c2.globals.isXNumeric || w2 > 0 && c2.globals.isXNumeric && c2.globals.seriesX[f2 - 1][g2] === c2.globals.seriesX[f2][g2]) {
              var k2,
                A2,
                S2,
                C2 = Math.min(this.yRatio.length + 1, f2 + 1);
              if (void 0 !== this.groupCtx.prevY[w2 - 1] && this.groupCtx.prevY[w2 - 1].length) for (var L2 = 1; L2 < C2; L2++) {
                var P2;
                if (!isNaN(null === (P2 = this.groupCtx.prevY[w2 - L2]) || void 0 === P2 ? void 0 : P2[g2])) {
                  S2 = this.groupCtx.prevY[w2 - L2][g2];
                  break;
                }
              }
              for (var M2 = 1; M2 < C2; M2++) {
                var I2, T2;
                if ((null === (I2 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === I2 ? void 0 : I2[g2]) < 0) {
                  A2 = this.series[d2][g2] >= 0 ? S2 - m2 + 2 * (this.isReversed ? m2 : 0) : S2;
                  break;
                }
                if ((null === (T2 = this.groupCtx.prevYVal[w2 - M2]) || void 0 === T2 ? void 0 : T2[g2]) >= 0) {
                  A2 = this.series[d2][g2] >= 0 ? S2 : S2 + m2 - 2 * (this.isReversed ? m2 : 0);
                  break;
                }
              }
              void 0 === A2 && (A2 = c2.globals.gridHeight), b2 = null !== (k2 = this.groupCtx.prevYF[0]) && void 0 !== k2 && k2.every(function (t4) {
                return 0 === t4;
              }) && this.groupCtx.prevYF.slice(1, w2).every(function (t4) {
                return t4.every(function (t5) {
                  return isNaN(t5);
                });
              }) ? o2 : A2;
            } else b2 = o2;
            a3 = this.series[d2][g2] ? b2 - this.series[d2][g2] / this.yRatio[p2] + 2 * (this.isReversed ? this.series[d2][g2] / this.yRatio[p2] : 0) : b2;
            var z2 = this.barHelpers.getColumnPaths({
              barXPosition: v2,
              barWidth: r2,
              y1: b2,
              y2: a3,
              yRatio: this.yRatio[p2],
              strokeWidth: this.strokeWidth,
              isReversed: this.isReversed,
              series: this.series,
              seriesGroup: l2,
              realIndex: e3.realIndex,
              i: d2,
              j: g2,
              w: c2
            });
            return this.barHelpers.barBackground({
              bc: u2,
              j: g2,
              i: d2,
              x1: v2,
              x2: r2,
              elSeries: h2
            }), {
              pathTo: z2.pathTo,
              pathFrom: z2.pathFrom,
              goalY: this.barHelpers.getGoalValues("y", null, o2, d2, g2),
              barXPosition: v2,
              x: c2.globals.isXNumeric ? i2 : i2 + s2,
              y: a3
            };
          }
        }]), a2;
      }(),
      Lt = function (t2) {
        h(a2, St);
        var e2 = o(a2);
        function a2() {
          return i(this, a2), e2.apply(this, arguments);
        }
        return s(a2, [{
          key: "draw",
          value: function (t3, e3, i2) {
            var a3 = this,
              s2 = this.w,
              r2 = new k(this.ctx),
              o2 = s2.globals.comboCharts ? e3 : s2.config.chart.type,
              n2 = new N(this.ctx);
            this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s2.config.plotOptions.bar.horizontal;
            var l2 = new A(this.ctx, s2);
            t3 = l2.getLogSeries(t3), this.series = t3, this.yRatio = l2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
            for (var h2 = r2.group({
                class: "apexcharts-".concat(o2, "-series apexcharts-plot-series")
              }), c2 = function (e4) {
                a3.isBoxPlot = "boxPlot" === s2.config.chart.type || "boxPlot" === s2.config.series[e4].type;
                var o3,
                  l3,
                  c3,
                  d3,
                  u2 = void 0,
                  f2 = void 0,
                  p2 = [],
                  x2 = [],
                  b2 = s2.globals.comboCharts ? i2[e4] : e4,
                  v2 = a3.barHelpers.getGroupIndex(b2).columnGroupIndex,
                  y2 = r2.group({
                    class: "apexcharts-series",
                    seriesName: m.escapeString(s2.globals.seriesNames[b2]),
                    rel: e4 + 1,
                    "data:realIndex": b2
                  });
                a3.ctx.series.addCollapsedClassToSeries(y2, b2), t3[e4].length > 0 && (a3.visibleI = a3.visibleI + 1);
                var w2,
                  k2,
                  A2 = 0;
                a3.yRatio.length > 1 && (a3.yaxisIndex = s2.globals.seriesYAxisReverseMap[b2][0], A2 = b2);
                var S2 = a3.barHelpers.initialPositions();
                f2 = S2.y, w2 = S2.barHeight, l3 = S2.yDivision, d3 = S2.zeroW, u2 = S2.x, k2 = S2.barWidth, o3 = S2.xDivision, c3 = S2.zeroH, x2.push(u2 + k2 / 2);
                for (var C2 = r2.group({
                    class: "apexcharts-datalabels",
                    "data:realIndex": b2
                  }), L2 = function (i3) {
                    var r3 = a3.barHelpers.getStrokeWidth(e4, i3, b2),
                      h3 = null,
                      m2 = {
                        indexes: {
                          i: e4,
                          j: i3,
                          realIndex: b2,
                          translationsIndex: A2
                        },
                        x: u2,
                        y: f2,
                        strokeWidth: r3,
                        elSeries: y2
                      };
                    h3 = a3.isHorizontal ? a3.drawHorizontalBoxPaths(g(g({}, m2), {}, {
                      yDivision: l3,
                      barHeight: w2,
                      zeroW: d3
                    })) : a3.drawVerticalBoxPaths(g(g({}, m2), {}, {
                      xDivision: o3,
                      barWidth: k2,
                      zeroH: c3
                    })), f2 = h3.y, u2 = h3.x, i3 > 0 && x2.push(u2 + k2 / 2), p2.push(f2), h3.pathTo.forEach(function (o4, l4) {
                      var c4 = !a3.isBoxPlot && a3.candlestickOptions.wick.useFillColor ? h3.color[l4] : s2.globals.stroke.colors[e4],
                        d4 = n2.fillPath({
                          seriesNumber: b2,
                          dataPointIndex: i3,
                          color: h3.color[l4],
                          value: t3[e4][i3]
                        });
                      a3.renderSeries({
                        realIndex: b2,
                        pathFill: d4,
                        lineFill: c4,
                        j: i3,
                        i: e4,
                        pathFrom: h3.pathFrom,
                        pathTo: o4,
                        strokeWidth: r3,
                        elSeries: y2,
                        x: u2,
                        y: f2,
                        series: t3,
                        columnGroupIndex: v2,
                        barHeight: w2,
                        barWidth: k2,
                        elDataLabelsWrap: C2,
                        visibleSeries: a3.visibleI,
                        type: s2.config.chart.type
                      });
                    });
                  }, P2 = 0; P2 < s2.globals.dataPoints; P2++) L2(P2);
                s2.globals.seriesXvalues[b2] = x2, s2.globals.seriesYvalues[b2] = p2, h2.add(y2);
              }, d2 = 0; d2 < t3.length; d2++) c2(d2);
            return h2;
          }
        }, {
          key: "drawVerticalBoxPaths",
          value: function (t3) {
            var e3 = t3.indexes,
              i2 = t3.x;
            t3.y;
            var a3 = t3.xDivision,
              s2 = t3.barWidth,
              r2 = t3.zeroH,
              o2 = t3.strokeWidth,
              n2 = this.w,
              l2 = new k(this.ctx),
              h2 = e3.i,
              c2 = e3.j,
              d2 = true,
              g2 = n2.config.plotOptions.candlestick.colors.upward,
              u2 = n2.config.plotOptions.candlestick.colors.downward,
              f2 = "";
            this.isBoxPlot && (f2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
            var p2 = this.yRatio[e3.translationsIndex],
              x2 = e3.realIndex,
              b2 = this.getOHLCValue(x2, c2),
              v2 = r2,
              m2 = r2;
            b2.o > b2.c && (d2 = false);
            var y2 = Math.min(b2.o, b2.c),
              w2 = Math.max(b2.o, b2.c),
              A2 = b2.m;
            n2.globals.isXNumeric && (i2 = (n2.globals.seriesX[x2][c2] - n2.globals.minX) / this.xRatio - s2 / 2);
            var S2 = i2 + s2 * this.visibleI;
            void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (y2 = r2, w2 = r2) : (y2 = r2 - y2 / p2, w2 = r2 - w2 / p2, v2 = r2 - b2.h / p2, m2 = r2 - b2.l / p2, A2 = r2 - b2.m / p2);
            var C2 = l2.move(S2, r2),
              L2 = l2.move(S2 + s2 / 2, y2);
            return n2.globals.previousPaths.length > 0 && (L2 = this.getPreviousPath(x2, c2, true)), C2 = this.isBoxPlot ? [l2.move(S2, y2) + l2.line(S2 + s2 / 2, y2) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 4, v2) + l2.line(S2 + s2 - s2 / 4, v2) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 2, y2) + l2.line(S2 + s2, y2) + l2.line(S2 + s2, A2) + l2.line(S2, A2) + l2.line(S2, y2 + o2 / 2), l2.move(S2, A2) + l2.line(S2 + s2, A2) + l2.line(S2 + s2, w2) + l2.line(S2 + s2 / 2, w2) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 - s2 / 4, m2) + l2.line(S2 + s2 / 4, m2) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 / 2, w2) + l2.line(S2, w2) + l2.line(S2, A2) + "z"] : [l2.move(S2, w2) + l2.line(S2 + s2 / 2, w2) + l2.line(S2 + s2 / 2, v2) + l2.line(S2 + s2 / 2, w2) + l2.line(S2 + s2, w2) + l2.line(S2 + s2, y2) + l2.line(S2 + s2 / 2, y2) + l2.line(S2 + s2 / 2, m2) + l2.line(S2 + s2 / 2, y2) + l2.line(S2, y2) + l2.line(S2, w2 - o2 / 2)], L2 += l2.move(S2, y2), n2.globals.isXNumeric || (i2 += a3), {
              pathTo: C2,
              pathFrom: L2,
              x: i2,
              y: w2,
              barXPosition: S2,
              color: this.isBoxPlot ? f2 : d2 ? [g2] : [u2]
            };
          }
        }, {
          key: "drawHorizontalBoxPaths",
          value: function (t3) {
            var e3 = t3.indexes;
            t3.x;
            var i2 = t3.y,
              a3 = t3.yDivision,
              s2 = t3.barHeight,
              r2 = t3.zeroW,
              o2 = t3.strokeWidth,
              n2 = this.w,
              l2 = new k(this.ctx),
              h2 = e3.i,
              c2 = e3.j,
              d2 = this.boxOptions.colors.lower;
            this.isBoxPlot && (d2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
            var g2 = this.invertedYRatio,
              u2 = e3.realIndex,
              f2 = this.getOHLCValue(u2, c2),
              p2 = r2,
              x2 = r2,
              b2 = Math.min(f2.o, f2.c),
              v2 = Math.max(f2.o, f2.c),
              m2 = f2.m;
            n2.globals.isXNumeric && (i2 = (n2.globals.seriesX[u2][c2] - n2.globals.minX) / this.invertedXRatio - s2 / 2);
            var y2 = i2 + s2 * this.visibleI;
            void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (b2 = r2, v2 = r2) : (b2 = r2 + b2 / g2, v2 = r2 + v2 / g2, p2 = r2 + f2.h / g2, x2 = r2 + f2.l / g2, m2 = r2 + f2.m / g2);
            var w2 = l2.move(r2, y2),
              A2 = l2.move(b2, y2 + s2 / 2);
            return n2.globals.previousPaths.length > 0 && (A2 = this.getPreviousPath(u2, c2, true)), w2 = [l2.move(b2, y2) + l2.line(b2, y2 + s2 / 2) + l2.line(p2, y2 + s2 / 2) + l2.line(p2, y2 + s2 / 2 - s2 / 4) + l2.line(p2, y2 + s2 / 2 + s2 / 4) + l2.line(p2, y2 + s2 / 2) + l2.line(b2, y2 + s2 / 2) + l2.line(b2, y2 + s2) + l2.line(m2, y2 + s2) + l2.line(m2, y2) + l2.line(b2 + o2 / 2, y2), l2.move(m2, y2) + l2.line(m2, y2 + s2) + l2.line(v2, y2 + s2) + l2.line(v2, y2 + s2 / 2) + l2.line(x2, y2 + s2 / 2) + l2.line(x2, y2 + s2 - s2 / 4) + l2.line(x2, y2 + s2 / 4) + l2.line(x2, y2 + s2 / 2) + l2.line(v2, y2 + s2 / 2) + l2.line(v2, y2) + l2.line(m2, y2) + "z"], A2 += l2.move(b2, y2), n2.globals.isXNumeric || (i2 += a3), {
              pathTo: w2,
              pathFrom: A2,
              x: v2,
              y: i2,
              barYPosition: y2,
              color: d2
            };
          }
        }, {
          key: "getOHLCValue",
          value: function (t3, e3) {
            var i2 = this.w;
            return {
              o: this.isBoxPlot ? i2.globals.seriesCandleH[t3][e3] : i2.globals.seriesCandleO[t3][e3],
              h: this.isBoxPlot ? i2.globals.seriesCandleO[t3][e3] : i2.globals.seriesCandleH[t3][e3],
              m: i2.globals.seriesCandleM[t3][e3],
              l: this.isBoxPlot ? i2.globals.seriesCandleC[t3][e3] : i2.globals.seriesCandleL[t3][e3],
              c: this.isBoxPlot ? i2.globals.seriesCandleL[t3][e3] : i2.globals.seriesCandleC[t3][e3]
            };
          }
        }]), a2;
      }(),
      Pt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "checkColorRange",
          value: function () {
            var t3 = this.w,
              e2 = false,
              i2 = t3.config.plotOptions[t3.config.chart.type];
            return i2.colorScale.ranges.length > 0 && i2.colorScale.ranges.map(function (t4, i3) {
              t4.from <= 0 && (e2 = true);
            }), e2;
          }
        }, {
          key: "getShadeColor",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = 1,
              o2 = s2.config.plotOptions[t3].shadeIntensity,
              n2 = this.determineColor(t3, e2, i2);
            s2.globals.hasNegs || a2 ? r2 = s2.config.plotOptions[t3].reverseNegativeShade ? n2.percent < 0 ? n2.percent / 100 * (1.25 * o2) : (1 - n2.percent / 100) * (1.25 * o2) : n2.percent <= 0 ? 1 - (1 + n2.percent / 100) * o2 : (1 - n2.percent / 100) * o2 : (r2 = 1 - n2.percent / 100, "treemap" === t3 && (r2 = (1 - n2.percent / 100) * (1.25 * o2)));
            var l2 = n2.color,
              h2 = new m();
            if (s2.config.plotOptions[t3].enableShades) if ("dark" === this.w.config.theme.mode) {
              var c2 = h2.shadeColor(-1 * r2, n2.color);
              l2 = m.hexToRgba(m.isColorHex(c2) ? c2 : m.rgb2hex(c2), s2.config.fill.opacity);
            } else {
              var d2 = h2.shadeColor(r2, n2.color);
              l2 = m.hexToRgba(m.isColorHex(d2) ? d2 : m.rgb2hex(d2), s2.config.fill.opacity);
            }
            return {
              color: l2,
              colorProps: n2
            };
          }
        }, {
          key: "determineColor",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = a2.globals.series[e2][i2],
              r2 = a2.config.plotOptions[t3],
              o2 = r2.colorScale.inverse ? i2 : e2;
            r2.distributed && "treemap" === a2.config.chart.type && (o2 = i2);
            var n2 = a2.globals.colors[o2],
              l2 = null,
              h2 = Math.min.apply(Math, p(a2.globals.series[e2])),
              c2 = Math.max.apply(Math, p(a2.globals.series[e2]));
            r2.distributed || "heatmap" !== t3 || (h2 = a2.globals.minY, c2 = a2.globals.maxY), void 0 !== r2.colorScale.min && (h2 = r2.colorScale.min < a2.globals.minY ? r2.colorScale.min : a2.globals.minY, c2 = r2.colorScale.max > a2.globals.maxY ? r2.colorScale.max : a2.globals.maxY);
            var d2 = Math.abs(c2) + Math.abs(h2),
              g2 = 100 * s2 / (0 === d2 ? d2 - 1e-6 : d2);
            r2.colorScale.ranges.length > 0 && r2.colorScale.ranges.map(function (t4, e3) {
              if (s2 >= t4.from && s2 <= t4.to) {
                n2 = t4.color, l2 = t4.foreColor ? t4.foreColor : null, h2 = t4.from, c2 = t4.to;
                var i3 = Math.abs(c2) + Math.abs(h2);
                g2 = 100 * s2 / (0 === i3 ? i3 - 1e-6 : i3);
              }
            });
            return {
              color: n2,
              foreColor: l2,
              percent: g2
            };
          }
        }, {
          key: "calculateDataLabels",
          value: function (t3) {
            var e2 = t3.text,
              i2 = t3.x,
              a2 = t3.y,
              s2 = t3.i,
              r2 = t3.j,
              o2 = t3.colorProps,
              n2 = t3.fontSize,
              l2 = this.w.config.dataLabels,
              h2 = new k(this.ctx),
              c2 = new G(this.ctx),
              d2 = null;
            if (l2.enabled) {
              d2 = h2.group({
                class: "apexcharts-data-labels"
              });
              var g2 = l2.offsetX,
                u2 = l2.offsetY,
                f2 = i2 + g2,
                p2 = a2 + parseFloat(l2.style.fontSize) / 3 + u2;
              c2.plotDataLabelsText({
                x: f2,
                y: p2,
                text: e2,
                i: s2,
                j: r2,
                color: o2.foreColor,
                parent: d2,
                fontSize: n2,
                dataLabelsConfig: l2
              });
            }
            return d2;
          }
        }, {
          key: "addListeners",
          value: function (t3) {
            var e2 = new k(this.ctx);
            t3.node.addEventListener("mouseenter", e2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", e2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mousedown", e2.pathMouseDown.bind(this, t3));
          }
        }]), t2;
      }(),
      Mt = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.xRatio = a2.xRatio, this.yRatio = a2.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new Pt(e2), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
        }
        return s(t2, [{
          key: "draw",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a2 = i2.group({
                class: "apexcharts-heatmap"
              });
            a2.attr("clip-path", "url(#gridRectMask".concat(e2.globals.cuid, ")"));
            var s2 = e2.globals.gridWidth / e2.globals.dataPoints,
              r2 = e2.globals.gridHeight / e2.globals.series.length,
              o2 = 0,
              n2 = false;
            this.negRange = this.helpers.checkColorRange();
            var l2 = t3.slice();
            e2.config.yaxis[0].reversed && (n2 = true, l2.reverse());
            for (var h2 = n2 ? 0 : l2.length - 1; n2 ? h2 < l2.length : h2 >= 0; n2 ? h2++ : h2--) {
              var c2 = i2.group({
                class: "apexcharts-series apexcharts-heatmap-series",
                seriesName: m.escapeString(e2.globals.seriesNames[h2]),
                rel: h2 + 1,
                "data:realIndex": h2
              });
              if (this.ctx.series.addCollapsedClassToSeries(c2, h2), e2.config.chart.dropShadow.enabled) {
                var d2 = e2.config.chart.dropShadow;
                new w(this.ctx).dropShadow(c2, d2, h2);
              }
              for (var g2 = 0, u2 = e2.config.plotOptions.heatmap.shadeIntensity, f2 = 0; f2 < l2[h2].length; f2++) {
                var p2 = this.helpers.getShadeColor(e2.config.chart.type, h2, f2, this.negRange),
                  x2 = p2.color,
                  b2 = p2.colorProps;
                if ("image" === e2.config.fill.type) x2 = new N(this.ctx).fillPath({
                  seriesNumber: h2,
                  dataPointIndex: f2,
                  opacity: e2.globals.hasNegs ? b2.percent < 0 ? 1 - (1 + b2.percent / 100) : u2 + b2.percent / 100 : b2.percent / 100,
                  patternID: m.randomId(),
                  width: e2.config.fill.image.width ? e2.config.fill.image.width : s2,
                  height: e2.config.fill.image.height ? e2.config.fill.image.height : r2
                });
                var v2 = this.rectRadius,
                  y2 = i2.drawRect(g2, o2, s2, r2, v2);
                if (y2.attr({
                  cx: g2,
                  cy: o2
                }), y2.node.classList.add("apexcharts-heatmap-rect"), c2.add(y2), y2.attr({
                  fill: x2,
                  i: h2,
                  index: h2,
                  j: f2,
                  val: t3[h2][f2],
                  "stroke-width": this.strokeWidth,
                  stroke: e2.config.plotOptions.heatmap.useFillColorAsStroke ? x2 : e2.globals.stroke.colors[0],
                  color: x2
                }), this.helpers.addListeners(y2), e2.config.chart.animations.enabled && !e2.globals.dataChanged) {
                  var A2 = 1;
                  e2.globals.resized || (A2 = e2.config.chart.animations.speed), this.animateHeatMap(y2, g2, o2, s2, r2, A2);
                }
                if (e2.globals.dataChanged) {
                  var S2 = 1;
                  if (this.dynamicAnim.enabled && e2.globals.shouldAnimate) {
                    S2 = this.dynamicAnim.speed;
                    var C2 = e2.globals.previousPaths[h2] && e2.globals.previousPaths[h2][f2] && e2.globals.previousPaths[h2][f2].color;
                    C2 || (C2 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(y2, m.isColorHex(C2) ? C2 : m.rgb2hex(C2), m.isColorHex(x2) ? x2 : m.rgb2hex(x2), S2);
                  }
                }
                var L2 = (0, e2.config.dataLabels.formatter)(e2.globals.series[h2][f2], {
                    value: e2.globals.series[h2][f2],
                    seriesIndex: h2,
                    dataPointIndex: f2,
                    w: e2
                  }),
                  P2 = this.helpers.calculateDataLabels({
                    text: L2,
                    x: g2 + s2 / 2,
                    y: o2 + r2 / 2,
                    i: h2,
                    j: f2,
                    colorProps: b2,
                    series: l2
                  });
                null !== P2 && c2.add(P2), g2 += s2;
              }
              o2 += r2, a2.add(c2);
            }
            var M2 = e2.globals.yAxisScale[0].result.slice();
            return e2.config.yaxis[0].reversed ? M2.unshift("") : M2.push(""), e2.globals.yAxisScale[0].result = M2, a2;
          }
        }, {
          key: "animateHeatMap",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2 = new y(this.ctx);
            o2.animateRect(t3, {
              x: e2 + a2 / 2,
              y: i2 + s2 / 2,
              width: 0,
              height: 0
            }, {
              x: e2,
              y: i2,
              width: a2,
              height: s2
            }, r2, function () {
              o2.animationCompleted(t3);
            });
          }
        }, {
          key: "animateHeatColor",
          value: function (t3, e2, i2, a2) {
            t3.attr({
              fill: e2
            }).animate(a2).attr({
              fill: i2
            });
          }
        }]), t2;
      }(),
      It = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "drawYAxisTexts",
          value: function (t3, e2, i2, a2) {
            var s2 = this.w,
              r2 = s2.config.yaxis[0],
              o2 = s2.globals.yLabelFormatters[0];
            return new k(this.ctx).drawText({
              x: t3 + r2.labels.offsetX,
              y: e2 + r2.labels.offsetY,
              text: o2(a2, i2),
              textAnchor: "middle",
              fontSize: r2.labels.style.fontSize,
              fontFamily: r2.labels.style.fontFamily,
              foreColor: Array.isArray(r2.labels.style.colors) ? r2.labels.style.colors[i2] : r2.labels.style.colors
            });
          }
        }]), t2;
      }(),
      Tt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
          var a2 = this.w;
          this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== a2.globals.stroke.colors ? a2.globals.stroke.colors : a2.globals.colors, this.defaultSize = Math.min(a2.globals.gridWidth, a2.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = a2.globals.gridWidth / 2, "radialBar" === a2.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(a2.config.plotOptions.pie.endAngle - a2.config.plotOptions.pie.startAngle), this.initialAngle = a2.config.plotOptions.pie.startAngle % this.fullAngle, a2.globals.radialSize = this.defaultSize / 2.05 - a2.config.stroke.width - (a2.config.chart.sparkline.enabled ? 0 : a2.config.chart.dropShadow.blur), this.donutSize = a2.globals.radialSize * parseInt(a2.config.plotOptions.pie.donut.size, 10) / 100;
          var s2 = a2.config.plotOptions.pie.customScale,
            r2 = a2.globals.gridWidth / 2,
            o2 = a2.globals.gridHeight / 2;
          this.translateX = r2 - r2 * s2, this.translateY = o2 - o2 * s2, this.dataLabelsGroup = new k(this.ctx).group({
            class: "apexcharts-datalabels-group",
            transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(s2, ")")
          }), this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
        }
        return s(t2, [{
          key: "draw",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = new k(this.ctx),
              s2 = a2.group({
                class: "apexcharts-pie"
              });
            if (i2.globals.noData) return s2;
            for (var r2 = 0, o2 = 0; o2 < t3.length; o2++) r2 += m.negToZero(t3[o2]);
            var n2 = [],
              l2 = a2.group();
            0 === r2 && (r2 = 1e-5), t3.forEach(function (t4) {
              e2.maxY = Math.max(e2.maxY, t4);
            }), i2.config.yaxis[0].max && (this.maxY = i2.config.yaxis[0].max), "back" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s2);
            for (var h2 = 0; h2 < t3.length; h2++) {
              var c2 = this.fullAngle * m.negToZero(t3[h2]) / r2;
              n2.push(c2), "polarArea" === this.chartType ? (n2[h2] = this.fullAngle / t3.length, this.sliceSizes.push(i2.globals.radialSize * t3[h2] / this.maxY)) : this.sliceSizes.push(i2.globals.radialSize);
            }
            if (i2.globals.dataChanged) {
              for (var d2, g2 = 0, u2 = 0; u2 < i2.globals.previousPaths.length; u2++) g2 += m.negToZero(i2.globals.previousPaths[u2]);
              for (var f2 = 0; f2 < i2.globals.previousPaths.length; f2++) d2 = this.fullAngle * m.negToZero(i2.globals.previousPaths[f2]) / g2, this.prevSectorAngleArr.push(d2);
            }
            if (this.donutSize < 0 && (this.donutSize = 0), "donut" === this.chartType) {
              var p2 = a2.drawCircle(this.donutSize);
              p2.attr({
                cx: this.centerX,
                cy: this.centerY,
                fill: i2.config.plotOptions.pie.donut.background ? i2.config.plotOptions.pie.donut.background : "transparent"
              }), l2.add(p2);
            }
            var x2 = this.drawArcs(n2, t3);
            if (this.sliceLabels.forEach(function (t4) {
              x2.add(t4);
            }), l2.attr({
              transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(i2.config.plotOptions.pie.customScale, ")")
            }), l2.add(x2), s2.add(l2), this.donutDataLabels.show) {
              var b2 = this.renderInnerDataLabels(this.dataLabelsGroup, this.donutDataLabels, {
                hollowSize: this.donutSize,
                centerX: this.centerX,
                centerY: this.centerY,
                opacity: this.donutDataLabels.show
              });
              s2.add(b2);
            }
            return "front" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s2), s2;
          }
        }, {
          key: "drawArcs",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = new w(this.ctx),
              s2 = new k(this.ctx),
              r2 = new N(this.ctx),
              o2 = s2.group({
                class: "apexcharts-slices"
              }),
              n2 = this.initialAngle,
              l2 = this.initialAngle,
              h2 = this.initialAngle,
              c2 = this.initialAngle;
            this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0;
            for (var d2 = 0; d2 < t3.length; d2++) {
              var g2 = s2.group({
                class: "apexcharts-series apexcharts-pie-series",
                seriesName: m.escapeString(i2.globals.seriesNames[d2]),
                rel: d2 + 1,
                "data:realIndex": d2
              });
              o2.add(g2), l2 = c2, h2 = (n2 = h2) + t3[d2], c2 = l2 + this.prevSectorAngleArr[d2];
              var u2 = h2 < n2 ? this.fullAngle + h2 - n2 : h2 - n2,
                f2 = r2.fillPath({
                  seriesNumber: d2,
                  size: this.sliceSizes[d2],
                  value: e2[d2]
                }),
                p2 = this.getChangedPath(l2, c2),
                x2 = s2.drawPath({
                  d: p2,
                  stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d2] : this.lineColorArr,
                  strokeWidth: 0,
                  fill: f2,
                  fillOpacity: i2.config.fill.opacity,
                  classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d2)
                });
              if (x2.attr({
                index: 0,
                j: d2
              }), a2.setSelectionFilter(x2, 0, d2), i2.config.chart.dropShadow.enabled) {
                var b2 = i2.config.chart.dropShadow;
                a2.dropShadow(x2, b2, d2);
              }
              this.addListeners(x2, this.donutDataLabels), k.setAttrs(x2.node, {
                "data:angle": u2,
                "data:startAngle": n2,
                "data:strokeWidth": this.strokeWidth,
                "data:value": e2[d2]
              });
              var v2 = {
                x: 0,
                y: 0
              };
              "pie" === this.chartType || "polarArea" === this.chartType ? v2 = m.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize / 1.25 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle) : "donut" === this.chartType && (v2 = m.polarToCartesian(this.centerX, this.centerY, (i2.globals.radialSize + this.donutSize) / 2 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle)), g2.add(x2);
              var y2 = 0;
              if (!this.initialAnim || i2.globals.resized || i2.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (y2 = u2 / this.fullAngle * i2.config.chart.animations.speed) && (y2 = 1), this.animDur = y2 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i2.globals.dataChanged ? this.animatePaths(x2, {
                size: this.sliceSizes[d2],
                endAngle: h2,
                startAngle: n2,
                prevStartAngle: l2,
                prevEndAngle: c2,
                animateStartingPos: true,
                i: d2,
                animBeginArr: this.animBeginArr,
                shouldSetPrevPaths: true,
                dur: i2.config.chart.animations.dynamicAnimation.speed
              }) : this.animatePaths(x2, {
                size: this.sliceSizes[d2],
                endAngle: h2,
                startAngle: n2,
                i: d2,
                totalItems: t3.length - 1,
                animBeginArr: this.animBeginArr,
                dur: y2
              }), i2.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && x2.node.addEventListener("mouseup", this.pieClicked.bind(this, d2)), void 0 !== i2.globals.selectedDataPoints[0] && i2.globals.selectedDataPoints[0].indexOf(d2) > -1 && this.pieClicked(d2), i2.config.dataLabels.enabled) {
                var A2 = v2.x,
                  S2 = v2.y,
                  C2 = 100 * u2 / this.fullAngle + "%";
                if (0 !== u2 && i2.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t3[d2]) {
                  var L2 = i2.config.dataLabels.formatter;
                  void 0 !== L2 && (C2 = L2(i2.globals.seriesPercent[d2][0], {
                    seriesIndex: d2,
                    w: i2
                  }));
                  var P2 = i2.globals.dataLabels.style.colors[d2],
                    M2 = s2.group({
                      class: "apexcharts-datalabels"
                    }),
                    I2 = s2.drawText({
                      x: A2,
                      y: S2,
                      text: C2,
                      textAnchor: "middle",
                      fontSize: i2.config.dataLabels.style.fontSize,
                      fontFamily: i2.config.dataLabels.style.fontFamily,
                      fontWeight: i2.config.dataLabels.style.fontWeight,
                      foreColor: P2
                    });
                  if (M2.add(I2), i2.config.dataLabels.dropShadow.enabled) {
                    var T2 = i2.config.dataLabels.dropShadow;
                    a2.dropShadow(I2, T2);
                  }
                  I2.node.classList.add("apexcharts-pie-label"), i2.config.chart.animations.animate && false === i2.globals.resized && (I2.node.classList.add("apexcharts-pie-label-delay"), I2.node.style.animationDelay = i2.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(M2);
                }
              }
            }
            return o2;
          }
        }, {
          key: "addListeners",
          value: function (t3, e2) {
            var i2 = new k(this.ctx);
            t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this, t3)), this.donutDataLabels.total.showAlways || (t3.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t3.node, e2)));
          }
        }, {
          key: "animatePaths",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = e2.endAngle < e2.startAngle ? this.fullAngle + e2.endAngle - e2.startAngle : e2.endAngle - e2.startAngle,
              s2 = a2,
              r2 = e2.startAngle,
              o2 = e2.startAngle;
            void 0 !== e2.prevStartAngle && void 0 !== e2.prevEndAngle && (r2 = e2.prevEndAngle, s2 = e2.prevEndAngle < e2.prevStartAngle ? this.fullAngle + e2.prevEndAngle - e2.prevStartAngle : e2.prevEndAngle - e2.prevStartAngle), e2.i === i2.config.series.length - 1 && (a2 + o2 > this.fullAngle ? e2.endAngle = e2.endAngle - (a2 + o2) : a2 + o2 < this.fullAngle && (e2.endAngle = e2.endAngle + (this.fullAngle - (a2 + o2)))), a2 === this.fullAngle && (a2 = this.fullAngle - 0.01), this.animateArc(t3, r2, o2, a2, s2, e2);
          }
        }, {
          key: "animateArc",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2,
              n2 = this,
              l2 = this.w,
              h2 = new y(this.ctx),
              c2 = r2.size;
            (isNaN(e2) || isNaN(s2)) && (e2 = i2, s2 = a2, r2.dur = 0);
            var d2 = a2,
              g2 = i2,
              u2 = e2 < i2 ? this.fullAngle + e2 - i2 : e2 - i2;
            l2.globals.dataChanged && r2.shouldSetPrevPaths && r2.prevEndAngle && (o2 = n2.getPiePath({
              me: n2,
              startAngle: r2.prevStartAngle,
              angle: r2.prevEndAngle < r2.prevStartAngle ? this.fullAngle + r2.prevEndAngle - r2.prevStartAngle : r2.prevEndAngle - r2.prevStartAngle,
              size: c2
            }), t3.attr({
              d: o2
            })), 0 !== r2.dur ? t3.animate(r2.dur, l2.globals.easing, r2.animBeginArr[r2.i]).afterAll(function () {
              "pie" !== n2.chartType && "donut" !== n2.chartType && "polarArea" !== n2.chartType || this.animate(l2.config.chart.animations.dynamicAnimation.speed).attr({
                "stroke-width": n2.strokeWidth
              }), r2.i === l2.config.series.length - 1 && h2.animationCompleted(t3);
            }).during(function (l3) {
              d2 = u2 + (a2 - u2) * l3, r2.animateStartingPos && (d2 = s2 + (a2 - s2) * l3, g2 = e2 - s2 + (i2 - (e2 - s2)) * l3), o2 = n2.getPiePath({
                me: n2,
                startAngle: g2,
                angle: d2,
                size: c2
              }), t3.node.setAttribute("data:pathOrig", o2), t3.attr({
                d: o2
              });
            }) : (o2 = n2.getPiePath({
              me: n2,
              startAngle: g2,
              angle: a2,
              size: c2
            }), r2.isTrack || (l2.globals.animationEnded = true), t3.node.setAttribute("data:pathOrig", o2), t3.attr({
              d: o2,
              "stroke-width": n2.strokeWidth
            }));
          }
        }, {
          key: "pieClicked",
          value: function (t3) {
            var e2,
              i2 = this.w,
              a2 = this,
              s2 = a2.sliceSizes[t3] + (i2.config.plotOptions.pie.expandOnClick ? 4 : 0),
              r2 = i2.globals.dom.Paper.select(".apexcharts-".concat(a2.chartType.toLowerCase(), "-slice-").concat(t3)).members[0];
            if ("true" !== r2.attr("data:pieClicked")) {
              var o2 = i2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
              Array.prototype.forEach.call(o2, function (t4) {
                t4.setAttribute("data:pieClicked", "false");
                var e3 = t4.getAttribute("data:pathOrig");
                e3 && t4.setAttribute("d", e3);
              }), i2.globals.capturedDataPointIndex = t3, r2.attr("data:pieClicked", "true");
              var n2 = parseInt(r2.attr("data:startAngle"), 10),
                l2 = parseInt(r2.attr("data:angle"), 10);
              e2 = a2.getPiePath({
                me: a2,
                startAngle: n2,
                angle: l2,
                size: s2
              }), 360 !== l2 && r2.plot(e2);
            } else {
              r2.attr({
                "data:pieClicked": "false"
              }), this.revertDataLabelsInner(r2.node, this.donutDataLabels);
              var h2 = r2.attr("data:pathOrig");
              r2.attr({
                d: h2
              });
            }
          }
        }, {
          key: "getChangedPath",
          value: function (t3, e2) {
            var i2 = "";
            return this.dynamicAnim && this.w.globals.dataChanged && (i2 = this.getPiePath({
              me: this,
              startAngle: t3,
              angle: e2 - t3,
              size: this.size
            })), i2;
          }
        }, {
          key: "getPiePath",
          value: function (t3) {
            var e2,
              i2 = t3.me,
              a2 = t3.startAngle,
              s2 = t3.angle,
              r2 = t3.size,
              o2 = new k(this.ctx),
              n2 = a2,
              l2 = Math.PI * (n2 - 90) / 180,
              h2 = s2 + a2;
            Math.ceil(h2) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h2 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(h2) > this.fullAngle && (h2 -= this.fullAngle);
            var c2 = Math.PI * (h2 - 90) / 180,
              d2 = i2.centerX + r2 * Math.cos(l2),
              g2 = i2.centerY + r2 * Math.sin(l2),
              u2 = i2.centerX + r2 * Math.cos(c2),
              f2 = i2.centerY + r2 * Math.sin(c2),
              p2 = m.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, h2),
              x2 = m.polarToCartesian(i2.centerX, i2.centerY, i2.donutSize, n2),
              b2 = s2 > 180 ? 1 : 0,
              v2 = ["M", d2, g2, "A", r2, r2, 0, b2, 1, u2, f2];
            return e2 = "donut" === i2.chartType ? [].concat(v2, ["L", p2.x, p2.y, "A", i2.donutSize, i2.donutSize, 0, b2, 0, x2.x, x2.y, "L", d2, g2, "z"]).join(" ") : "pie" === i2.chartType || "polarArea" === i2.chartType ? [].concat(v2, ["L", i2.centerX, i2.centerY, "L", d2, g2]).join(" ") : [].concat(v2).join(" "), o2.roundPathCorners(e2, 2 * this.strokeWidth);
          }
        }, {
          key: "drawPolarElements",
          value: function (t3) {
            var e2 = this.w,
              i2 = new $(this.ctx),
              a2 = new k(this.ctx),
              s2 = new It(this.ctx),
              r2 = a2.group(),
              o2 = a2.group(),
              n2 = i2.niceScale(0, Math.ceil(this.maxY), 0),
              l2 = n2.result.reverse(),
              h2 = n2.result.length;
            this.maxY = n2.niceMax;
            for (var c2 = e2.globals.radialSize, d2 = c2 / (h2 - 1), g2 = 0; g2 < h2 - 1; g2++) {
              var u2 = a2.drawCircle(c2);
              if (u2.attr({
                cx: this.centerX,
                cy: this.centerY,
                fill: "none",
                "stroke-width": e2.config.plotOptions.polarArea.rings.strokeWidth,
                stroke: e2.config.plotOptions.polarArea.rings.strokeColor
              }), e2.config.yaxis[0].show) {
                var f2 = s2.drawYAxisTexts(this.centerX, this.centerY - c2 + parseInt(e2.config.yaxis[0].labels.style.fontSize, 10) / 2, g2, l2[g2]);
                o2.add(f2);
              }
              r2.add(u2), c2 -= d2;
            }
            this.drawSpokes(t3), t3.add(r2), t3.add(o2);
          }
        }, {
          key: "renderInnerDataLabels",
          value: function (t3, e2, i2) {
            var a2 = this.w,
              s2 = new k(this.ctx),
              r2 = e2.total.show;
            t3.node.innerHTML = "", t3.node.style.opacity = i2.opacity;
            var o2,
              n2,
              l2 = i2.centerX,
              h2 = this.donutDataLabels.total.label ? i2.centerY : i2.centerY - i2.centerY / 6;
            o2 = void 0 === e2.name.color ? a2.globals.colors[0] : e2.name.color;
            var c2 = e2.name.fontSize,
              d2 = e2.name.fontFamily,
              g2 = e2.name.fontWeight;
            n2 = void 0 === e2.value.color ? a2.config.chart.foreColor : e2.value.color;
            var u2 = e2.value.formatter,
              f2 = "",
              p2 = "";
            if (r2 ? (o2 = e2.total.color, c2 = e2.total.fontSize, d2 = e2.total.fontFamily, g2 = e2.total.fontWeight, p2 = this.donutDataLabels.total.label ? e2.total.label : "", f2 = e2.total.formatter(a2)) : 1 === a2.globals.series.length && (f2 = u2(a2.globals.series[0], a2), p2 = a2.globals.seriesNames[0]), p2 && (p2 = e2.name.formatter(p2, e2.total.show, a2)), e2.name.show) {
              var x2 = s2.drawText({
                x: l2,
                y: h2 + parseFloat(e2.name.offsetY),
                text: p2,
                textAnchor: "middle",
                foreColor: o2,
                fontSize: c2,
                fontWeight: g2,
                fontFamily: d2
              });
              x2.node.classList.add("apexcharts-datalabel-label"), t3.add(x2);
            }
            if (e2.value.show) {
              var b2 = e2.name.show ? parseFloat(e2.value.offsetY) + 16 : e2.value.offsetY,
                v2 = s2.drawText({
                  x: l2,
                  y: h2 + b2,
                  text: f2,
                  textAnchor: "middle",
                  foreColor: n2,
                  fontWeight: e2.value.fontWeight,
                  fontSize: e2.value.fontSize,
                  fontFamily: e2.value.fontFamily
                });
              v2.node.classList.add("apexcharts-datalabel-value"), t3.add(v2);
            }
            return t3;
          }
        }, {
          key: "printInnerLabels",
          value: function (t3, e2, i2, a2) {
            var s2,
              r2 = this.w;
            a2 ? s2 = void 0 === t3.name.color ? r2.globals.colors[parseInt(a2.parentNode.getAttribute("rel"), 10) - 1] : t3.name.color : r2.globals.series.length > 1 && t3.total.show && (s2 = t3.total.color);
            var o2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),
              n2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
            i2 = (0, t3.value.formatter)(i2, r2), a2 || "function" != typeof t3.total.formatter || (i2 = t3.total.formatter(r2));
            var l2 = e2 === t3.total.label;
            e2 = this.donutDataLabels.total.label ? t3.name.formatter(e2, l2, r2) : "", null !== o2 && (o2.textContent = e2), null !== n2 && (n2.textContent = i2), null !== o2 && (o2.style.fill = s2);
          }
        }, {
          key: "printDataLabelsInner",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = t3.getAttribute("data:value"),
              s2 = i2.globals.seriesNames[parseInt(t3.parentNode.getAttribute("rel"), 10) - 1];
            i2.globals.series.length > 1 && this.printInnerLabels(e2, s2, a2, t3);
            var r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
            null !== r2 && (r2.style.opacity = 1);
          }
        }, {
          key: "drawSpokes",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = new k(this.ctx),
              s2 = i2.config.plotOptions.polarArea.spokes;
            if (0 !== s2.strokeWidth) {
              for (var r2 = [], o2 = 360 / i2.globals.series.length, n2 = 0; n2 < i2.globals.series.length; n2++) r2.push(m.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize, i2.config.plotOptions.pie.startAngle + o2 * n2));
              r2.forEach(function (i3, r3) {
                var o3 = a2.drawLine(i3.x, i3.y, e2.centerX, e2.centerY, Array.isArray(s2.connectorColors) ? s2.connectorColors[r3] : s2.connectorColors);
                t3.add(o3);
              });
            }
          }
        }, {
          key: "revertDataLabelsInner",
          value: function () {
            var t3 = this.w;
            if (this.donutDataLabels.show) {
              var e2 = t3.globals.dom.Paper.select(".apexcharts-datalabels-group").members[0],
                i2 = this.renderInnerDataLabels(e2, this.donutDataLabels, {
                  hollowSize: this.donutSize,
                  centerX: this.centerX,
                  centerY: this.centerY,
                  opacity: this.donutDataLabels.show
                });
              t3.globals.dom.Paper.select(".apexcharts-radialbar, .apexcharts-pie").members[0].add(i2);
            }
          }
        }]), t2;
      }(),
      zt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
          var a2 = this.w;
          this.graphics = new k(this.ctx), this.lineColorArr = void 0 !== a2.globals.stroke.colors ? a2.globals.stroke.colors : a2.globals.colors, this.defaultSize = a2.globals.svgHeight < a2.globals.svgWidth ? a2.globals.gridHeight : a2.globals.gridWidth, this.isLog = a2.config.yaxis[0].logarithmic, this.logBase = a2.config.yaxis[0].logBase, this.coreUtils = new A(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, a2.globals.maxY, 0) : a2.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : a2.globals.minY, this.polygons = a2.config.plotOptions.radar.polygons, this.strokeWidth = a2.config.stroke.show ? a2.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - a2.config.chart.dropShadow.blur, a2.config.xaxis.labels.show && (this.size = this.size - a2.globals.xAxisLabelsWidth / 1.75), void 0 !== a2.config.plotOptions.radar.size && (this.size = a2.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
        }
        return s(t2, [{
          key: "draw",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = new N(this.ctx),
              s2 = [],
              r2 = new G(this.ctx);
            t3.length && (this.dataPointsLen = t3[i2.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
            var o2 = i2.globals.gridWidth / 2,
              n2 = i2.globals.gridHeight / 2,
              l2 = o2 + i2.config.plotOptions.radar.offsetX,
              h2 = n2 + i2.config.plotOptions.radar.offsetY,
              c2 = this.graphics.group({
                class: "apexcharts-radar-series apexcharts-plot-series",
                transform: "translate(".concat(l2 || 0, ", ").concat(h2 || 0, ")")
              }),
              d2 = [],
              u2 = null,
              f2 = null;
            if (this.yaxisLabels = this.graphics.group({
              class: "apexcharts-yaxis"
            }), t3.forEach(function (t4, o3) {
              var n3 = t4.length === i2.globals.dataPoints,
                l3 = e2.graphics.group().attr({
                  class: "apexcharts-series",
                  "data:longestSeries": n3,
                  seriesName: m.escapeString(i2.globals.seriesNames[o3]),
                  rel: o3 + 1,
                  "data:realIndex": o3
                });
              e2.dataRadiusOfPercent[o3] = [], e2.dataRadius[o3] = [], e2.angleArr[o3] = [], t4.forEach(function (t5, i3) {
                var a3 = Math.abs(e2.maxValue - e2.minValue);
                t5 -= e2.minValue, e2.isLog && (t5 = e2.coreUtils.getLogVal(e2.logBase, t5, 0)), e2.dataRadiusOfPercent[o3][i3] = t5 / a3, e2.dataRadius[o3][i3] = e2.dataRadiusOfPercent[o3][i3] * e2.size, e2.angleArr[o3][i3] = i3 * e2.disAngle;
              }), d2 = e2.getDataPointsPos(e2.dataRadius[o3], e2.angleArr[o3]);
              var h3 = e2.createPaths(d2, {
                x: 0,
                y: 0
              });
              u2 = e2.graphics.group({
                class: "apexcharts-series-markers-wrap apexcharts-element-hidden"
              }), f2 = e2.graphics.group({
                class: "apexcharts-datalabels",
                "data:realIndex": o3
              }), i2.globals.delayedElements.push({
                el: u2.node,
                index: o3
              });
              var c3 = {
                  i: o3,
                  realIndex: o3,
                  animationDelay: o3,
                  initialSpeed: i2.config.chart.animations.speed,
                  dataChangeSpeed: i2.config.chart.animations.dynamicAnimation.speed,
                  className: "apexcharts-radar",
                  shouldClipToGrid: false,
                  bindEventsOnPaths: false,
                  stroke: i2.globals.stroke.colors[o3],
                  strokeLineCap: i2.config.stroke.lineCap
                },
                p3 = null;
              i2.globals.previousPaths.length > 0 && (p3 = e2.getPreviousPath(o3));
              for (var x2 = 0; x2 < h3.linePathsTo.length; x2++) {
                var b2 = e2.graphics.renderPaths(g(g({}, c3), {}, {
                  pathFrom: null === p3 ? h3.linePathsFrom[x2] : p3,
                  pathTo: h3.linePathsTo[x2],
                  strokeWidth: Array.isArray(e2.strokeWidth) ? e2.strokeWidth[o3] : e2.strokeWidth,
                  fill: "none",
                  drawShadow: false
                }));
                l3.add(b2);
                var v2 = a2.fillPath({
                    seriesNumber: o3
                  }),
                  y2 = e2.graphics.renderPaths(g(g({}, c3), {}, {
                    pathFrom: null === p3 ? h3.areaPathsFrom[x2] : p3,
                    pathTo: h3.areaPathsTo[x2],
                    strokeWidth: 0,
                    fill: v2,
                    drawShadow: false
                  }));
                if (i2.config.chart.dropShadow.enabled) {
                  var k2 = new w(e2.ctx),
                    A2 = i2.config.chart.dropShadow;
                  k2.dropShadow(y2, Object.assign({}, A2, {
                    noUserSpaceOnUse: true
                  }), o3);
                }
                l3.add(y2);
              }
              t4.forEach(function (t5, a3) {
                var s3 = new W(e2.ctx).getMarkerConfig({
                    cssClass: "apexcharts-marker",
                    seriesIndex: o3,
                    dataPointIndex: a3
                  }),
                  n4 = e2.graphics.drawMarker(d2[a3].x, d2[a3].y, s3);
                n4.attr("rel", a3), n4.attr("j", a3), n4.attr("index", o3), n4.node.setAttribute("default-marker-size", s3.pSize);
                var h4 = e2.graphics.group({
                  class: "apexcharts-series-markers"
                });
                h4 && h4.add(n4), u2.add(h4), l3.add(u2);
                var c4 = i2.config.dataLabels;
                if (c4.enabled) {
                  var p4 = c4.formatter(i2.globals.series[o3][a3], {
                    seriesIndex: o3,
                    dataPointIndex: a3,
                    w: i2
                  });
                  r2.plotDataLabelsText({
                    x: d2[a3].x,
                    y: d2[a3].y,
                    text: p4,
                    textAnchor: "middle",
                    i: o3,
                    j: o3,
                    parent: f2,
                    offsetCorrection: false,
                    dataLabelsConfig: g({}, c4)
                  });
                }
                l3.add(f2);
              }), s2.push(l3);
            }), this.drawPolygons({
              parent: c2
            }), i2.config.xaxis.labels.show) {
              var p2 = this.drawXAxisTexts();
              c2.add(p2);
            }
            return s2.forEach(function (t4) {
              c2.add(t4);
            }), c2.add(this.yaxisLabels), c2;
          }
        }, {
          key: "drawPolygons",
          value: function (t3) {
            for (var e2 = this, i2 = this.w, a2 = t3.parent, s2 = new It(this.ctx), r2 = i2.globals.yAxisScale[0].result.reverse(), o2 = r2.length, n2 = [], l2 = this.size / (o2 - 1), h2 = 0; h2 < o2; h2++) n2[h2] = l2 * h2;
            n2.reverse();
            var c2 = [],
              d2 = [];
            n2.forEach(function (t4, i3) {
              var a3 = m.getPolygonPos(t4, e2.dataPointsLen),
                s3 = "";
              a3.forEach(function (t5, a4) {
                if (0 === i3) {
                  var r3 = e2.graphics.drawLine(t5.x, t5.y, 0, 0, Array.isArray(e2.polygons.connectorColors) ? e2.polygons.connectorColors[a4] : e2.polygons.connectorColors);
                  d2.push(r3);
                }
                0 === a4 && e2.yaxisLabelsTextsPos.push({
                  x: t5.x,
                  y: t5.y
                }), s3 += t5.x + "," + t5.y + " ";
              }), c2.push(s3);
            }), c2.forEach(function (t4, s3) {
              var r3 = e2.polygons.strokeColors,
                o3 = e2.polygons.strokeWidth,
                n3 = e2.graphics.drawPolygon(t4, Array.isArray(r3) ? r3[s3] : r3, Array.isArray(o3) ? o3[s3] : o3, i2.globals.radarPolygons.fill.colors[s3]);
              a2.add(n3);
            }), d2.forEach(function (t4) {
              a2.add(t4);
            }), i2.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t4, i3) {
              var a3 = s2.drawYAxisTexts(t4.x, t4.y, i3, r2[i3]);
              e2.yaxisLabels.add(a3);
            });
          }
        }, {
          key: "drawXAxisTexts",
          value: function () {
            var t3 = this,
              e2 = this.w,
              i2 = e2.config.xaxis.labels,
              a2 = this.graphics.group({
                class: "apexcharts-xaxis"
              }),
              s2 = m.getPolygonPos(this.size, this.dataPointsLen);
            return e2.globals.labels.forEach(function (r2, o2) {
              var n2 = e2.config.xaxis.labels.formatter,
                l2 = new G(t3.ctx);
              if (s2[o2]) {
                var h2 = t3.getTextPos(s2[o2], t3.size),
                  c2 = n2(r2, {
                    seriesIndex: -1,
                    dataPointIndex: o2,
                    w: e2
                  });
                l2.plotDataLabelsText({
                  x: h2.newX,
                  y: h2.newY,
                  text: c2,
                  textAnchor: h2.textAnchor,
                  i: o2,
                  j: o2,
                  parent: a2,
                  className: "apexcharts-xaxis-label",
                  color: Array.isArray(i2.style.colors) && i2.style.colors[o2] ? i2.style.colors[o2] : "#a8a8a8",
                  dataLabelsConfig: g({
                    textAnchor: h2.textAnchor,
                    dropShadow: {
                      enabled: false
                    }
                  }, i2),
                  offsetCorrection: false
                }).on("click", function (i3) {
                  if ("function" == typeof e2.config.chart.events.xAxisLabelClick) {
                    var a3 = Object.assign({}, e2, {
                      labelIndex: o2
                    });
                    e2.config.chart.events.xAxisLabelClick(i3, t3.ctx, a3);
                  }
                });
              }
            }), a2;
          }
        }, {
          key: "createPaths",
          value: function (t3, e2) {
            var i2 = this,
              a2 = [],
              s2 = [],
              r2 = [],
              o2 = [];
            if (t3.length) {
              s2 = [this.graphics.move(e2.x, e2.y)], o2 = [this.graphics.move(e2.x, e2.y)];
              var n2 = this.graphics.move(t3[0].x, t3[0].y),
                l2 = this.graphics.move(t3[0].x, t3[0].y);
              t3.forEach(function (e3, a3) {
                n2 += i2.graphics.line(e3.x, e3.y), l2 += i2.graphics.line(e3.x, e3.y), a3 === t3.length - 1 && (n2 += "Z", l2 += "Z");
              }), a2.push(n2), r2.push(l2);
            }
            return {
              linePathsFrom: s2,
              linePathsTo: a2,
              areaPathsFrom: o2,
              areaPathsTo: r2
            };
          }
        }, {
          key: "getTextPos",
          value: function (t3, e2) {
            var i2 = "middle",
              a2 = t3.x,
              s2 = t3.y;
            return Math.abs(t3.x) >= 10 ? t3.x > 0 ? (i2 = "start", a2 += 10) : t3.x < 0 && (i2 = "end", a2 -= 10) : i2 = "middle", Math.abs(t3.y) >= e2 - 10 && (t3.y < 0 ? s2 -= 10 : t3.y > 0 && (s2 += 10)), {
              textAnchor: i2,
              newX: a2,
              newY: s2
            };
          }
        }, {
          key: "getPreviousPath",
          value: function (t3) {
            for (var e2 = this.w, i2 = null, a2 = 0; a2 < e2.globals.previousPaths.length; a2++) {
              var s2 = e2.globals.previousPaths[a2];
              s2.paths.length > 0 && parseInt(s2.realIndex, 10) === parseInt(t3, 10) && void 0 !== e2.globals.previousPaths[a2].paths[0] && (i2 = e2.globals.previousPaths[a2].paths[0].d);
            }
            return i2;
          }
        }, {
          key: "getDataPointsPos",
          value: function (t3, e2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
            t3 = t3 || [], e2 = e2 || [];
            for (var a2 = [], s2 = 0; s2 < i2; s2++) {
              var r2 = {};
              r2.x = t3[s2] * Math.sin(e2[s2]), r2.y = -t3[s2] * Math.cos(e2[s2]), a2.push(r2);
            }
            return a2;
          }
        }]), t2;
      }(),
      Xt = function (t2) {
        h(r2, Tt);
        var a2 = o(r2);
        function r2(t3) {
          var s2;
          i(this, r2), (s2 = a2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.animBeginArr = [0], s2.animDur = 0;
          var o2 = s2.w;
          return s2.startAngle = o2.config.plotOptions.radialBar.startAngle, s2.endAngle = o2.config.plotOptions.radialBar.endAngle, s2.totalAngle = Math.abs(o2.config.plotOptions.radialBar.endAngle - o2.config.plotOptions.radialBar.startAngle), s2.trackStartAngle = o2.config.plotOptions.radialBar.track.startAngle, s2.trackEndAngle = o2.config.plotOptions.radialBar.track.endAngle, s2.barLabels = s2.w.config.plotOptions.radialBar.barLabels, s2.donutDataLabels = s2.w.config.plotOptions.radialBar.dataLabels, s2.radialDataLabels = s2.donutDataLabels, s2.trackStartAngle || (s2.trackStartAngle = s2.startAngle), s2.trackEndAngle || (s2.trackEndAngle = s2.endAngle), 360 === s2.endAngle && (s2.endAngle = 359.99), s2.margin = parseInt(o2.config.plotOptions.radialBar.track.margin, 10), s2.onBarLabelClick = s2.onBarLabelClick.bind(e(s2)), s2;
        }
        return s(r2, [{
          key: "draw",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a3 = i2.group({
                class: "apexcharts-radialbar"
              });
            if (e2.globals.noData) return a3;
            var s2 = i2.group(),
              r3 = this.defaultSize / 2,
              o2 = e2.globals.gridWidth / 2,
              n2 = this.defaultSize / 2.05;
            e2.config.chart.sparkline.enabled || (n2 = n2 - e2.config.stroke.width - e2.config.chart.dropShadow.blur);
            var l2 = e2.globals.fill.colors;
            if (e2.config.plotOptions.radialBar.track.show) {
              var h2 = this.drawTracks({
                size: n2,
                centerX: o2,
                centerY: r3,
                colorArr: l2,
                series: t3
              });
              s2.add(h2);
            }
            var c2 = this.drawArcs({
                size: n2,
                centerX: o2,
                centerY: r3,
                colorArr: l2,
                series: t3
              }),
              d2 = 360;
            e2.config.plotOptions.radialBar.startAngle < 0 && (d2 = this.totalAngle);
            var g2 = (360 - d2) / 360;
            if (e2.globals.radialSize = n2 - n2 * g2, this.radialDataLabels.value.show) {
              var u2 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
              e2.globals.radialSize += u2 * g2;
            }
            return s2.add(c2.g), "front" === e2.config.plotOptions.radialBar.hollow.position && (c2.g.add(c2.elHollow), c2.dataLabels && c2.g.add(c2.dataLabels)), a3.add(s2), a3;
          }
        }, {
          key: "drawTracks",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a3 = i2.group({
                class: "apexcharts-tracks"
              }),
              s2 = new w(this.ctx),
              r3 = new N(this.ctx),
              o2 = this.getStrokeWidth(t3);
            t3.size = t3.size - o2 / 2;
            for (var n2 = 0; n2 < t3.series.length; n2++) {
              var l2 = i2.group({
                class: "apexcharts-radialbar-track apexcharts-track"
              });
              a3.add(l2), l2.attr({
                rel: n2 + 1
              }), t3.size = t3.size - o2 - this.margin;
              var h2 = e2.config.plotOptions.radialBar.track,
                c2 = r3.fillPath({
                  seriesNumber: 0,
                  size: t3.size,
                  fillColors: Array.isArray(h2.background) ? h2.background[n2] : h2.background,
                  solid: true
                }),
                d2 = this.trackStartAngle,
                g2 = this.trackEndAngle;
              Math.abs(g2) + Math.abs(d2) >= 360 && (g2 = 360 - Math.abs(this.startAngle) - 0.1);
              var u2 = i2.drawPath({
                d: "",
                stroke: c2,
                strokeWidth: o2 * parseInt(h2.strokeWidth, 10) / 100,
                fill: "none",
                strokeOpacity: h2.opacity,
                classes: "apexcharts-radialbar-area"
              });
              if (h2.dropShadow.enabled) {
                var f2 = h2.dropShadow;
                s2.dropShadow(u2, f2);
              }
              l2.add(u2), u2.attr("id", "apexcharts-radialbarTrack-" + n2), this.animatePaths(u2, {
                centerX: t3.centerX,
                centerY: t3.centerY,
                endAngle: g2,
                startAngle: d2,
                size: t3.size,
                i: n2,
                totalItems: 2,
                animBeginArr: 0,
                dur: 0,
                isTrack: true,
                easing: e2.globals.easing
              });
            }
            return a3;
          }
        }, {
          key: "drawArcs",
          value: function (t3) {
            var e2 = this.w,
              i2 = new k(this.ctx),
              a3 = new N(this.ctx),
              s2 = new w(this.ctx),
              r3 = i2.group(),
              o2 = this.getStrokeWidth(t3);
            t3.size = t3.size - o2 / 2;
            var n2 = e2.config.plotOptions.radialBar.hollow.background,
              l2 = t3.size - o2 * t3.series.length - this.margin * t3.series.length - o2 * parseInt(e2.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2,
              h2 = l2 - e2.config.plotOptions.radialBar.hollow.margin;
            void 0 !== e2.config.plotOptions.radialBar.hollow.image && (n2 = this.drawHollowImage(t3, r3, l2, n2));
            var c2 = this.drawHollow({
              size: h2,
              centerX: t3.centerX,
              centerY: t3.centerY,
              fill: n2 || "transparent"
            });
            if (e2.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
              var d2 = e2.config.plotOptions.radialBar.hollow.dropShadow;
              s2.dropShadow(c2, d2);
            }
            var g2 = 1;
            !this.radialDataLabels.total.show && e2.globals.series.length > 1 && (g2 = 0);
            var u2 = null;
            if (this.radialDataLabels.show) {
              var f2 = e2.globals.dom.Paper.select(".apexcharts-datalabels-group").members[0];
              u2 = this.renderInnerDataLabels(f2, this.radialDataLabels, {
                hollowSize: l2,
                centerX: t3.centerX,
                centerY: t3.centerY,
                opacity: g2
              });
            }
            "back" === e2.config.plotOptions.radialBar.hollow.position && (r3.add(c2), u2 && r3.add(u2));
            var p2 = false;
            e2.config.plotOptions.radialBar.inverseOrder && (p2 = true);
            for (var x2 = p2 ? t3.series.length - 1 : 0; p2 ? x2 >= 0 : x2 < t3.series.length; p2 ? x2-- : x2++) {
              var b2 = i2.group({
                class: "apexcharts-series apexcharts-radial-series",
                seriesName: m.escapeString(e2.globals.seriesNames[x2])
              });
              r3.add(b2), b2.attr({
                rel: x2 + 1,
                "data:realIndex": x2
              }), this.ctx.series.addCollapsedClassToSeries(b2, x2), t3.size = t3.size - o2 - this.margin;
              var v2 = a3.fillPath({
                  seriesNumber: x2,
                  size: t3.size,
                  value: t3.series[x2]
                }),
                y2 = this.startAngle,
                A2 = void 0,
                S2 = m.negToZero(t3.series[x2] > 100 ? 100 : t3.series[x2]) / 100,
                C2 = Math.round(this.totalAngle * S2) + this.startAngle,
                L2 = void 0;
              e2.globals.dataChanged && (A2 = this.startAngle, L2 = Math.round(this.totalAngle * m.negToZero(e2.globals.previousPaths[x2]) / 100) + A2), Math.abs(C2) + Math.abs(y2) > 360 && (C2 -= 0.01), Math.abs(L2) + Math.abs(A2) > 360 && (L2 -= 0.01);
              var P2 = C2 - y2,
                M2 = Array.isArray(e2.config.stroke.dashArray) ? e2.config.stroke.dashArray[x2] : e2.config.stroke.dashArray,
                I2 = i2.drawPath({
                  d: "",
                  stroke: v2,
                  strokeWidth: o2,
                  fill: "none",
                  fillOpacity: e2.config.fill.opacity,
                  classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + x2,
                  strokeDashArray: M2
                });
              if (k.setAttrs(I2.node, {
                "data:angle": P2,
                "data:value": t3.series[x2]
              }), e2.config.chart.dropShadow.enabled) {
                var T2 = e2.config.chart.dropShadow;
                s2.dropShadow(I2, T2, x2);
              }
              if (s2.setSelectionFilter(I2, 0, x2), this.addListeners(I2, this.radialDataLabels), b2.add(I2), I2.attr({
                index: 0,
                j: x2
              }), this.barLabels.enabled) {
                var z2 = m.polarToCartesian(t3.centerX, t3.centerY, t3.size, y2),
                  X2 = this.barLabels.formatter(e2.globals.seriesNames[x2], {
                    seriesIndex: x2,
                    w: e2
                  }),
                  E2 = ["apexcharts-radialbar-label"];
                this.barLabels.onClick || E2.push("apexcharts-no-click");
                var Y2 = this.barLabels.useSeriesColors ? e2.globals.colors[x2] : e2.config.chart.foreColor;
                Y2 || (Y2 = e2.config.chart.foreColor);
                var R2 = z2.x + this.barLabels.offsetX,
                  F2 = z2.y + this.barLabels.offsetY,
                  D2 = i2.drawText({
                    x: R2,
                    y: F2,
                    text: X2,
                    textAnchor: "end",
                    dominantBaseline: "middle",
                    fontFamily: this.barLabels.fontFamily,
                    fontWeight: this.barLabels.fontWeight,
                    fontSize: this.barLabels.fontSize,
                    foreColor: Y2,
                    cssClass: E2.join(" ")
                  });
                D2.on("click", this.onBarLabelClick), D2.attr({
                  rel: x2 + 1
                }), 0 !== y2 && D2.attr({
                  "transform-origin": "".concat(R2, " ").concat(F2),
                  transform: "rotate(".concat(y2, " 0 0)")
                }), b2.add(D2);
              }
              var H2 = 0;
              !this.initialAnim || e2.globals.resized || e2.globals.dataChanged || (H2 = e2.config.chart.animations.speed), e2.globals.dataChanged && (H2 = e2.config.chart.animations.dynamicAnimation.speed), this.animDur = H2 / (1.2 * t3.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(I2, {
                centerX: t3.centerX,
                centerY: t3.centerY,
                endAngle: C2,
                startAngle: y2,
                prevEndAngle: L2,
                prevStartAngle: A2,
                size: t3.size,
                i: x2,
                totalItems: 2,
                animBeginArr: this.animBeginArr,
                dur: H2,
                shouldSetPrevPaths: true,
                easing: e2.globals.easing
              });
            }
            return {
              g: r3,
              elHollow: c2,
              dataLabels: u2
            };
          }
        }, {
          key: "drawHollow",
          value: function (t3) {
            var e2 = new k(this.ctx).drawCircle(2 * t3.size);
            return e2.attr({
              class: "apexcharts-radialbar-hollow",
              cx: t3.centerX,
              cy: t3.centerY,
              r: t3.size,
              fill: t3.fill
            }), e2;
          }
        }, {
          key: "drawHollowImage",
          value: function (t3, e2, i2, a3) {
            var s2 = this.w,
              r3 = new N(this.ctx),
              o2 = m.randomId(),
              n2 = s2.config.plotOptions.radialBar.hollow.image;
            if (s2.config.plotOptions.radialBar.hollow.imageClipped) r3.clippedImgArea({
              width: i2,
              height: i2,
              image: n2,
              patternID: "pattern".concat(s2.globals.cuid).concat(o2)
            }), a3 = "url(#pattern".concat(s2.globals.cuid).concat(o2, ")");else {
              var l2 = s2.config.plotOptions.radialBar.hollow.imageWidth,
                h2 = s2.config.plotOptions.radialBar.hollow.imageHeight;
              if (void 0 === l2 && void 0 === h2) {
                var c2 = s2.globals.dom.Paper.image(n2).loaded(function (e3) {
                  this.move(t3.centerX - e3.width / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - e3.height / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY);
                });
                e2.add(c2);
              } else {
                var d2 = s2.globals.dom.Paper.image(n2).loaded(function (e3) {
                  this.move(t3.centerX - l2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - h2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l2, h2);
                });
                e2.add(d2);
              }
            }
            return a3;
          }
        }, {
          key: "getStrokeWidth",
          value: function (t3) {
            var e2 = this.w;
            return t3.size * (100 - parseInt(e2.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t3.series.length + 1) - this.margin;
          }
        }, {
          key: "onBarLabelClick",
          value: function (t3) {
            var e2 = parseInt(t3.target.getAttribute("rel"), 10) - 1,
              i2 = this.barLabels.onClick,
              a3 = this.w;
            i2 && i2(a3.globals.seriesNames[e2], {
              w: a3,
              seriesIndex: e2
            });
          }
        }]), r2;
      }(),
      Et = function (t2) {
        h(a2, St);
        var e2 = o(a2);
        function a2() {
          return i(this, a2), e2.apply(this, arguments);
        }
        return s(a2, [{
          key: "draw",
          value: function (t3, e3) {
            var i2 = this.w,
              a3 = new k(this.ctx);
            this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t3, this.seriesRangeStart = i2.globals.seriesRangeStart, this.seriesRangeEnd = i2.globals.seriesRangeEnd, this.barHelpers.initVariables(t3);
            for (var s2 = a3.group({
                class: "apexcharts-rangebar-series apexcharts-plot-series"
              }), r2 = 0; r2 < t3.length; r2++) {
              var o2,
                n2,
                l2,
                h2,
                c2 = void 0,
                d2 = void 0,
                u2 = i2.globals.comboCharts ? e3[r2] : r2,
                f2 = this.barHelpers.getGroupIndex(u2).columnGroupIndex,
                p2 = a3.group({
                  class: "apexcharts-series",
                  seriesName: m.escapeString(i2.globals.seriesNames[u2]),
                  rel: r2 + 1,
                  "data:realIndex": u2
                });
              this.ctx.series.addCollapsedClassToSeries(p2, u2), t3[r2].length > 0 && (this.visibleI = this.visibleI + 1);
              var x2 = 0,
                b2 = 0,
                v2 = 0;
              this.yRatio.length > 1 && (this.yaxisIndex = i2.globals.seriesYAxisReverseMap[u2][0], v2 = u2);
              var y2 = this.barHelpers.initialPositions();
              d2 = y2.y, h2 = y2.zeroW, c2 = y2.x, b2 = y2.barWidth, x2 = y2.barHeight, o2 = y2.xDivision, n2 = y2.yDivision, l2 = y2.zeroH;
              for (var w2 = a3.group({
                  class: "apexcharts-datalabels",
                  "data:realIndex": u2
                }), A2 = a3.group({
                  class: "apexcharts-rangebar-goals-markers"
                }), S2 = 0; S2 < i2.globals.dataPoints; S2++) {
                var C2 = this.barHelpers.getStrokeWidth(r2, S2, u2),
                  L2 = this.seriesRangeStart[r2][S2],
                  P2 = this.seriesRangeEnd[r2][S2],
                  M2 = null,
                  I2 = null,
                  T2 = null,
                  z2 = {
                    x: c2,
                    y: d2,
                    strokeWidth: C2,
                    elSeries: p2
                  },
                  X2 = this.seriesLen;
                if (i2.config.plotOptions.bar.rangeBarGroupRows && (X2 = 1), void 0 === i2.config.series[r2].data[S2]) break;
                if (this.isHorizontal) {
                  T2 = d2 + x2 * this.visibleI;
                  var E2 = (n2 - x2 * X2) / 2;
                  if (i2.config.series[r2].data[S2].x) {
                    var Y2 = this.detectOverlappingBars({
                      i: r2,
                      j: S2,
                      barYPosition: T2,
                      srty: E2,
                      barHeight: x2,
                      yDivision: n2,
                      initPositions: y2
                    });
                    x2 = Y2.barHeight, T2 = Y2.barYPosition;
                  }
                  b2 = (M2 = this.drawRangeBarPaths(g({
                    indexes: {
                      i: r2,
                      j: S2,
                      realIndex: u2
                    },
                    barHeight: x2,
                    barYPosition: T2,
                    zeroW: h2,
                    yDivision: n2,
                    y1: L2,
                    y2: P2
                  }, z2))).barWidth;
                } else {
                  i2.globals.isXNumeric && (c2 = (i2.globals.seriesX[r2][S2] - i2.globals.minX) / this.xRatio - b2 / 2), I2 = c2 + b2 * this.visibleI;
                  var R2 = (o2 - b2 * X2) / 2;
                  if (i2.config.series[r2].data[S2].x) {
                    var F2 = this.detectOverlappingBars({
                      i: r2,
                      j: S2,
                      barXPosition: I2,
                      srtx: R2,
                      barWidth: b2,
                      xDivision: o2,
                      initPositions: y2
                    });
                    b2 = F2.barWidth, I2 = F2.barXPosition;
                  }
                  x2 = (M2 = this.drawRangeColumnPaths(g({
                    indexes: {
                      i: r2,
                      j: S2,
                      realIndex: u2,
                      translationsIndex: v2
                    },
                    barWidth: b2,
                    barXPosition: I2,
                    zeroH: l2,
                    xDivision: o2
                  }, z2))).barHeight;
                }
                var D2 = this.barHelpers.drawGoalLine({
                  barXPosition: M2.barXPosition,
                  barYPosition: T2,
                  goalX: M2.goalX,
                  goalY: M2.goalY,
                  barHeight: x2,
                  barWidth: b2
                });
                D2 && A2.add(D2), d2 = M2.y, c2 = M2.x;
                var H2 = this.barHelpers.getPathFillColor(t3, r2, S2, u2),
                  O2 = i2.globals.stroke.colors[u2];
                this.renderSeries({
                  realIndex: u2,
                  pathFill: H2,
                  lineFill: O2,
                  j: S2,
                  i: r2,
                  x: c2,
                  y: d2,
                  y1: L2,
                  y2: P2,
                  pathFrom: M2.pathFrom,
                  pathTo: M2.pathTo,
                  strokeWidth: C2,
                  elSeries: p2,
                  series: t3,
                  barHeight: x2,
                  barWidth: b2,
                  barXPosition: I2,
                  barYPosition: T2,
                  columnGroupIndex: f2,
                  elDataLabelsWrap: w2,
                  elGoalsMarkers: A2,
                  visibleSeries: this.visibleI,
                  type: "rangebar"
                });
              }
              s2.add(p2);
            }
            return s2;
          }
        }, {
          key: "detectOverlappingBars",
          value: function (t3) {
            var e3 = t3.i,
              i2 = t3.j,
              a3 = t3.barYPosition,
              s2 = t3.barXPosition,
              r2 = t3.srty,
              o2 = t3.srtx,
              n2 = t3.barHeight,
              l2 = t3.barWidth,
              h2 = t3.yDivision,
              c2 = t3.xDivision,
              d2 = t3.initPositions,
              g2 = this.w,
              u2 = [],
              f2 = g2.config.series[e3].data[i2].rangeName,
              p2 = g2.config.series[e3].data[i2].x,
              x2 = Array.isArray(p2) ? p2.join(" ") : p2,
              b2 = g2.globals.labels.map(function (t4) {
                return Array.isArray(t4) ? t4.join(" ") : t4;
              }).indexOf(x2),
              v2 = g2.globals.seriesRange[e3].findIndex(function (t4) {
                return t4.x === x2 && t4.overlaps.length > 0;
              });
            return this.isHorizontal ? (a3 = g2.config.plotOptions.bar.rangeBarGroupRows ? r2 + h2 * b2 : r2 + n2 * this.visibleI + h2 * b2, v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e3][v2].overlaps).indexOf(f2) > -1 && (a3 = (n2 = d2.barHeight / u2.length) * this.visibleI + h2 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n2 * (this.visibleI + u2.indexOf(f2)) + h2 * b2)) : (b2 > -1 && !g2.globals.timescaleLabels.length && (s2 = g2.config.plotOptions.bar.rangeBarGroupRows ? o2 + c2 * b2 : o2 + l2 * this.visibleI + c2 * b2), v2 > -1 && !g2.config.plotOptions.bar.rangeBarOverlap && (u2 = g2.globals.seriesRange[e3][v2].overlaps).indexOf(f2) > -1 && (s2 = (l2 = d2.barWidth / u2.length) * this.visibleI + c2 * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l2 * (this.visibleI + u2.indexOf(f2)) + c2 * b2)), {
              barYPosition: a3,
              barXPosition: s2,
              barHeight: n2,
              barWidth: l2
            };
          }
        }, {
          key: "drawRangeColumnPaths",
          value: function (t3) {
            var e3 = t3.indexes,
              i2 = t3.x,
              a3 = t3.xDivision,
              s2 = t3.barWidth,
              r2 = t3.barXPosition,
              o2 = t3.zeroH,
              n2 = this.w,
              l2 = e3.i,
              h2 = e3.j,
              c2 = e3.realIndex,
              d2 = e3.translationsIndex,
              g2 = this.yRatio[d2],
              u2 = this.getRangeValue(c2, h2),
              f2 = Math.min(u2.start, u2.end),
              p2 = Math.max(u2.start, u2.end);
            void 0 === this.series[l2][h2] || null === this.series[l2][h2] ? f2 = o2 : (f2 = o2 - f2 / g2, p2 = o2 - p2 / g2);
            var x2 = Math.abs(p2 - f2),
              b2 = this.barHelpers.getColumnPaths({
                barXPosition: r2,
                barWidth: s2,
                y1: f2,
                y2: p2,
                strokeWidth: this.strokeWidth,
                series: this.seriesRangeEnd,
                realIndex: c2,
                i: c2,
                j: h2,
                w: n2
              });
            if (n2.globals.isXNumeric) {
              var v2 = this.getBarXForNumericXAxis({
                x: i2,
                j: h2,
                realIndex: c2,
                barWidth: s2
              });
              i2 = v2.x, r2 = v2.barXPosition;
            } else i2 += a3;
            return {
              pathTo: b2.pathTo,
              pathFrom: b2.pathFrom,
              barHeight: x2,
              x: i2,
              y: u2.start < 0 && u2.end < 0 ? f2 : p2,
              goalY: this.barHelpers.getGoalValues("y", null, o2, l2, h2, d2),
              barXPosition: r2
            };
          }
        }, {
          key: "preventBarOverflow",
          value: function (t3) {
            var e3 = this.w;
            return t3 < 0 && (t3 = 0), t3 > e3.globals.gridWidth && (t3 = e3.globals.gridWidth), t3;
          }
        }, {
          key: "drawRangeBarPaths",
          value: function (t3) {
            var e3 = t3.indexes,
              i2 = t3.y,
              a3 = t3.y1,
              s2 = t3.y2,
              r2 = t3.yDivision,
              o2 = t3.barHeight,
              n2 = t3.barYPosition,
              l2 = t3.zeroW,
              h2 = this.w,
              c2 = e3.realIndex,
              d2 = e3.j,
              g2 = this.preventBarOverflow(l2 + a3 / this.invertedYRatio),
              u2 = this.preventBarOverflow(l2 + s2 / this.invertedYRatio),
              f2 = this.getRangeValue(c2, d2),
              p2 = Math.abs(u2 - g2),
              x2 = this.barHelpers.getBarpaths({
                barYPosition: n2,
                barHeight: o2,
                x1: g2,
                x2: u2,
                strokeWidth: this.strokeWidth,
                series: this.seriesRangeEnd,
                i: c2,
                realIndex: c2,
                j: d2,
                w: h2
              });
            return h2.globals.isXNumeric || (i2 += r2), {
              pathTo: x2.pathTo,
              pathFrom: x2.pathFrom,
              barWidth: p2,
              x: f2.start < 0 && f2.end < 0 ? g2 : u2,
              goalX: this.barHelpers.getGoalValues("x", l2, null, c2, d2),
              y: i2
            };
          }
        }, {
          key: "getRangeValue",
          value: function (t3, e3) {
            var i2 = this.w;
            return {
              start: i2.globals.seriesRangeStart[t3][e3],
              end: i2.globals.seriesRangeEnd[t3][e3]
            };
          }
        }]), a2;
      }(),
      Yt = function () {
        function t2(e2) {
          i(this, t2), this.w = e2.w, this.lineCtx = e2;
        }
        return s(t2, [{
          key: "sameValueSeriesFix",
          value: function (t3, e2) {
            var i2 = this.w;
            if (("gradient" === i2.config.fill.type || "gradient" === i2.config.fill.type[t3]) && new A(this.lineCtx.ctx, i2).seriesHaveSameValues(t3)) {
              var a2 = e2[t3].slice();
              a2[a2.length - 1] = a2[a2.length - 1] + 1e-6, e2[t3] = a2;
            }
            return e2;
          }
        }, {
          key: "calculatePoints",
          value: function (t3) {
            var e2 = t3.series,
              i2 = t3.realIndex,
              a2 = t3.x,
              s2 = t3.y,
              r2 = t3.i,
              o2 = t3.j,
              n2 = t3.prevY,
              l2 = this.w,
              h2 = [],
              c2 = [];
            if (0 === o2) {
              var d2 = this.lineCtx.categoryAxisCorrection + l2.config.markers.offsetX;
              l2.globals.isXNumeric && (d2 = (l2.globals.seriesX[i2][0] - l2.globals.minX) / this.lineCtx.xRatio + l2.config.markers.offsetX), h2.push(d2), c2.push(m.isNumber(e2[r2][0]) ? n2 + l2.config.markers.offsetY : null), h2.push(a2 + l2.config.markers.offsetX), c2.push(m.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
            } else h2.push(a2 + l2.config.markers.offsetX), c2.push(m.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
            return {
              x: h2,
              y: c2
            };
          }
        }, {
          key: "checkPreviousPaths",
          value: function (t3) {
            for (var e2 = t3.pathFromLine, i2 = t3.pathFromArea, a2 = t3.realIndex, s2 = this.w, r2 = 0; r2 < s2.globals.previousPaths.length; r2++) {
              var o2 = s2.globals.previousPaths[r2];
              ("line" === o2.type || "area" === o2.type) && o2.paths.length > 0 && parseInt(o2.realIndex, 10) === parseInt(a2, 10) && ("line" === o2.type ? (this.lineCtx.appendPathFrom = false, e2 = s2.globals.previousPaths[r2].paths[0].d) : "area" === o2.type && (this.lineCtx.appendPathFrom = false, i2 = s2.globals.previousPaths[r2].paths[0].d, s2.config.stroke.show && s2.globals.previousPaths[r2].paths[1] && (e2 = s2.globals.previousPaths[r2].paths[1].d)));
            }
            return {
              pathFromLine: e2,
              pathFromArea: i2
            };
          }
        }, {
          key: "determineFirstPrevY",
          value: function (t3) {
            var e2,
              i2,
              a2,
              s2 = t3.i,
              r2 = t3.realIndex,
              o2 = t3.series,
              n2 = t3.prevY,
              l2 = t3.lineYPosition,
              h2 = t3.translationsIndex,
              c2 = this.w,
              d2 = c2.config.chart.stacked && !c2.globals.comboCharts || c2.config.chart.stacked && c2.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e2 = this.w.config.series[r2]) || void 0 === e2 ? void 0 : e2.type) || "column" === (null === (i2 = this.w.config.series[r2]) || void 0 === i2 ? void 0 : i2.type));
            if (void 0 !== (null === (a2 = o2[s2]) || void 0 === a2 ? void 0 : a2[0])) n2 = (l2 = d2 && s2 > 0 ? this.lineCtx.prevSeriesY[s2 - 1][0] : this.lineCtx.zeroY) - o2[s2][0] / this.lineCtx.yRatio[h2] + 2 * (this.lineCtx.isReversed ? o2[s2][0] / this.lineCtx.yRatio[h2] : 0);else if (d2 && s2 > 0 && void 0 === o2[s2][0]) {
              for (var g2 = s2 - 1; g2 >= 0; g2--) if (null !== o2[g2][0] && void 0 !== o2[g2][0]) {
                n2 = l2 = this.lineCtx.prevSeriesY[g2][0];
                break;
              }
            }
            return {
              prevY: n2,
              lineYPosition: l2
            };
          }
        }]), t2;
      }(),
      Rt = function (t2) {
        for (var e2, i2, a2, s2, r2 = function (t3) {
            for (var e3 = [], i3 = t3[0], a3 = t3[1], s3 = e3[0] = Ht(i3, a3), r3 = 1, o3 = t3.length - 1; r3 < o3; r3++) i3 = a3, a3 = t3[r3 + 1], e3[r3] = 0.5 * (s3 + (s3 = Ht(i3, a3)));
            return e3[r3] = s3, e3;
          }(t2), o2 = t2.length - 1, n2 = [], l2 = 0; l2 < o2; l2++) a2 = Ht(t2[l2], t2[l2 + 1]), Math.abs(a2) < 1e-6 ? r2[l2] = r2[l2 + 1] = 0 : (s2 = (e2 = r2[l2] / a2) * e2 + (i2 = r2[l2 + 1] / a2) * i2) > 9 && (s2 = 3 * a2 / Math.sqrt(s2), r2[l2] = s2 * e2, r2[l2 + 1] = s2 * i2);
        for (var h2 = 0; h2 <= o2; h2++) s2 = (t2[Math.min(o2, h2 + 1)][0] - t2[Math.max(0, h2 - 1)][0]) / (6 * (1 + r2[h2] * r2[h2])), n2.push([s2 || 0, r2[h2] * s2 || 0]);
        return n2;
      },
      Ft = function (t2) {
        var e2 = Rt(t2),
          i2 = t2[1],
          a2 = t2[0],
          s2 = [],
          r2 = e2[1],
          o2 = e2[0];
        s2.push(a2, [a2[0] + o2[0], a2[1] + o2[1], i2[0] - r2[0], i2[1] - r2[1], i2[0], i2[1]]);
        for (var n2 = 2, l2 = e2.length; n2 < l2; n2++) {
          var h2 = t2[n2],
            c2 = e2[n2];
          s2.push([h2[0] - c2[0], h2[1] - c2[1], h2[0], h2[1]]);
        }
        return s2;
      },
      Dt = function (t2, e2, i2) {
        var a2 = t2.slice(e2, i2);
        if (e2) {
          if (i2 - e2 > 1 && a2[1].length < 6) {
            var s2 = a2[0].length;
            a2[1] = [2 * a2[0][s2 - 2] - a2[0][s2 - 4], 2 * a2[0][s2 - 1] - a2[0][s2 - 3]].concat(a2[1]);
          }
          a2[0] = a2[0].slice(-2);
        }
        return a2;
      };
    function Ht(t2, e2) {
      return (e2[1] - t2[1]) / (e2[0] - t2[0]);
    }
    var Ot = function () {
      function t2(e2, a2, s2) {
        i(this, t2), this.ctx = e2, this.w = e2.w, this.xyRatios = a2, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s2, this.scatter = new B(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Yt(this), this.markers = new W(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
      }
      return s(t2, [{
        key: "draw",
        value: function (t3, e2, i2, a2) {
          var s2,
            r2 = this.w,
            o2 = new k(this.ctx),
            n2 = r2.globals.comboCharts ? e2 : r2.config.chart.type,
            l2 = o2.group({
              class: "apexcharts-".concat(n2, "-series apexcharts-plot-series")
            }),
            h2 = new A(this.ctx, r2);
          this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t3 = h2.getLogSeries(t3), this.yRatio = h2.getLogYRatios(this.yRatio), this.prevSeriesY = [];
          for (var c2 = [], d2 = 0; d2 < t3.length; d2++) {
            t3 = this.lineHelpers.sameValueSeriesFix(d2, t3);
            var u2 = r2.globals.comboCharts ? i2[d2] : d2,
              f2 = this.yRatio.length > 1 ? u2 : 0;
            this._initSerieVariables(t3, d2, u2);
            var p2 = [],
              x2 = [],
              b2 = [],
              v2 = r2.globals.padHorizontal + this.categoryAxisCorrection;
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, u2), r2.globals.isXNumeric && r2.globals.seriesX.length > 0 && (v2 = (r2.globals.seriesX[u2][0] - r2.globals.minX) / this.xRatio), b2.push(v2);
            var m2,
              y2 = v2,
              w2 = void 0,
              S2 = y2,
              C2 = this.zeroY,
              L2 = this.zeroY;
            C2 = this.lineHelpers.determineFirstPrevY({
              i: d2,
              realIndex: u2,
              series: t3,
              prevY: C2,
              lineYPosition: 0,
              translationsIndex: f2
            }).prevY, "monotoneCubic" === r2.config.stroke.curve && null === t3[d2][0] ? p2.push(null) : p2.push(C2), m2 = C2;
            "rangeArea" === n2 && (w2 = L2 = this.lineHelpers.determineFirstPrevY({
              i: d2,
              realIndex: u2,
              series: a2,
              prevY: L2,
              lineYPosition: 0,
              translationsIndex: f2
            }).prevY, x2.push(null !== p2[0] ? L2 : null));
            var P2 = this._calculatePathsFrom({
                type: n2,
                series: t3,
                i: d2,
                realIndex: u2,
                translationsIndex: f2,
                prevX: S2,
                prevY: C2,
                prevY2: L2
              }),
              M2 = [p2[0]],
              I2 = [x2[0]],
              T2 = {
                type: n2,
                series: t3,
                realIndex: u2,
                translationsIndex: f2,
                i: d2,
                x: v2,
                y: 1,
                pX: y2,
                pY: m2,
                pathsFrom: P2,
                linePaths: [],
                areaPaths: [],
                seriesIndex: i2,
                lineYPosition: 0,
                xArrj: b2,
                yArrj: p2,
                y2Arrj: x2,
                seriesRangeEnd: a2
              },
              z2 = this._iterateOverDataPoints(g(g({}, T2), {}, {
                iterations: "rangeArea" === n2 ? t3[d2].length - 1 : void 0,
                isRangeStart: true
              }));
            if ("rangeArea" === n2) {
              for (var X2 = this._calculatePathsFrom({
                  series: a2,
                  i: d2,
                  realIndex: u2,
                  prevX: S2,
                  prevY: L2
                }), E2 = this._iterateOverDataPoints(g(g({}, T2), {}, {
                  series: a2,
                  xArrj: [v2],
                  yArrj: M2,
                  y2Arrj: I2,
                  pY: w2,
                  areaPaths: z2.areaPaths,
                  pathsFrom: X2,
                  iterations: a2[d2].length - 1,
                  isRangeStart: false
                })), Y2 = z2.linePaths.length / 2, R2 = 0; R2 < Y2; R2++) z2.linePaths[R2] = E2.linePaths[R2 + Y2] + z2.linePaths[R2];
              z2.linePaths.splice(Y2), z2.pathFromLine = E2.pathFromLine + z2.pathFromLine;
            } else z2.pathFromArea += "z";
            this._handlePaths({
              type: n2,
              realIndex: u2,
              i: d2,
              paths: z2
            }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c2.push(this.elSeries);
          }
          if (void 0 !== (null === (s2 = r2.config.series[0]) || void 0 === s2 ? void 0 : s2.zIndex) && c2.sort(function (t4, e3) {
            return Number(t4.node.getAttribute("zIndex")) - Number(e3.node.getAttribute("zIndex"));
          }), r2.config.chart.stacked) for (var F2 = c2.length - 1; F2 >= 0; F2--) l2.add(c2[F2]);else for (var D2 = 0; D2 < c2.length; D2++) l2.add(c2[D2]);
          return l2;
        }
      }, {
        key: "_initSerieVariables",
        value: function (t3, e2, i2) {
          var a2 = this.w,
            s2 = new k(this.ctx);
          this.xDivision = a2.globals.gridWidth / (a2.globals.dataPoints - ("on" === a2.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a2.config.stroke.width) ? a2.config.stroke.width[i2] : a2.config.stroke.width;
          var r2 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = a2.globals.seriesYAxisReverseMap[i2], r2 = i2), this.isReversed = a2.config.yaxis[this.yaxisIndex] && a2.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a2.globals.gridHeight - this.baseLineY[r2] - (this.isReversed ? a2.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r2] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a2.globals.gridHeight || "end" === a2.config.plotOptions.area.fillTo) && (this.areaBottomY = a2.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s2.group({
            class: "apexcharts-series",
            zIndex: void 0 !== a2.config.series[i2].zIndex ? a2.config.series[i2].zIndex : i2,
            seriesName: m.escapeString(a2.globals.seriesNames[i2])
          }), this.elPointsMain = s2.group({
            class: "apexcharts-series-markers-wrap",
            "data:realIndex": i2
          }), this.elDataLabelsWrap = s2.group({
            class: "apexcharts-datalabels",
            "data:realIndex": i2
          });
          var o2 = t3[e2].length === a2.globals.dataPoints;
          this.elSeries.attr({
            "data:longestSeries": o2,
            rel: e2 + 1,
            "data:realIndex": i2
          }), this.appendPathFrom = true;
        }
      }, {
        key: "_calculatePathsFrom",
        value: function (t3) {
          var e2,
            i2,
            a2,
            s2,
            r2 = t3.type,
            o2 = t3.series,
            n2 = t3.i,
            l2 = t3.realIndex,
            h2 = t3.translationsIndex,
            c2 = t3.prevX,
            d2 = t3.prevY,
            g2 = t3.prevY2,
            u2 = this.w,
            f2 = new k(this.ctx);
          if (null === o2[n2][0]) {
            for (var p2 = 0; p2 < o2[n2].length; p2++) if (null !== o2[n2][p2]) {
              c2 = this.xDivision * p2, d2 = this.zeroY - o2[n2][p2] / this.yRatio[h2], e2 = f2.move(c2, d2), i2 = f2.move(c2, this.areaBottomY);
              break;
            }
          } else e2 = f2.move(c2, d2), "rangeArea" === r2 && (e2 = f2.move(c2, g2) + f2.line(c2, d2)), i2 = f2.move(c2, this.areaBottomY) + f2.line(c2, d2);
          if (a2 = f2.move(0, this.zeroY) + f2.line(0, this.zeroY), s2 = f2.move(0, this.zeroY) + f2.line(0, this.zeroY), u2.globals.previousPaths.length > 0) {
            var x2 = this.lineHelpers.checkPreviousPaths({
              pathFromLine: a2,
              pathFromArea: s2,
              realIndex: l2
            });
            a2 = x2.pathFromLine, s2 = x2.pathFromArea;
          }
          return {
            prevX: c2,
            prevY: d2,
            linePath: e2,
            areaPath: i2,
            pathFromLine: a2,
            pathFromArea: s2
          };
        }
      }, {
        key: "_handlePaths",
        value: function (t3) {
          var e2 = t3.type,
            i2 = t3.realIndex,
            a2 = t3.i,
            s2 = t3.paths,
            r2 = this.w,
            o2 = new k(this.ctx),
            n2 = new N(this.ctx);
          this.prevSeriesY.push(s2.yArrj), r2.globals.seriesXvalues[i2] = s2.xArrj, r2.globals.seriesYvalues[i2] = s2.yArrj;
          var l2 = r2.config.forecastDataPoints;
          if (l2.count > 0 && "rangeArea" !== e2) {
            var h2 = r2.globals.seriesXvalues[i2][r2.globals.seriesXvalues[i2].length - l2.count - 1],
              c2 = o2.drawRect(h2, 0, r2.globals.gridWidth, r2.globals.gridHeight, 0);
            r2.globals.dom.elForecastMask.appendChild(c2.node);
            var d2 = o2.drawRect(0, 0, h2, r2.globals.gridHeight, 0);
            r2.globals.dom.elNonForecastMask.appendChild(d2.node);
          }
          this.pointsChart || r2.globals.delayedElements.push({
            el: this.elPointsMain.node,
            index: i2
          });
          var u2 = {
            i: a2,
            realIndex: i2,
            animationDelay: a2,
            initialSpeed: r2.config.chart.animations.speed,
            dataChangeSpeed: r2.config.chart.animations.dynamicAnimation.speed,
            className: "apexcharts-".concat(e2)
          };
          if ("area" === e2) for (var f2 = n2.fillPath({
              seriesNumber: i2
            }), p2 = 0; p2 < s2.areaPaths.length; p2++) {
            var x2 = o2.renderPaths(g(g({}, u2), {}, {
              pathFrom: s2.pathFromArea,
              pathTo: s2.areaPaths[p2],
              stroke: "none",
              strokeWidth: 0,
              strokeLineCap: null,
              fill: f2
            }));
            this.elSeries.add(x2);
          }
          if (r2.config.stroke.show && !this.pointsChart) {
            var b2 = null;
            if ("line" === e2) b2 = n2.fillPath({
              seriesNumber: i2,
              i: a2
            });else if ("solid" === r2.config.stroke.fill.type) b2 = r2.globals.stroke.colors[i2];else {
              var v2 = r2.config.fill;
              r2.config.fill = r2.config.stroke.fill, b2 = n2.fillPath({
                seriesNumber: i2,
                i: a2
              }), r2.config.fill = v2;
            }
            for (var m2 = 0; m2 < s2.linePaths.length; m2++) {
              var y2 = b2;
              "rangeArea" === e2 && (y2 = n2.fillPath({
                seriesNumber: i2
              }));
              var w2 = g(g({}, u2), {}, {
                  pathFrom: s2.pathFromLine,
                  pathTo: s2.linePaths[m2],
                  stroke: b2,
                  strokeWidth: this.strokeWidth,
                  strokeLineCap: r2.config.stroke.lineCap,
                  fill: "rangeArea" === e2 ? y2 : "none"
                }),
                A2 = o2.renderPaths(w2);
              if (this.elSeries.add(A2), A2.attr("fill-rule", "evenodd"), l2.count > 0 && "rangeArea" !== e2) {
                var S2 = o2.renderPaths(w2);
                S2.node.setAttribute("stroke-dasharray", l2.dashArray), l2.strokeWidth && S2.node.setAttribute("stroke-width", l2.strokeWidth), this.elSeries.add(S2), S2.attr("clip-path", "url(#forecastMask".concat(r2.globals.cuid, ")")), A2.attr("clip-path", "url(#nonForecastMask".concat(r2.globals.cuid, ")"));
              }
            }
          }
        }
      }, {
        key: "_iterateOverDataPoints",
        value: function (t3) {
          var e2,
            i2,
            a2 = this,
            s2 = t3.type,
            r2 = t3.series,
            o2 = t3.iterations,
            n2 = t3.realIndex,
            l2 = t3.translationsIndex,
            h2 = t3.i,
            c2 = t3.x,
            d2 = t3.y,
            g2 = t3.pX,
            u2 = t3.pY,
            f2 = t3.pathsFrom,
            p2 = t3.linePaths,
            x2 = t3.areaPaths,
            b2 = t3.seriesIndex,
            v2 = t3.lineYPosition,
            y2 = t3.xArrj,
            w2 = t3.yArrj,
            A2 = t3.y2Arrj,
            S2 = t3.isRangeStart,
            C2 = t3.seriesRangeEnd,
            L2 = this.w,
            P2 = new k(this.ctx),
            M2 = this.yRatio,
            I2 = f2.prevY,
            T2 = f2.linePath,
            z2 = f2.areaPath,
            X2 = f2.pathFromLine,
            E2 = f2.pathFromArea,
            Y2 = m.isNumber(L2.globals.minYArr[n2]) ? L2.globals.minYArr[n2] : L2.globals.minY;
          o2 || (o2 = L2.globals.dataPoints > 1 ? L2.globals.dataPoints - 1 : L2.globals.dataPoints);
          var R2 = function (t4, e3) {
              return e3 - t4 / M2[l2] + 2 * (a2.isReversed ? t4 / M2[l2] : 0);
            },
            F2 = d2,
            D2 = L2.config.chart.stacked && !L2.globals.comboCharts || L2.config.chart.stacked && L2.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e2 = this.w.config.series[n2]) || void 0 === e2 ? void 0 : e2.type) || "column" === (null === (i2 = this.w.config.series[n2]) || void 0 === i2 ? void 0 : i2.type)),
            H2 = L2.config.stroke.curve;
          Array.isArray(H2) && (H2 = Array.isArray(b2) ? H2[b2[h2]] : H2[h2]);
          for (var O2, N2 = 0, W2 = 0; W2 < o2; W2++) {
            var B2 = void 0 === r2[h2][W2 + 1] || null === r2[h2][W2 + 1];
            if (L2.globals.isXNumeric) {
              var G2 = L2.globals.seriesX[n2][W2 + 1];
              void 0 === L2.globals.seriesX[n2][W2 + 1] && (G2 = L2.globals.seriesX[n2][o2 - 1]), c2 = (G2 - L2.globals.minX) / this.xRatio;
            } else c2 += this.xDivision;
            if (D2) {
              if (h2 > 0 && L2.globals.collapsedSeries.length < L2.config.series.length - 1) {
                v2 = this.prevSeriesY[function (t4) {
                  for (var e3 = t4; e3 > 0; e3--) {
                    if (!(L2.globals.collapsedSeriesIndices.indexOf((null == b2 ? void 0 : b2[e3]) || e3) > -1)) return e3;
                    e3--;
                  }
                  return 0;
                }(h2 - 1)][W2 + 1];
              } else v2 = this.zeroY;
            } else v2 = this.zeroY;
            B2 ? d2 = R2(Y2, v2) : (d2 = R2(r2[h2][W2 + 1], v2), "rangeArea" === s2 && (F2 = R2(C2[h2][W2 + 1], v2))), y2.push(c2), !B2 || "smooth" !== L2.config.stroke.curve && "monotoneCubic" !== L2.config.stroke.curve ? (w2.push(d2), A2.push(F2)) : (w2.push(null), A2.push(null));
            var V2 = this.lineHelpers.calculatePoints({
                series: r2,
                x: c2,
                y: d2,
                realIndex: n2,
                i: h2,
                j: W2,
                prevY: I2
              }),
              j2 = this._createPaths({
                type: s2,
                series: r2,
                i: h2,
                realIndex: n2,
                j: W2,
                x: c2,
                y: d2,
                y2: F2,
                xArrj: y2,
                yArrj: w2,
                y2Arrj: A2,
                pX: g2,
                pY: u2,
                pathState: N2,
                segmentStartX: O2,
                linePath: T2,
                areaPath: z2,
                linePaths: p2,
                areaPaths: x2,
                curve: H2,
                isRangeStart: S2
              });
            x2 = j2.areaPaths, p2 = j2.linePaths, g2 = j2.pX, u2 = j2.pY, N2 = j2.pathState, O2 = j2.segmentStartX, z2 = j2.areaPath, T2 = j2.linePath, !this.appendPathFrom || "monotoneCubic" === H2 && "rangeArea" === s2 || (X2 += P2.line(c2, this.zeroY), E2 += P2.line(c2, this.zeroY)), this.handleNullDataPoints(r2, V2, h2, W2, n2), this._handleMarkersAndLabels({
              type: s2,
              pointsPos: V2,
              i: h2,
              j: W2,
              realIndex: n2,
              isRangeStart: S2
            });
          }
          return {
            yArrj: w2,
            xArrj: y2,
            pathFromArea: E2,
            areaPaths: x2,
            pathFromLine: X2,
            linePaths: p2,
            linePath: T2,
            areaPath: z2
          };
        }
      }, {
        key: "_handleMarkersAndLabels",
        value: function (t3) {
          var e2 = t3.type,
            i2 = t3.pointsPos,
            a2 = t3.isRangeStart,
            s2 = t3.i,
            r2 = t3.j,
            o2 = t3.realIndex,
            n2 = this.w,
            l2 = new G(this.ctx);
          if (this.pointsChart) this.scatter.draw(this.elSeries, r2, {
            realIndex: o2,
            pointsPos: i2,
            zRatio: this.zRatio,
            elParent: this.elPointsMain
          });else {
            n2.globals.series[s2].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
            var h2 = this.markers.plotChartMarkers(i2, o2, r2 + 1);
            null !== h2 && this.elPointsMain.add(h2);
          }
          var c2 = l2.drawDataLabel({
            type: e2,
            isRangeStart: a2,
            pos: i2,
            i: o2,
            j: r2 + 1
          });
          null !== c2 && this.elDataLabelsWrap.add(c2);
        }
      }, {
        key: "_createPaths",
        value: function (t3) {
          var e2 = t3.type,
            i2 = t3.series,
            a2 = t3.i;
          t3.realIndex;
          var s2,
            r2 = t3.j,
            o2 = t3.x,
            n2 = t3.y,
            l2 = t3.xArrj,
            h2 = t3.yArrj,
            c2 = t3.y2,
            d2 = t3.y2Arrj,
            g2 = t3.pX,
            u2 = t3.pY,
            f2 = t3.pathState,
            p2 = t3.segmentStartX,
            x2 = t3.linePath,
            b2 = t3.areaPath,
            v2 = t3.linePaths,
            m2 = t3.areaPaths,
            y2 = t3.curve,
            w2 = t3.isRangeStart,
            A2 = new k(this.ctx),
            S2 = this.areaBottomY,
            C2 = "rangeArea" === e2,
            L2 = "rangeArea" === e2 && w2;
          switch (y2) {
            case "monotoneCubic":
              var P2 = w2 ? h2 : d2;
              switch (f2) {
                case 0:
                  if (null === P2[r2 + 1]) break;
                  f2 = 1;
                case 1:
                  if (!(C2 ? l2.length === i2[a2].length : r2 === i2[a2].length - 2)) break;
                case 2:
                  var M2 = w2 ? l2 : l2.slice().reverse(),
                    I2 = w2 ? P2 : P2.slice().reverse(),
                    T2 = (s2 = I2, M2.map(function (t4, e3) {
                      return [t4, s2[e3]];
                    }).filter(function (t4) {
                      return null !== t4[1];
                    })),
                    z2 = T2.length > 1 ? Ft(T2) : T2,
                    X2 = [];
                  C2 && (L2 ? m2 = T2 : X2 = m2.reverse());
                  var E2 = 0,
                    Y2 = 0;
                  if (function (t4, e3) {
                    for (var i3 = function (t5) {
                        var e4 = [],
                          i4 = 0;
                        return t5.forEach(function (t6) {
                          null !== t6 ? i4++ : i4 > 0 && (e4.push(i4), i4 = 0);
                        }), i4 > 0 && e4.push(i4), e4;
                      }(t4), a3 = [], s3 = 0, r3 = 0; s3 < i3.length; r3 += i3[s3++]) a3[s3] = Dt(e3, r3, r3 + i3[s3]);
                    return a3;
                  }(I2, z2).forEach(function (t4) {
                    E2++;
                    var e3 = function (t5) {
                        for (var e4 = "", i4 = 0; i4 < t5.length; i4++) {
                          var a4 = t5[i4],
                            s3 = a4.length;
                          s3 > 4 ? (e4 += "C".concat(a4[0], ", ").concat(a4[1]), e4 += ", ".concat(a4[2], ", ").concat(a4[3]), e4 += ", ".concat(a4[4], ", ").concat(a4[5])) : s3 > 2 && (e4 += "S".concat(a4[0], ", ").concat(a4[1]), e4 += ", ".concat(a4[2], ", ").concat(a4[3]));
                        }
                        return e4;
                      }(t4),
                      i3 = Y2,
                      a3 = (Y2 += t4.length) - 1;
                    L2 ? x2 = A2.move(T2[i3][0], T2[i3][1]) + e3 : C2 ? x2 = A2.move(X2[i3][0], X2[i3][1]) + A2.line(T2[i3][0], T2[i3][1]) + e3 + A2.line(X2[a3][0], X2[a3][1]) : (x2 = A2.move(T2[i3][0], T2[i3][1]) + e3, b2 = x2 + A2.line(T2[a3][0], S2) + A2.line(T2[i3][0], S2) + "z", m2.push(b2)), v2.push(x2);
                  }), C2 && E2 > 1 && !L2) {
                    var R2 = v2.slice(E2).reverse();
                    v2.splice(E2), R2.forEach(function (t4) {
                      return v2.push(t4);
                    });
                  }
                  f2 = 0;
              }
              break;
            case "smooth":
              var F2 = 0.35 * (o2 - g2);
              if (null === i2[a2][r2]) f2 = 0;else switch (f2) {
                case 0:
                  if (p2 = g2, x2 = L2 ? A2.move(g2, d2[r2]) + A2.line(g2, u2) : A2.move(g2, u2), b2 = A2.move(g2, u2), null === i2[a2][r2 + 1]) {
                    v2.push(x2), m2.push(b2);
                    break;
                  }
                  if (f2 = 1, r2 < i2[a2].length - 2) {
                    var D2 = A2.curve(g2 + F2, u2, o2 - F2, n2, o2, n2);
                    x2 += D2, b2 += D2;
                    break;
                  }
                case 1:
                  if (null === i2[a2][r2 + 1]) x2 += L2 ? A2.line(g2, c2) : A2.move(g2, u2), b2 += A2.line(g2, S2) + A2.line(p2, S2) + "z", v2.push(x2), m2.push(b2), f2 = -1;else {
                    var H2 = A2.curve(g2 + F2, u2, o2 - F2, n2, o2, n2);
                    x2 += H2, b2 += H2, r2 >= i2[a2].length - 2 && (L2 && (x2 += A2.curve(o2, n2, o2, n2, o2, c2) + A2.move(o2, c2)), b2 += A2.curve(o2, n2, o2, n2, o2, S2) + A2.line(p2, S2) + "z", v2.push(x2), m2.push(b2), f2 = -1);
                  }
              }
              g2 = o2, u2 = n2;
              break;
            default:
              var O2 = function (t4, e3, i3) {
                var a3 = [];
                switch (t4) {
                  case "stepline":
                    a3 = A2.line(e3, null, "H") + A2.line(null, i3, "V");
                    break;
                  case "linestep":
                    a3 = A2.line(null, i3, "V") + A2.line(e3, null, "H");
                    break;
                  case "straight":
                    a3 = A2.line(e3, i3);
                }
                return a3;
              };
              if (null === i2[a2][r2]) f2 = 0;else switch (f2) {
                case 0:
                  if (p2 = g2, x2 = L2 ? A2.move(g2, d2[r2]) + A2.line(g2, u2) : A2.move(g2, u2), b2 = A2.move(g2, u2), null === i2[a2][r2 + 1]) {
                    v2.push(x2), m2.push(b2);
                    break;
                  }
                  if (f2 = 1, r2 < i2[a2].length - 2) {
                    var N2 = O2(y2, o2, n2);
                    x2 += N2, b2 += N2;
                    break;
                  }
                case 1:
                  if (null === i2[a2][r2 + 1]) x2 += L2 ? A2.line(g2, c2) : A2.move(g2, u2), b2 += A2.line(g2, S2) + A2.line(p2, S2) + "z", v2.push(x2), m2.push(b2), f2 = -1;else {
                    var W2 = O2(y2, o2, n2);
                    x2 += W2, b2 += W2, r2 >= i2[a2].length - 2 && (L2 && (x2 += A2.line(o2, c2)), b2 += A2.line(o2, S2) + A2.line(p2, S2) + "z", v2.push(x2), m2.push(b2), f2 = -1);
                  }
              }
              g2 = o2, u2 = n2;
          }
          return {
            linePaths: v2,
            areaPaths: m2,
            pX: g2,
            pY: u2,
            pathState: f2,
            segmentStartX: p2,
            linePath: x2,
            areaPath: b2
          };
        }
      }, {
        key: "handleNullDataPoints",
        value: function (t3, e2, i2, a2, s2) {
          var r2 = this.w;
          if (null === t3[i2][a2] && r2.config.markers.showNullDataPoints || 1 === t3[i2].length) {
            var o2 = this.strokeWidth - r2.config.markers.strokeWidth / 2;
            o2 > 0 || (o2 = 0);
            var n2 = this.markers.plotChartMarkers(e2, s2, a2 + 1, o2, true);
            null !== n2 && this.elPointsMain.add(n2);
          }
        }
      }]), t2;
    }();
    window.TreemapSquared = {}, window.TreemapSquared.generate = function () {
      function t2(e3, i3, a3, s3) {
        this.xoffset = e3, this.yoffset = i3, this.height = s3, this.width = a3, this.shortestEdge = function () {
          return Math.min(this.height, this.width);
        }, this.getCoordinates = function (t3) {
          var e4,
            i4 = [],
            a4 = this.xoffset,
            s4 = this.yoffset,
            o3 = r2(t3) / this.height,
            n2 = r2(t3) / this.width;
          if (this.width >= this.height) for (e4 = 0; e4 < t3.length; e4++) i4.push([a4, s4, a4 + o3, s4 + t3[e4] / o3]), s4 += t3[e4] / o3;else for (e4 = 0; e4 < t3.length; e4++) i4.push([a4, s4, a4 + t3[e4] / n2, s4 + n2]), a4 += t3[e4] / n2;
          return i4;
        }, this.cutArea = function (e4) {
          var i4;
          if (this.width >= this.height) {
            var a4 = e4 / this.height,
              s4 = this.width - a4;
            i4 = new t2(this.xoffset + a4, this.yoffset, s4, this.height);
          } else {
            var r3 = e4 / this.width,
              o3 = this.height - r3;
            i4 = new t2(this.xoffset, this.yoffset + r3, this.width, o3);
          }
          return i4;
        };
      }
      function e2(e3, a3, s3, o3, n2) {
        o3 = void 0 === o3 ? 0 : o3, n2 = void 0 === n2 ? 0 : n2;
        var l2 = i2(function (t3, e4) {
          var i3,
            a4 = [],
            s4 = e4 / r2(t3);
          for (i3 = 0; i3 < t3.length; i3++) a4[i3] = t3[i3] * s4;
          return a4;
        }(e3, a3 * s3), [], new t2(o3, n2, a3, s3), []);
        return function (t3) {
          var e4,
            i3,
            a4 = [];
          for (e4 = 0; e4 < t3.length; e4++) for (i3 = 0; i3 < t3[e4].length; i3++) a4.push(t3[e4][i3]);
          return a4;
        }(l2);
      }
      function i2(t3, e3, s3, o3) {
        var n2, l2, h2;
        if (0 !== t3.length) return n2 = s3.shortestEdge(), function (t4, e4, i3) {
          var s4;
          if (0 === t4.length) return true;
          (s4 = t4.slice()).push(e4);
          var r3 = a2(t4, i3),
            o4 = a2(s4, i3);
          return r3 >= o4;
        }(e3, l2 = t3[0], n2) ? (e3.push(l2), i2(t3.slice(1), e3, s3, o3)) : (h2 = s3.cutArea(r2(e3), o3), o3.push(s3.getCoordinates(e3)), i2(t3, [], h2, o3)), o3;
        o3.push(s3.getCoordinates(e3));
      }
      function a2(t3, e3) {
        var i3 = Math.min.apply(Math, t3),
          a3 = Math.max.apply(Math, t3),
          s3 = r2(t3);
        return Math.max(Math.pow(e3, 2) * a3 / Math.pow(s3, 2), Math.pow(s3, 2) / (Math.pow(e3, 2) * i3));
      }
      function s2(t3) {
        return t3 && t3.constructor === Array;
      }
      function r2(t3) {
        var e3,
          i3 = 0;
        for (e3 = 0; e3 < t3.length; e3++) i3 += t3[e3];
        return i3;
      }
      function o2(t3) {
        var e3,
          i3 = 0;
        if (s2(t3[0])) for (e3 = 0; e3 < t3.length; e3++) i3 += o2(t3[e3]);else i3 = r2(t3);
        return i3;
      }
      return function t3(i3, a3, r3, n2, l2) {
        n2 = void 0 === n2 ? 0 : n2, l2 = void 0 === l2 ? 0 : l2;
        var h2,
          c2,
          d2 = [],
          g2 = [];
        if (s2(i3[0])) {
          for (c2 = 0; c2 < i3.length; c2++) d2[c2] = o2(i3[c2]);
          for (h2 = e2(d2, a3, r3, n2, l2), c2 = 0; c2 < i3.length; c2++) g2.push(t3(i3[c2], h2[c2][2] - h2[c2][0], h2[c2][3] - h2[c2][1], h2[c2][0], h2[c2][1]));
        } else g2 = e2(i3, a3, r3, n2, l2);
        return g2;
      };
    }();
    var Nt,
      Wt,
      Bt = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new Pt(e2), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
        }
        return s(t2, [{
          key: "draw",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = new k(this.ctx),
              s2 = new N(this.ctx),
              r2 = a2.group({
                class: "apexcharts-treemap"
              });
            if (i2.globals.noData) return r2;
            var o2 = [];
            return t3.forEach(function (t4) {
              var e3 = t4.map(function (t5) {
                return Math.abs(t5);
              });
              o2.push(e3);
            }), this.negRange = this.helpers.checkColorRange(), i2.config.series.forEach(function (t4, i3) {
              t4.data.forEach(function (t5) {
                Array.isArray(e2.labels[i3]) || (e2.labels[i3] = []), e2.labels[i3].push(t5.x);
              });
            }), window.TreemapSquared.generate(o2, i2.globals.gridWidth, i2.globals.gridHeight).forEach(function (o3, n2) {
              var l2 = a2.group({
                class: "apexcharts-series apexcharts-treemap-series",
                seriesName: m.escapeString(i2.globals.seriesNames[n2]),
                rel: n2 + 1,
                "data:realIndex": n2
              });
              if (i2.config.chart.dropShadow.enabled) {
                var h2 = i2.config.chart.dropShadow;
                new w(e2.ctx).dropShadow(r2, h2, n2);
              }
              var c2 = a2.group({
                class: "apexcharts-data-labels"
              });
              o3.forEach(function (r3, o4) {
                var h3 = r3[0],
                  c3 = r3[1],
                  d2 = r3[2],
                  g2 = r3[3],
                  u2 = a2.drawRect(h3, c3, d2 - h3, g2 - c3, i2.config.plotOptions.treemap.borderRadius, "#fff", 1, e2.strokeWidth, i2.config.plotOptions.treemap.useFillColorAsStroke ? p2 : i2.globals.stroke.colors[n2]);
                u2.attr({
                  cx: h3,
                  cy: c3,
                  index: n2,
                  i: n2,
                  j: o4,
                  width: d2 - h3,
                  height: g2 - c3
                });
                var f2 = e2.helpers.getShadeColor(i2.config.chart.type, n2, o4, e2.negRange),
                  p2 = f2.color;
                void 0 !== i2.config.series[n2].data[o4] && i2.config.series[n2].data[o4].fillColor && (p2 = i2.config.series[n2].data[o4].fillColor);
                var x2 = s2.fillPath({
                  color: p2,
                  seriesNumber: n2,
                  dataPointIndex: o4
                });
                u2.node.classList.add("apexcharts-treemap-rect"), u2.attr({
                  fill: x2
                }), e2.helpers.addListeners(u2);
                var b2 = {
                    x: h3 + (d2 - h3) / 2,
                    y: c3 + (g2 - c3) / 2,
                    width: 0,
                    height: 0
                  },
                  v2 = {
                    x: h3,
                    y: c3,
                    width: d2 - h3,
                    height: g2 - c3
                  };
                if (i2.config.chart.animations.enabled && !i2.globals.dataChanged) {
                  var m2 = 1;
                  i2.globals.resized || (m2 = i2.config.chart.animations.speed), e2.animateTreemap(u2, b2, v2, m2);
                }
                if (i2.globals.dataChanged) {
                  var y2 = 1;
                  e2.dynamicAnim.enabled && i2.globals.shouldAnimate && (y2 = e2.dynamicAnim.speed, i2.globals.previousPaths[n2] && i2.globals.previousPaths[n2][o4] && i2.globals.previousPaths[n2][o4].rect && (b2 = i2.globals.previousPaths[n2][o4].rect), e2.animateTreemap(u2, b2, v2, y2));
                }
                var w2 = e2.getFontSize(r3),
                  k2 = i2.config.dataLabels.formatter(e2.labels[n2][o4], {
                    value: i2.globals.series[n2][o4],
                    seriesIndex: n2,
                    dataPointIndex: o4,
                    w: i2
                  });
                "truncate" === i2.config.plotOptions.treemap.dataLabels.format && (w2 = parseInt(i2.config.dataLabels.style.fontSize, 10), k2 = e2.truncateLabels(k2, w2, h3, c3, d2, g2));
                var A2 = null;
                i2.globals.series[n2][o4] && (A2 = e2.helpers.calculateDataLabels({
                  text: k2,
                  x: (h3 + d2) / 2,
                  y: (c3 + g2) / 2 + e2.strokeWidth / 2 + w2 / 3,
                  i: n2,
                  j: o4,
                  colorProps: f2,
                  fontSize: w2,
                  series: t3
                })), i2.config.dataLabels.enabled && A2 && e2.rotateToFitLabel(A2, w2, k2, h3, c3, d2, g2), l2.add(u2), null !== A2 && l2.add(A2);
              }), l2.add(c2), r2.add(l2);
            }), r2;
          }
        }, {
          key: "getFontSize",
          value: function (t3) {
            var e2 = this.w;
            var i2,
              a2,
              s2,
              r2,
              o2 = function t4(e3) {
                var i3,
                  a3 = 0;
                if (Array.isArray(e3[0])) for (i3 = 0; i3 < e3.length; i3++) a3 += t4(e3[i3]);else for (i3 = 0; i3 < e3.length; i3++) a3 += e3[i3].length;
                return a3;
              }(this.labels) / function t4(e3) {
                var i3,
                  a3 = 0;
                if (Array.isArray(e3[0])) for (i3 = 0; i3 < e3.length; i3++) a3 += t4(e3[i3]);else for (i3 = 0; i3 < e3.length; i3++) a3 += 1;
                return a3;
              }(this.labels);
            return i2 = t3[2] - t3[0], a2 = t3[3] - t3[1], s2 = i2 * a2, r2 = Math.pow(s2, 0.5), Math.min(r2 / o2, parseInt(e2.config.dataLabels.style.fontSize, 10));
          }
        }, {
          key: "rotateToFitLabel",
          value: function (t3, e2, i2, a2, s2, r2, o2) {
            var n2 = new k(this.ctx),
              l2 = n2.getTextRects(i2, e2);
            if (l2.width + this.w.config.stroke.width + 5 > r2 - a2 && l2.width <= o2 - s2) {
              var h2 = n2.rotateAroundCenter(t3.node);
              t3.node.setAttribute("transform", "rotate(-90 ".concat(h2.x, " ").concat(h2.y, ") translate(").concat(l2.height / 3, ")"));
            }
          }
        }, {
          key: "truncateLabels",
          value: function (t3, e2, i2, a2, s2, r2) {
            var o2 = new k(this.ctx),
              n2 = o2.getTextRects(t3, e2).width + this.w.config.stroke.width + 5 > s2 - i2 && r2 - a2 > s2 - i2 ? r2 - a2 : s2 - i2,
              l2 = o2.getTextBasedOnMaxWidth({
                text: t3,
                maxWidth: n2,
                fontSize: e2
              });
            return t3.length !== l2.length && n2 / e2 < 5 ? "" : l2;
          }
        }, {
          key: "animateTreemap",
          value: function (t3, e2, i2, a2) {
            var s2 = new y(this.ctx);
            s2.animateRect(t3, {
              x: e2.x,
              y: e2.y,
              width: e2.width,
              height: e2.height
            }, {
              x: i2.x,
              y: i2.y,
              width: i2.width,
              height: i2.height
            }, a2, function () {
              s2.animationCompleted(t3);
            });
          }
        }]), t2;
      }(),
      Gt = 86400,
      Vt = 10 / Gt,
      jt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
        }
        return s(t2, [{
          key: "calculateTimeScaleTicks",
          value: function (t3, e2) {
            var i2 = this,
              a2 = this.w;
            if (a2.globals.allSeriesCollapsed) return a2.globals.labels = [], a2.globals.timescaleLabels = [], [];
            var s2 = new L(this.ctx),
              r2 = (e2 - t3) / 864e5;
            this.determineInterval(r2), a2.globals.disableZoomIn = false, a2.globals.disableZoomOut = false, r2 < Vt ? a2.globals.disableZoomIn = true : r2 > 5e4 && (a2.globals.disableZoomOut = true);
            var o2 = s2.getTimeUnitsfromTimestamp(t3, e2, this.utc),
              n2 = a2.globals.gridWidth / r2,
              l2 = n2 / 24,
              h2 = l2 / 60,
              c2 = h2 / 60,
              d2 = Math.floor(24 * r2),
              u2 = Math.floor(1440 * r2),
              f2 = Math.floor(r2 * Gt),
              p2 = Math.floor(r2),
              x2 = Math.floor(r2 / 30),
              b2 = Math.floor(r2 / 365),
              v2 = {
                minMillisecond: o2.minMillisecond,
                minSecond: o2.minSecond,
                minMinute: o2.minMinute,
                minHour: o2.minHour,
                minDate: o2.minDate,
                minMonth: o2.minMonth,
                minYear: o2.minYear
              },
              m2 = {
                firstVal: v2,
                currentMillisecond: v2.minMillisecond,
                currentSecond: v2.minSecond,
                currentMinute: v2.minMinute,
                currentHour: v2.minHour,
                currentMonthDate: v2.minDate,
                currentDate: v2.minDate,
                currentMonth: v2.minMonth,
                currentYear: v2.minYear,
                daysWidthOnXAxis: n2,
                hoursWidthOnXAxis: l2,
                minutesWidthOnXAxis: h2,
                secondsWidthOnXAxis: c2,
                numberOfSeconds: f2,
                numberOfMinutes: u2,
                numberOfHours: d2,
                numberOfDays: p2,
                numberOfMonths: x2,
                numberOfYears: b2
              };
            switch (this.tickInterval) {
              case "years":
                this.generateYearScale(m2);
                break;
              case "months":
              case "half_year":
                this.generateMonthScale(m2);
                break;
              case "months_days":
              case "months_fortnight":
              case "days":
              case "week_days":
                this.generateDayScale(m2);
                break;
              case "hours":
                this.generateHourScale(m2);
                break;
              case "minutes_fives":
              case "minutes":
                this.generateMinuteScale(m2);
                break;
              case "seconds_tens":
              case "seconds_fives":
              case "seconds":
                this.generateSecondScale(m2);
            }
            var y2 = this.timeScaleArray.map(function (t4) {
              var e3 = {
                position: t4.position,
                unit: t4.unit,
                year: t4.year,
                day: t4.day ? t4.day : 1,
                hour: t4.hour ? t4.hour : 0,
                month: t4.month + 1
              };
              return "month" === t4.unit ? g(g({}, e3), {}, {
                day: 1,
                value: t4.value + 1
              }) : "day" === t4.unit || "hour" === t4.unit ? g(g({}, e3), {}, {
                value: t4.value
              }) : "minute" === t4.unit ? g(g({}, e3), {}, {
                value: t4.value,
                minute: t4.value
              }) : "second" === t4.unit ? g(g({}, e3), {}, {
                value: t4.value,
                minute: t4.minute,
                second: t4.second
              }) : t4;
            });
            return y2.filter(function (t4) {
              var e3 = 1,
                s3 = Math.ceil(a2.globals.gridWidth / 120),
                r3 = t4.value;
              void 0 !== a2.config.xaxis.tickAmount && (s3 = a2.config.xaxis.tickAmount), y2.length > s3 && (e3 = Math.floor(y2.length / s3));
              var o3 = false,
                n3 = false;
              switch (i2.tickInterval) {
                case "years":
                  "year" === t4.unit && (o3 = true);
                  break;
                case "half_year":
                  e3 = 7, "year" === t4.unit && (o3 = true);
                  break;
                case "months":
                  e3 = 1, "year" === t4.unit && (o3 = true);
                  break;
                case "months_fortnight":
                  e3 = 15, "year" !== t4.unit && "month" !== t4.unit || (o3 = true), 30 === r3 && (n3 = true);
                  break;
                case "months_days":
                  e3 = 10, "month" === t4.unit && (o3 = true), 30 === r3 && (n3 = true);
                  break;
                case "week_days":
                  e3 = 8, "month" === t4.unit && (o3 = true);
                  break;
                case "days":
                  e3 = 1, "month" === t4.unit && (o3 = true);
                  break;
                case "hours":
                  "day" === t4.unit && (o3 = true);
                  break;
                case "minutes_fives":
                case "seconds_fives":
                  r3 % 5 != 0 && (n3 = true);
                  break;
                case "seconds_tens":
                  r3 % 10 != 0 && (n3 = true);
              }
              if ("hours" === i2.tickInterval || "minutes_fives" === i2.tickInterval || "seconds_tens" === i2.tickInterval || "seconds_fives" === i2.tickInterval) {
                if (!n3) return true;
              } else if ((r3 % e3 == 0 || o3) && !n3) return true;
            });
          }
        }, {
          key: "recalcDimensionsBasedOnFormat",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = this.formatDates(t3),
              s2 = this.removeOverlappingTS(a2);
            i2.globals.timescaleLabels = s2.slice(), new ct(this.ctx).plotCoords();
          }
        }, {
          key: "determineInterval",
          value: function (t3) {
            var e2 = 24 * t3,
              i2 = 60 * e2;
            switch (true) {
              case t3 / 365 > 5:
                this.tickInterval = "years";
                break;
              case t3 > 800:
                this.tickInterval = "half_year";
                break;
              case t3 > 180:
                this.tickInterval = "months";
                break;
              case t3 > 90:
                this.tickInterval = "months_fortnight";
                break;
              case t3 > 60:
                this.tickInterval = "months_days";
                break;
              case t3 > 30:
                this.tickInterval = "week_days";
                break;
              case t3 > 2:
                this.tickInterval = "days";
                break;
              case e2 > 2.4:
                this.tickInterval = "hours";
                break;
              case i2 > 15:
                this.tickInterval = "minutes_fives";
                break;
              case i2 > 5:
                this.tickInterval = "minutes";
                break;
              case i2 > 1:
                this.tickInterval = "seconds_tens";
                break;
              case 60 * i2 > 20:
                this.tickInterval = "seconds_fives";
                break;
              default:
                this.tickInterval = "seconds";
            }
          }
        }, {
          key: "generateYearScale",
          value: function (t3) {
            var e2 = t3.firstVal,
              i2 = t3.currentMonth,
              a2 = t3.currentYear,
              s2 = t3.daysWidthOnXAxis,
              r2 = t3.numberOfYears,
              o2 = e2.minYear,
              n2 = 0,
              l2 = new L(this.ctx),
              h2 = "year";
            if (e2.minDate > 1 || e2.minMonth > 0) {
              var c2 = l2.determineRemainingDaysOfYear(e2.minYear, e2.minMonth, e2.minDate);
              n2 = (l2.determineDaysOfYear(e2.minYear) - c2 + 1) * s2, o2 = e2.minYear + 1, this.timeScaleArray.push({
                position: n2,
                value: o2,
                unit: h2,
                year: o2,
                month: m.monthMod(i2 + 1)
              });
            } else 1 === e2.minDate && 0 === e2.minMonth && this.timeScaleArray.push({
              position: n2,
              value: o2,
              unit: h2,
              year: a2,
              month: m.monthMod(i2 + 1)
            });
            for (var d2 = o2, g2 = n2, u2 = 0; u2 < r2; u2++) d2++, g2 = l2.determineDaysOfYear(d2 - 1) * s2 + g2, this.timeScaleArray.push({
              position: g2,
              value: d2,
              unit: h2,
              year: d2,
              month: 1
            });
          }
        }, {
          key: "generateMonthScale",
          value: function (t3) {
            var e2 = t3.firstVal,
              i2 = t3.currentMonthDate,
              a2 = t3.currentMonth,
              s2 = t3.currentYear,
              r2 = t3.daysWidthOnXAxis,
              o2 = t3.numberOfMonths,
              n2 = a2,
              l2 = 0,
              h2 = new L(this.ctx),
              c2 = "month",
              d2 = 0;
            if (e2.minDate > 1) {
              l2 = (h2.determineDaysOfMonths(a2 + 1, e2.minYear) - i2 + 1) * r2, n2 = m.monthMod(a2 + 1);
              var g2 = s2 + d2,
                u2 = m.monthMod(n2),
                f2 = n2;
              0 === n2 && (c2 = "year", f2 = g2, u2 = 1, g2 += d2 += 1), this.timeScaleArray.push({
                position: l2,
                value: f2,
                unit: c2,
                year: g2,
                month: u2
              });
            } else this.timeScaleArray.push({
              position: l2,
              value: n2,
              unit: c2,
              year: s2,
              month: m.monthMod(a2)
            });
            for (var p2 = n2 + 1, x2 = l2, b2 = 0, v2 = 1; b2 < o2; b2++, v2++) {
              0 === (p2 = m.monthMod(p2)) ? (c2 = "year", d2 += 1) : c2 = "month";
              var y2 = this._getYear(s2, p2, d2);
              x2 = h2.determineDaysOfMonths(p2, y2) * r2 + x2;
              var w2 = 0 === p2 ? y2 : p2;
              this.timeScaleArray.push({
                position: x2,
                value: w2,
                unit: c2,
                year: y2,
                month: 0 === p2 ? 1 : p2
              }), p2++;
            }
          }
        }, {
          key: "generateDayScale",
          value: function (t3) {
            var e2 = t3.firstVal,
              i2 = t3.currentMonth,
              a2 = t3.currentYear,
              s2 = t3.hoursWidthOnXAxis,
              r2 = t3.numberOfDays,
              o2 = new L(this.ctx),
              n2 = "day",
              l2 = e2.minDate + 1,
              h2 = l2,
              c2 = function (t4, e3, i3) {
                return t4 > o2.determineDaysOfMonths(e3 + 1, i3) ? (h2 = 1, n2 = "month", g2 = e3 += 1, e3) : e3;
              },
              d2 = (24 - e2.minHour) * s2,
              g2 = l2,
              u2 = c2(h2, i2, a2);
            0 === e2.minHour && 1 === e2.minDate ? (d2 = 0, g2 = m.monthMod(e2.minMonth), n2 = "month", h2 = e2.minDate) : 1 !== e2.minDate && 0 === e2.minHour && 0 === e2.minMinute && (d2 = 0, l2 = e2.minDate, g2 = l2, u2 = c2(h2 = l2, i2, a2)), this.timeScaleArray.push({
              position: d2,
              value: g2,
              unit: n2,
              year: this._getYear(a2, u2, 0),
              month: m.monthMod(u2),
              day: h2
            });
            for (var f2 = d2, p2 = 0; p2 < r2; p2++) {
              n2 = "day", u2 = c2(h2 += 1, u2, this._getYear(a2, u2, 0));
              var x2 = this._getYear(a2, u2, 0);
              f2 = 24 * s2 + f2;
              var b2 = 1 === h2 ? m.monthMod(u2) : h2;
              this.timeScaleArray.push({
                position: f2,
                value: b2,
                unit: n2,
                year: x2,
                month: m.monthMod(u2),
                day: b2
              });
            }
          }
        }, {
          key: "generateHourScale",
          value: function (t3) {
            var e2 = t3.firstVal,
              i2 = t3.currentDate,
              a2 = t3.currentMonth,
              s2 = t3.currentYear,
              r2 = t3.minutesWidthOnXAxis,
              o2 = t3.numberOfHours,
              n2 = new L(this.ctx),
              l2 = "hour",
              h2 = function (t4, e3) {
                return t4 > n2.determineDaysOfMonths(e3 + 1, s2) && (p2 = 1, e3 += 1), {
                  month: e3,
                  date: p2
                };
              },
              c2 = function (t4, e3) {
                return t4 > n2.determineDaysOfMonths(e3 + 1, s2) ? e3 += 1 : e3;
              },
              d2 = 60 - (e2.minMinute + e2.minSecond / 60),
              g2 = d2 * r2,
              u2 = e2.minHour + 1,
              f2 = u2;
            60 === d2 && (g2 = 0, f2 = u2 = e2.minHour);
            var p2 = i2;
            f2 >= 24 && (f2 = 0, p2 += 1, l2 = "day");
            var x2 = h2(p2, a2).month;
            x2 = c2(p2, x2), this.timeScaleArray.push({
              position: g2,
              value: u2,
              unit: l2,
              day: p2,
              hour: f2,
              year: s2,
              month: m.monthMod(x2)
            }), f2++;
            for (var b2 = g2, v2 = 0; v2 < o2; v2++) {
              if (l2 = "hour", f2 >= 24) f2 = 0, l2 = "day", x2 = h2(p2 += 1, x2).month, x2 = c2(p2, x2);
              var y2 = this._getYear(s2, x2, 0);
              b2 = 60 * r2 + b2;
              var w2 = 0 === f2 ? p2 : f2;
              this.timeScaleArray.push({
                position: b2,
                value: w2,
                unit: l2,
                hour: f2,
                day: p2,
                year: y2,
                month: m.monthMod(x2)
              }), f2++;
            }
          }
        }, {
          key: "generateMinuteScale",
          value: function (t3) {
            for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.minutesWidthOnXAxis, h2 = t3.secondsWidthOnXAxis, c2 = t3.numberOfMinutes, d2 = a2 + 1, g2 = r2, u2 = o2, f2 = n2, p2 = s2, x2 = (60 - i2 - e2 / 1e3) * h2, b2 = 0; b2 < c2; b2++) d2 >= 60 && (d2 = 0, 24 === (p2 += 1) && (p2 = 0)), this.timeScaleArray.push({
              position: x2,
              value: d2,
              unit: "minute",
              hour: p2,
              minute: d2,
              day: g2,
              year: this._getYear(f2, u2, 0),
              month: m.monthMod(u2)
            }), x2 += l2, d2++;
          }
        }, {
          key: "generateSecondScale",
          value: function (t3) {
            for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.secondsWidthOnXAxis, h2 = t3.numberOfSeconds, c2 = i2 + 1, d2 = a2, g2 = r2, u2 = o2, f2 = n2, p2 = s2, x2 = (1e3 - e2) / 1e3 * l2, b2 = 0; b2 < h2; b2++) c2 >= 60 && (c2 = 0, ++d2 >= 60 && (d2 = 0, 24 === ++p2 && (p2 = 0))), this.timeScaleArray.push({
              position: x2,
              value: c2,
              unit: "second",
              hour: p2,
              minute: d2,
              second: c2,
              day: g2,
              year: this._getYear(f2, u2, 0),
              month: m.monthMod(u2)
            }), x2 += l2, c2++;
          }
        }, {
          key: "createRawDateString",
          value: function (t3, e2) {
            var i2 = t3.year;
            return 0 === t3.month && (t3.month = 1), i2 += "-" + ("0" + t3.month.toString()).slice(-2), "day" === t3.unit ? i2 += "day" === t3.unit ? "-" + ("0" + e2).slice(-2) : "-01" : i2 += "-" + ("0" + (t3.day ? t3.day : "1")).slice(-2), "hour" === t3.unit ? i2 += "hour" === t3.unit ? "T" + ("0" + e2).slice(-2) : "T00" : i2 += "T" + ("0" + (t3.hour ? t3.hour : "0")).slice(-2), "minute" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":" + (t3.minute ? ("0" + t3.minute).slice(-2) : "00"), "second" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":00", this.utc && (i2 += ".000Z"), i2;
          }
        }, {
          key: "formatDates",
          value: function (t3) {
            var e2 = this,
              i2 = this.w;
            return t3.map(function (t4) {
              var a2 = t4.value.toString(),
                s2 = new L(e2.ctx),
                r2 = e2.createRawDateString(t4, a2),
                o2 = s2.getDate(s2.parseDate(r2));
              if (e2.utc || (o2 = s2.getDate(s2.parseDateWithTimezone(r2))), void 0 === i2.config.xaxis.labels.format) {
                var n2 = "dd MMM",
                  l2 = i2.config.xaxis.labels.datetimeFormatter;
                "year" === t4.unit && (n2 = l2.year), "month" === t4.unit && (n2 = l2.month), "day" === t4.unit && (n2 = l2.day), "hour" === t4.unit && (n2 = l2.hour), "minute" === t4.unit && (n2 = l2.minute), "second" === t4.unit && (n2 = l2.second), a2 = s2.formatDate(o2, n2);
              } else a2 = s2.formatDate(o2, i2.config.xaxis.labels.format);
              return {
                dateString: r2,
                position: t4.position,
                value: a2,
                unit: t4.unit,
                year: t4.year,
                month: t4.month
              };
            });
          }
        }, {
          key: "removeOverlappingTS",
          value: function (t3) {
            var e2,
              i2 = this,
              a2 = new k(this.ctx),
              s2 = false;
            t3.length > 0 && t3[0].value && t3.every(function (e3) {
              return e3.value.length === t3[0].value.length;
            }) && (s2 = true, e2 = a2.getTextRects(t3[0].value).width);
            var r2 = 0,
              o2 = t3.map(function (o3, n2) {
                if (n2 > 0 && i2.w.config.xaxis.labels.hideOverlappingLabels) {
                  var l2 = s2 ? e2 : a2.getTextRects(t3[r2].value).width,
                    h2 = t3[r2].position;
                  return o3.position > h2 + l2 + 10 ? (r2 = n2, o3) : null;
                }
                return o3;
              });
            return o2 = o2.filter(function (t4) {
              return null !== t4;
            });
          }
        }, {
          key: "_getYear",
          value: function (t3, e2, i2) {
            return t3 + Math.floor(e2 / 12) + i2;
          }
        }]), t2;
      }(),
      _t = function () {
        function t2(e2, a2) {
          i(this, t2), this.ctx = a2, this.w = a2.w, this.el = e2;
        }
        return s(t2, [{
          key: "setupElements",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = t3.config,
              a2 = i2.chart.type;
            e2.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].includes(a2), e2.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].includes(a2), e2.isBarHorizontal = ["bar", "rangeBar", "boxPlot"].includes(a2) && i2.plotOptions.bar.horizontal, e2.chartClass = ".apexcharts".concat(e2.chartID), e2.dom.baseEl = this.el, e2.dom.elWrap = document.createElement("div"), k.setAttrs(e2.dom.elWrap, {
              id: e2.chartClass.substring(1),
              class: "apexcharts-canvas ".concat(e2.chartClass.substring(1))
            }), this.el.appendChild(e2.dom.elWrap), e2.dom.Paper = new window.SVG.Doc(e2.dom.elWrap), e2.dom.Paper.attr({
              class: "apexcharts-svg",
              "xmlns:data": "ApexChartsNS",
              transform: "translate(".concat(i2.chart.offsetX, ", ").concat(i2.chart.offsetY, ")")
            }), e2.dom.Paper.node.style.background = "dark" !== i2.theme.mode || i2.chart.background ? "light" !== i2.theme.mode || i2.chart.background ? i2.chart.background : "#fff" : "#424242", this.setSVGDimensions(), e2.dom.elLegendForeign = document.createElementNS(e2.SVGNS, "foreignObject"), k.setAttrs(e2.dom.elLegendForeign, {
              x: 0,
              y: 0,
              width: e2.svgWidth,
              height: e2.svgHeight
            }), e2.dom.elLegendWrap = document.createElement("div"), e2.dom.elLegendWrap.classList.add("apexcharts-legend"), e2.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e2.dom.elLegendForeign.appendChild(e2.dom.elLegendWrap), e2.dom.Paper.node.appendChild(e2.dom.elLegendForeign), e2.dom.elGraphical = e2.dom.Paper.group().attr({
              class: "apexcharts-inner apexcharts-graphical"
            }), e2.dom.elDefs = e2.dom.Paper.defs(), e2.dom.Paper.add(e2.dom.elGraphical), e2.dom.elGraphical.add(e2.dom.elDefs);
          }
        }, {
          key: "plotChartType",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = this.ctx,
              s2 = i2.config,
              r2 = i2.globals,
              o2 = {
                line: {
                  series: [],
                  i: []
                },
                area: {
                  series: [],
                  i: []
                },
                scatter: {
                  series: [],
                  i: []
                },
                bubble: {
                  series: [],
                  i: []
                },
                column: {
                  series: [],
                  i: []
                },
                candlestick: {
                  series: [],
                  i: []
                },
                boxPlot: {
                  series: [],
                  i: []
                },
                rangeBar: {
                  series: [],
                  i: []
                },
                rangeArea: {
                  series: [],
                  seriesRangeEnd: [],
                  i: []
                }
              },
              n2 = s2.chart.type || "line",
              l2 = null,
              h2 = 0;
            r2.series.forEach(function (e3, a3) {
              var s3 = t3[a3].type || n2;
              o2[s3] ? ("rangeArea" === s3 ? (o2[s3].series.push(r2.seriesRangeStart[a3]), o2[s3].seriesRangeEnd.push(r2.seriesRangeEnd[a3])) : o2[s3].series.push(e3), o2[s3].i.push(a3), "column" !== s3 && "bar" !== s3 || (i2.globals.columnSeries = o2.column)) : ["heatmap", "treemap", "pie", "donut", "polarArea", "radialBar", "radar"].includes(s3) ? l2 = s3 : "bar" === s3 ? (o2.column.series.push(e3), o2.column.i.push(a3)) : console.warn("You have specified an unrecognized series type (".concat(s3, ").")), n2 !== s3 && "scatter" !== s3 && h2++;
            }), h2 > 0 && (l2 && console.warn("Chart or series type ".concat(l2, " cannot appear with other chart or series types.")), o2.column.series.length > 0 && s2.plotOptions.bar.horizontal && (h2 -= o2.column.series.length, o2.column = {
              series: [],
              i: []
            }, i2.globals.columnSeries = {
              series: [],
              i: []
            }, console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"))), r2.comboCharts || (r2.comboCharts = h2 > 0);
            var c2 = new Ot(a2, e2),
              d2 = new Lt(a2, e2);
            a2.pie = new Tt(a2);
            var g2 = new Xt(a2);
            a2.rangeBar = new Et(a2, e2);
            var u2 = new zt(a2),
              f2 = [];
            if (r2.comboCharts) {
              var x2,
                b2,
                v2 = new A(a2);
              if (o2.area.series.length > 0) (x2 = f2).push.apply(x2, p(v2.drawSeriesByGroup(o2.area, r2.areaGroups, "area", c2)));
              if (o2.column.series.length > 0) if (s2.chart.stacked) {
                var m2 = new Ct(a2, e2);
                f2.push(m2.draw(o2.column.series, o2.column.i));
              } else a2.bar = new St(a2, e2), f2.push(a2.bar.draw(o2.column.series, o2.column.i));
              if (o2.rangeArea.series.length > 0 && f2.push(c2.draw(o2.rangeArea.series, "rangeArea", o2.rangeArea.i, o2.rangeArea.seriesRangeEnd)), o2.line.series.length > 0) (b2 = f2).push.apply(b2, p(v2.drawSeriesByGroup(o2.line, r2.lineGroups, "line", c2)));
              if (o2.candlestick.series.length > 0 && f2.push(d2.draw(o2.candlestick.series, "candlestick", o2.candlestick.i)), o2.boxPlot.series.length > 0 && f2.push(d2.draw(o2.boxPlot.series, "boxPlot", o2.boxPlot.i)), o2.rangeBar.series.length > 0 && f2.push(a2.rangeBar.draw(o2.rangeBar.series, o2.rangeBar.i)), o2.scatter.series.length > 0) {
                var y2 = new Ot(a2, e2, true);
                f2.push(y2.draw(o2.scatter.series, "scatter", o2.scatter.i));
              }
              if (o2.bubble.series.length > 0) {
                var w2 = new Ot(a2, e2, true);
                f2.push(w2.draw(o2.bubble.series, "bubble", o2.bubble.i));
              }
            } else switch (s2.chart.type) {
              case "line":
                f2 = c2.draw(r2.series, "line");
                break;
              case "area":
                f2 = c2.draw(r2.series, "area");
                break;
              case "bar":
                if (s2.chart.stacked) f2 = new Ct(a2, e2).draw(r2.series);else a2.bar = new St(a2, e2), f2 = a2.bar.draw(r2.series);
                break;
              case "candlestick":
                f2 = new Lt(a2, e2).draw(r2.series, "candlestick");
                break;
              case "boxPlot":
                f2 = new Lt(a2, e2).draw(r2.series, s2.chart.type);
                break;
              case "rangeBar":
                f2 = a2.rangeBar.draw(r2.series);
                break;
              case "rangeArea":
                f2 = c2.draw(r2.seriesRangeStart, "rangeArea", void 0, r2.seriesRangeEnd);
                break;
              case "heatmap":
                f2 = new Mt(a2, e2).draw(r2.series);
                break;
              case "treemap":
                f2 = new Bt(a2, e2).draw(r2.series);
                break;
              case "pie":
              case "donut":
              case "polarArea":
                f2 = a2.pie.draw(r2.series);
                break;
              case "radialBar":
                f2 = g2.draw(r2.series);
                break;
              case "radar":
                f2 = u2.draw(r2.series);
                break;
              default:
                f2 = c2.draw(r2.series);
            }
            return f2;
          }
        }, {
          key: "setSVGDimensions",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = t3.config;
            i2.chart.width = i2.chart.width || "100%", i2.chart.height = i2.chart.height || "auto", e2.svgWidth = i2.chart.width, e2.svgHeight = i2.chart.height;
            var a2 = m.getDimensions(this.el),
              s2 = i2.chart.width.toString().split(/[0-9]+/g).pop();
            "%" === s2 ? m.isNumber(a2[0]) && (0 === a2[0].width && (a2 = m.getDimensions(this.el.parentNode)), e2.svgWidth = a2[0] * parseInt(i2.chart.width, 10) / 100) : "px" !== s2 && "" !== s2 || (e2.svgWidth = parseInt(i2.chart.width, 10));
            var r2 = String(i2.chart.height).toString().split(/[0-9]+/g).pop();
            if ("auto" !== e2.svgHeight && "" !== e2.svgHeight) {
              if ("%" === r2) {
                var o2 = m.getDimensions(this.el.parentNode);
                e2.svgHeight = o2[1] * parseInt(i2.chart.height, 10) / 100;
              } else e2.svgHeight = parseInt(i2.chart.height, 10);
            } else e2.svgHeight = e2.axisCharts ? e2.svgWidth / 1.61 : e2.svgWidth / 1.2;
            if (e2.svgWidth = Math.max(e2.svgWidth, 0), e2.svgHeight = Math.max(e2.svgHeight, 0), k.setAttrs(e2.dom.Paper.node, {
              width: e2.svgWidth,
              height: e2.svgHeight
            }), "%" !== r2) {
              var n2 = i2.chart.sparkline.enabled ? 0 : e2.axisCharts ? i2.chart.parentHeightOffset : 0;
              e2.dom.Paper.node.parentNode.parentNode.style.minHeight = "".concat(e2.svgHeight + n2, "px");
            }
            e2.dom.elWrap.style.width = "".concat(e2.svgWidth, "px"), e2.dom.elWrap.style.height = "".concat(e2.svgHeight, "px");
          }
        }, {
          key: "shiftGraphPosition",
          value: function () {
            var t3 = this.w.globals,
              e2 = t3.translateY,
              i2 = t3.translateX;
            k.setAttrs(t3.dom.elGraphical.node, {
              transform: "translate(".concat(i2, ", ").concat(e2, ")")
            });
          }
        }, {
          key: "resizeNonAxisCharts",
          value: function () {
            var t3 = this.w,
              e2 = t3.globals,
              i2 = 0,
              a2 = t3.config.chart.sparkline.enabled ? 1 : 15;
            a2 += t3.config.grid.padding.bottom, ["top", "bottom"].includes(t3.config.legend.position) && t3.config.legend.show && !t3.config.legend.floating && (i2 = new gt(this.ctx).legendHelpers.getLegendDimensions().clwh + 7);
            var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"),
              r2 = 2.05 * t3.globals.radialSize;
            if (s2 && !t3.config.chart.sparkline.enabled && 0 !== t3.config.plotOptions.radialBar.startAngle) {
              var o2 = m.getBoundingClientRect(s2);
              r2 = o2.bottom;
              var n2 = o2.bottom - o2.top;
              r2 = Math.max(2.05 * t3.globals.radialSize, n2);
            }
            var l2 = Math.ceil(r2 + e2.translateY + i2 + a2);
            e2.dom.elLegendForeign && e2.dom.elLegendForeign.setAttribute("height", l2), t3.config.chart.height && String(t3.config.chart.height).includes("%") || (e2.dom.elWrap.style.height = "".concat(l2, "px"), k.setAttrs(e2.dom.Paper.node, {
              height: l2
            }), e2.dom.Paper.node.parentNode.parentNode.style.minHeight = "".concat(l2, "px"));
          }
        }, {
          key: "coreCalculations",
          value: function () {
            new J(this.ctx).init();
          }
        }, {
          key: "resetGlobals",
          value: function () {
            var t3 = this,
              e2 = function () {
                return t3.w.config.series.map(function () {
                  return [];
                });
              },
              i2 = new H(),
              a2 = this.w.globals;
            i2.initGlobalVars(a2), a2.seriesXvalues = e2(), a2.seriesYvalues = e2();
          }
        }, {
          key: "isMultipleY",
          value: function () {
            return !!(Array.isArray(this.w.config.yaxis) && this.w.config.yaxis.length > 1) && (this.w.globals.isMultipleYAxis = true, true);
          }
        }, {
          key: "xySettings",
          value: function () {
            var t3 = this.w,
              e2 = null;
            if (t3.globals.axisCharts) {
              if ("back" === t3.config.xaxis.crosshairs.position && new it(this.ctx).drawXCrosshairs(), "back" === t3.config.yaxis[0].crosshairs.position && new it(this.ctx).drawYCrosshairs(), "datetime" === t3.config.xaxis.type && void 0 === t3.config.xaxis.labels.formatter) {
                this.ctx.timeScale = new jt(this.ctx);
                var i2 = [];
                isFinite(t3.globals.minX) && isFinite(t3.globals.maxX) && !t3.globals.isBarHorizontal ? i2 = this.ctx.timeScale.calculateTimeScaleTicks(t3.globals.minX, t3.globals.maxX) : t3.globals.isBarHorizontal && (i2 = this.ctx.timeScale.calculateTimeScaleTicks(t3.globals.minY, t3.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i2);
              }
              e2 = new A(this.ctx).getCalculatedRatios();
            }
            return e2;
          }
        }, {
          key: "updateSourceChart",
          value: function (t3) {
            this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({
              chart: {
                selection: {
                  xaxis: {
                    min: t3.w.globals.minX,
                    max: t3.w.globals.maxX
                  }
                }
              }
            }, false, false);
          }
        }, {
          key: "setupBrushHandler",
          value: function () {
            var t3 = this,
              e2 = this.w;
            if (e2.config.chart.brush.enabled && "function" != typeof e2.config.chart.events.selection) {
              var i2 = Array.isArray(e2.config.chart.brush.targets) ? e2.config.chart.brush.targets : [e2.config.chart.brush.target];
              i2.forEach(function (e3) {
                var i3 = ApexCharts.getChartByID(e3);
                i3.w.globals.brushSource = t3.ctx, "function" != typeof i3.w.config.chart.events.zoomed && (i3.w.config.chart.events.zoomed = function () {
                  return t3.updateSourceChart(i3);
                }), "function" != typeof i3.w.config.chart.events.scrolled && (i3.w.config.chart.events.scrolled = function () {
                  return t3.updateSourceChart(i3);
                });
              }), e2.config.chart.events.selection = function (t4, e3) {
                i2.forEach(function (t5) {
                  ApexCharts.getChartByID(t5).ctx.updateHelpers._updateOptions({
                    xaxis: {
                      min: e3.xaxis.min,
                      max: e3.xaxis.max
                    }
                  }, false, false, false, false);
                });
              };
            }
          }
        }]), t2;
      }(),
      Ut = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "_updateOptions",
          value: function (t3) {
            var e2 = this,
              i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
              a2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
              s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
              r2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            return new Promise(function (o2) {
              var n2 = [e2.ctx];
              s2 && (n2 = e2.ctx.getSyncedCharts()), e2.ctx.w.globals.isExecCalled && (n2 = [e2.ctx], e2.ctx.w.globals.isExecCalled = false), n2.forEach(function (s3, l2) {
                var h2 = s3.w;
                if (h2.globals.shouldAnimate = a2, i2 || (h2.globals.resized = true, h2.globals.dataChanged = true, a2 && s3.series.getPreviousPaths()), t3 && "object" === b(t3) && (s3.config = new D(t3), t3 = A.extendArrayProps(s3.config, t3, h2), s3.w.globals.chartID !== e2.ctx.w.globals.chartID && delete t3.series, h2.config = m.extend(h2.config, t3), r2 && (h2.globals.lastXAxis = t3.xaxis ? m.clone(t3.xaxis) : [], h2.globals.lastYAxis = t3.yaxis ? m.clone(t3.yaxis) : [], h2.globals.initialConfig = m.extend({}, h2.config), h2.globals.initialSeries = m.clone(h2.config.series), t3.series))) {
                  for (var c2 = 0; c2 < h2.globals.collapsedSeriesIndices.length; c2++) {
                    var d2 = h2.config.series[h2.globals.collapsedSeriesIndices[c2]];
                    h2.globals.collapsedSeries[c2].data = h2.globals.axisCharts ? d2.data.slice() : d2;
                  }
                  for (var g2 = 0; g2 < h2.globals.ancillaryCollapsedSeriesIndices.length; g2++) {
                    var u2 = h2.config.series[h2.globals.ancillaryCollapsedSeriesIndices[g2]];
                    h2.globals.ancillaryCollapsedSeries[g2].data = h2.globals.axisCharts ? u2.data.slice() : u2;
                  }
                  s3.series.emptyCollapsedSeries(h2.config.series);
                }
                return s3.update(t3).then(function () {
                  l2 === n2.length - 1 && o2(s3);
                });
              });
            });
          }
        }, {
          key: "_updateSeries",
          value: function (t3, e2) {
            var i2 = this,
              a2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return new Promise(function (s2) {
              var r2,
                o2 = i2.w;
              return o2.globals.shouldAnimate = e2, o2.globals.dataChanged = true, e2 && i2.ctx.series.getPreviousPaths(), o2.globals.axisCharts ? (0 === (r2 = t3.map(function (t4, e3) {
                return i2._extendSeries(t4, e3);
              })).length && (r2 = [{
                data: []
              }]), o2.config.series = r2) : o2.config.series = t3.slice(), a2 && (o2.globals.initialConfig.series = m.clone(o2.config.series), o2.globals.initialSeries = m.clone(o2.config.series)), i2.ctx.update().then(function () {
                s2(i2.ctx);
              });
            });
          }
        }, {
          key: "_extendSeries",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = i2.config.series[e2];
            return g(g({}, i2.config.series[e2]), {}, {
              name: t3.name ? t3.name : null == a2 ? void 0 : a2.name,
              color: t3.color ? t3.color : null == a2 ? void 0 : a2.color,
              type: t3.type ? t3.type : null == a2 ? void 0 : a2.type,
              group: t3.group ? t3.group : null == a2 ? void 0 : a2.group,
              hidden: void 0 !== t3.hidden ? t3.hidden : null == a2 ? void 0 : a2.hidden,
              data: t3.data ? t3.data : null == a2 ? void 0 : a2.data,
              zIndex: void 0 !== t3.zIndex ? t3.zIndex : e2
            });
          }
        }, {
          key: "toggleDataPointSelection",
          value: function (t3, e2) {
            var i2 = this.w,
              a2 = null,
              s2 = ".apexcharts-series[data\\:realIndex='".concat(t3, "']");
            return i2.globals.axisCharts ? a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(e2, "'], ").concat(s2, " circle[j='").concat(e2, "'], ").concat(s2, " rect[j='").concat(e2, "']")).members[0] : void 0 === e2 && (a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(t3, "']")).members[0], "pie" !== i2.config.chart.type && "polarArea" !== i2.config.chart.type && "donut" !== i2.config.chart.type || this.ctx.pie.pieClicked(t3)), a2 ? (new k(this.ctx).pathMouseDown(a2, null), a2.node ? a2.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
          }
        }, {
          key: "forceXAxisUpdate",
          value: function (t3) {
            var e2 = this.w;
            if (["min", "max"].forEach(function (i3) {
              void 0 !== t3.xaxis[i3] && (e2.config.xaxis[i3] = t3.xaxis[i3], e2.globals.lastXAxis[i3] = t3.xaxis[i3]);
            }), t3.xaxis.categories && t3.xaxis.categories.length && (e2.config.xaxis.categories = t3.xaxis.categories), e2.config.xaxis.convertedCatToNumeric) {
              var i2 = new F(t3);
              t3 = i2.convertCatToNumericXaxis(t3, this.ctx);
            }
            return t3;
          }
        }, {
          key: "forceYAxisUpdate",
          value: function (t3) {
            return t3.chart && t3.chart.stacked && "100%" === t3.chart.stackType && (Array.isArray(t3.yaxis) ? t3.yaxis.forEach(function (e2, i2) {
              t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
            }) : (t3.yaxis.min = 0, t3.yaxis.max = 100)), t3;
          }
        }, {
          key: "revertDefaultAxisMinMax",
          value: function (t3) {
            var e2 = this,
              i2 = this.w,
              a2 = i2.globals.lastXAxis,
              s2 = i2.globals.lastYAxis;
            t3 && t3.xaxis && (a2 = t3.xaxis), t3 && t3.yaxis && (s2 = t3.yaxis), i2.config.xaxis.min = a2.min, i2.config.xaxis.max = a2.max;
            var r2 = function (t4) {
              void 0 !== s2[t4] && (i2.config.yaxis[t4].min = s2[t4].min, i2.config.yaxis[t4].max = s2[t4].max);
            };
            i2.config.yaxis.map(function (t4, a3) {
              i2.globals.zoomed || void 0 !== s2[a3] ? r2(a3) : void 0 !== e2.ctx.opts.yaxis[a3] && (t4.min = e2.ctx.opts.yaxis[a3].min, t4.max = e2.ctx.opts.yaxis[a3].max);
            });
          }
        }]), t2;
      }();
    Nt = "undefined" != typeof window ? window : void 0, Wt = function (t2, e2) {
      var i2 = (void 0 !== this ? this : t2).SVG = function (t3) {
        if (i2.supported) return t3 = new i2.Doc(t3), i2.parser.draw || i2.prepare(), t3;
      };
      if (i2.ns = "http://www.w3.org/2000/svg", i2.xmlns = "http://www.w3.org/2000/xmlns/", i2.xlink = "http://www.w3.org/1999/xlink", i2.svgjs = "http://svgjs.dev", i2.supported = true, !i2.supported) return false;
      i2.did = 1e3, i2.eid = function (t3) {
        return "Svgjs" + c2(t3) + i2.did++;
      }, i2.create = function (t3) {
        var i3 = e2.createElementNS(this.ns, t3);
        return i3.setAttribute("id", this.eid(t3)), i3;
      }, i2.extend = function () {
        var t3, e3;
        e3 = (t3 = [].slice.call(arguments)).pop();
        for (var a3 = t3.length - 1; a3 >= 0; a3--) if (t3[a3]) for (var s3 in e3) t3[a3].prototype[s3] = e3[s3];
        i2.Set && i2.Set.inherit && i2.Set.inherit();
      }, i2.invent = function (t3) {
        var e3 = "function" == typeof t3.create ? t3.create : function () {
          this.constructor.call(this, i2.create(t3.create));
        };
        return t3.inherit && (e3.prototype = new t3.inherit()), t3.extend && i2.extend(e3, t3.extend), t3.construct && i2.extend(t3.parent || i2.Container, t3.construct), e3;
      }, i2.adopt = function (e3) {
        return e3 ? e3.instance ? e3.instance : ((a3 = "svg" == e3.nodeName ? e3.parentNode instanceof t2.SVGElement ? new i2.Nested() : new i2.Doc() : "linearGradient" == e3.nodeName ? new i2.Gradient("linear") : "radialGradient" == e3.nodeName ? new i2.Gradient("radial") : i2[c2(e3.nodeName)] ? new i2[c2(e3.nodeName)]() : new i2.Element(e3)).type = e3.nodeName, a3.node = e3, e3.instance = a3, a3 instanceof i2.Doc && a3.namespace().defs(), a3.setData(JSON.parse(e3.getAttribute("svgjs:data")) || {}), a3) : null;
        var a3;
      }, i2.prepare = function () {
        var t3 = e2.getElementsByTagName("body")[0],
          a3 = (t3 ? new i2.Doc(t3) : i2.adopt(e2.documentElement).nested()).size(2, 0);
        i2.parser = {
          body: t3 || e2.documentElement,
          draw: a3.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
          poly: a3.polyline().node,
          path: a3.path().node,
          native: i2.create("svg")
        };
      }, i2.parser = {
        native: i2.create("svg")
      }, e2.addEventListener("DOMContentLoaded", function () {
        i2.parser.draw || i2.prepare();
      }, false), i2.regex = {
        numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
        hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
        rgb: /rgb\((\d+),(\d+),(\d+)\)/,
        reference: /#([a-z0-9\-_]+)/i,
        transforms: /\)\s*,?\s*/,
        whitespace: /\s/g,
        isHex: /^#[a-f0-9]{3,6}$/i,
        isRgb: /^rgb\(/,
        isCss: /[^:]+:[^;]+;?/,
        isBlank: /^(\s+)?$/,
        isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        isPercent: /^-?[\d\.]+%$/,
        isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
        delimiter: /[\s,]+/,
        hyphen: /([^e])\-/gi,
        pathLetters: /[MLHVCSQTAZ]/gi,
        isPathLetter: /[MLHVCSQTAZ]/i,
        numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
        dots: /\./g
      }, i2.utils = {
        map: function (t3, e3) {
          for (var i3 = t3.length, a3 = [], s3 = 0; s3 < i3; s3++) a3.push(e3(t3[s3]));
          return a3;
        },
        filter: function (t3, e3) {
          for (var i3 = t3.length, a3 = [], s3 = 0; s3 < i3; s3++) e3(t3[s3]) && a3.push(t3[s3]);
          return a3;
        },
        filterSVGElements: function (e3) {
          return this.filter(e3, function (e4) {
            return e4 instanceof t2.SVGElement;
          });
        }
      }, i2.defaults = {
        attrs: {
          "fill-opacity": 1,
          "stroke-opacity": 1,
          "stroke-width": 0,
          "stroke-linejoin": "miter",
          "stroke-linecap": "butt",
          fill: "#000000",
          stroke: "#000000",
          opacity: 1,
          x: 0,
          y: 0,
          cx: 0,
          cy: 0,
          width: 0,
          height: 0,
          r: 0,
          rx: 0,
          ry: 0,
          offset: 0,
          "stop-opacity": 1,
          "stop-color": "#000000",
          "font-size": 16,
          "font-family": "Helvetica, Arial, sans-serif",
          "text-anchor": "start"
        }
      }, i2.Color = function (t3) {
        var e3, a3;
        this.r = 0, this.g = 0, this.b = 0, t3 && ("string" == typeof t3 ? i2.regex.isRgb.test(t3) ? (e3 = i2.regex.rgb.exec(t3.replace(i2.regex.whitespace, "")), this.r = parseInt(e3[1]), this.g = parseInt(e3[2]), this.b = parseInt(e3[3])) : i2.regex.isHex.test(t3) && (e3 = i2.regex.hex.exec(4 == (a3 = t3).length ? ["#", a3.substring(1, 2), a3.substring(1, 2), a3.substring(2, 3), a3.substring(2, 3), a3.substring(3, 4), a3.substring(3, 4)].join("") : a3), this.r = parseInt(e3[1], 16), this.g = parseInt(e3[2], 16), this.b = parseInt(e3[3], 16)) : "object" === b(t3) && (this.r = t3.r, this.g = t3.g, this.b = t3.b));
      }, i2.extend(i2.Color, {
        toString: function () {
          return this.toHex();
        },
        toHex: function () {
          return "#" + d2(this.r) + d2(this.g) + d2(this.b);
        },
        toRgb: function () {
          return "rgb(" + [this.r, this.g, this.b].join() + ")";
        },
        brightness: function () {
          return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
        },
        morph: function (t3) {
          return this.destination = new i2.Color(t3), this;
        },
        at: function (t3) {
          return this.destination ? (t3 = t3 < 0 ? 0 : t3 > 1 ? 1 : t3, new i2.Color({
            r: ~~(this.r + (this.destination.r - this.r) * t3),
            g: ~~(this.g + (this.destination.g - this.g) * t3),
            b: ~~(this.b + (this.destination.b - this.b) * t3)
          })) : this;
        }
      }), i2.Color.test = function (t3) {
        return t3 += "", i2.regex.isHex.test(t3) || i2.regex.isRgb.test(t3);
      }, i2.Color.isRgb = function (t3) {
        return t3 && "number" == typeof t3.r && "number" == typeof t3.g && "number" == typeof t3.b;
      }, i2.Color.isColor = function (t3) {
        return i2.Color.isRgb(t3) || i2.Color.test(t3);
      }, i2.Array = function (t3, e3) {
        0 == (t3 = (t3 || []).valueOf()).length && e3 && (t3 = e3.valueOf()), this.value = this.parse(t3);
      }, i2.extend(i2.Array, {
        toString: function () {
          return this.value.join(" ");
        },
        valueOf: function () {
          return this.value;
        },
        parse: function (t3) {
          return t3 = t3.valueOf(), Array.isArray(t3) ? t3 : this.split(t3);
        }
      }), i2.PointArray = function (t3, e3) {
        i2.Array.call(this, t3, e3 || [[0, 0]]);
      }, i2.PointArray.prototype = new i2.Array(), i2.PointArray.prototype.constructor = i2.PointArray;
      for (var a2 = {
          M: function (t3, e3, i3) {
            return e3.x = i3.x = t3[0], e3.y = i3.y = t3[1], ["M", e3.x, e3.y];
          },
          L: function (t3, e3) {
            return e3.x = t3[0], e3.y = t3[1], ["L", t3[0], t3[1]];
          },
          H: function (t3, e3) {
            return e3.x = t3[0], ["H", t3[0]];
          },
          V: function (t3, e3) {
            return e3.y = t3[0], ["V", t3[0]];
          },
          C: function (t3, e3) {
            return e3.x = t3[4], e3.y = t3[5], ["C", t3[0], t3[1], t3[2], t3[3], t3[4], t3[5]];
          },
          Q: function (t3, e3) {
            return e3.x = t3[2], e3.y = t3[3], ["Q", t3[0], t3[1], t3[2], t3[3]];
          },
          S: function (t3, e3) {
            return e3.x = t3[2], e3.y = t3[3], ["S", t3[0], t3[1], t3[2], t3[3]];
          },
          Z: function (t3, e3, i3) {
            return e3.x = i3.x, e3.y = i3.y, ["Z"];
          }
        }, s2 = "mlhvqtcsaz".split(""), r2 = 0, o2 = s2.length; r2 < o2; ++r2) a2[s2[r2]] = function (t3) {
        return function (e3, i3, s3) {
          if ("H" == t3) e3[0] = e3[0] + i3.x;else if ("V" == t3) e3[0] = e3[0] + i3.y;else if ("A" == t3) e3[5] = e3[5] + i3.x, e3[6] = e3[6] + i3.y;else for (var r3 = 0, o3 = e3.length; r3 < o3; ++r3) e3[r3] = e3[r3] + (r3 % 2 ? i3.y : i3.x);
          if (a2 && "function" == typeof a2[t3]) return a2[t3](e3, i3, s3);
        };
      }(s2[r2].toUpperCase());
      i2.PathArray = function (t3, e3) {
        i2.Array.call(this, t3, e3 || [["M", 0, 0]]);
      }, i2.PathArray.prototype = new i2.Array(), i2.PathArray.prototype.constructor = i2.PathArray, i2.extend(i2.PathArray, {
        toString: function () {
          return function (t3) {
            for (var e3 = 0, i3 = t3.length, a3 = ""; e3 < i3; e3++) a3 += t3[e3][0], null != t3[e3][1] && (a3 += t3[e3][1], null != t3[e3][2] && (a3 += " ", a3 += t3[e3][2], null != t3[e3][3] && (a3 += " ", a3 += t3[e3][3], a3 += " ", a3 += t3[e3][4], null != t3[e3][5] && (a3 += " ", a3 += t3[e3][5], a3 += " ", a3 += t3[e3][6], null != t3[e3][7] && (a3 += " ", a3 += t3[e3][7])))));
            return a3 + " ";
          }(this.value);
        },
        move: function (t3, e3) {
          var i3 = this.bbox();
          return i3.x, i3.y, this;
        },
        at: function (t3) {
          if (!this.destination) return this;
          for (var e3 = this.value, a3 = this.destination.value, s3 = [], r3 = new i2.PathArray(), o3 = 0, n3 = e3.length; o3 < n3; o3++) {
            s3[o3] = [e3[o3][0]];
            for (var l3 = 1, h3 = e3[o3].length; l3 < h3; l3++) s3[o3][l3] = e3[o3][l3] + (a3[o3][l3] - e3[o3][l3]) * t3;
            "A" === s3[o3][0] && (s3[o3][4] = +(0 != s3[o3][4]), s3[o3][5] = +(0 != s3[o3][5]));
          }
          return r3.value = s3, r3;
        },
        parse: function (t3) {
          if (t3 instanceof i2.PathArray) return t3.valueOf();
          var e3,
            s3 = {
              M: 2,
              L: 2,
              H: 1,
              V: 1,
              C: 6,
              S: 4,
              Q: 4,
              T: 2,
              A: 7,
              Z: 0
            };
          t3 = "string" == typeof t3 ? t3.replace(i2.regex.numbersWithDots, l2).replace(i2.regex.pathLetters, " $& ").replace(i2.regex.hyphen, "$1 -").trim().split(i2.regex.delimiter) : t3.reduce(function (t4, e4) {
            return [].concat.call(t4, e4);
          }, []);
          var r3 = [],
            o3 = new i2.Point(),
            n3 = new i2.Point(),
            h3 = 0,
            c3 = t3.length;
          do {
            i2.regex.isPathLetter.test(t3[h3]) ? (e3 = t3[h3], ++h3) : "M" == e3 ? e3 = "L" : "m" == e3 && (e3 = "l"), r3.push(a2[e3].call(null, t3.slice(h3, h3 += s3[e3.toUpperCase()]).map(parseFloat), o3, n3));
          } while (c3 > h3);
          return r3;
        },
        bbox: function () {
          return i2.parser.draw || i2.prepare(), i2.parser.path.setAttribute("d", this.toString()), i2.parser.path.getBBox();
        }
      }), i2.Number = i2.invent({
        create: function (t3, e3) {
          this.value = 0, this.unit = e3 || "", "number" == typeof t3 ? this.value = isNaN(t3) ? 0 : isFinite(t3) ? t3 : t3 < 0 ? -34e37 : 34e37 : "string" == typeof t3 ? (e3 = t3.match(i2.regex.numberAndUnit)) && (this.value = parseFloat(e3[1]), "%" == e3[5] ? this.value /= 100 : "s" == e3[5] && (this.value *= 1e3), this.unit = e3[5]) : t3 instanceof i2.Number && (this.value = t3.valueOf(), this.unit = t3.unit);
        },
        extend: {
          toString: function () {
            return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
          },
          toJSON: function () {
            return this.toString();
          },
          valueOf: function () {
            return this.value;
          },
          plus: function (t3) {
            return t3 = new i2.Number(t3), new i2.Number(this + t3, this.unit || t3.unit);
          },
          minus: function (t3) {
            return t3 = new i2.Number(t3), new i2.Number(this - t3, this.unit || t3.unit);
          },
          times: function (t3) {
            return t3 = new i2.Number(t3), new i2.Number(this * t3, this.unit || t3.unit);
          },
          divide: function (t3) {
            return t3 = new i2.Number(t3), new i2.Number(this / t3, this.unit || t3.unit);
          },
          to: function (t3) {
            var e3 = new i2.Number(this);
            return "string" == typeof t3 && (e3.unit = t3), e3;
          },
          morph: function (t3) {
            return this.destination = new i2.Number(t3), t3.relative && (this.destination.value += this.value), this;
          },
          at: function (t3) {
            return this.destination ? new i2.Number(this.destination).minus(this).times(t3).plus(this) : this;
          }
        }
      }), i2.Element = i2.invent({
        create: function (t3) {
          this._stroke = i2.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t3) && (this.type = t3.nodeName, this.node.instance = this, this._stroke = t3.getAttribute("stroke") || this._stroke);
        },
        extend: {
          x: function (t3) {
            return this.attr("x", t3);
          },
          y: function (t3) {
            return this.attr("y", t3);
          },
          cx: function (t3) {
            return null == t3 ? this.x() + this.width() / 2 : this.x(t3 - this.width() / 2);
          },
          cy: function (t3) {
            return null == t3 ? this.y() + this.height() / 2 : this.y(t3 - this.height() / 2);
          },
          move: function (t3, e3) {
            return this.x(t3).y(e3);
          },
          center: function (t3, e3) {
            return this.cx(t3).cy(e3);
          },
          width: function (t3) {
            return this.attr("width", t3);
          },
          height: function (t3) {
            return this.attr("height", t3);
          },
          size: function (t3, e3) {
            var a3 = g2(this, t3, e3);
            return this.width(new i2.Number(a3.width)).height(new i2.Number(a3.height));
          },
          clone: function (t3) {
            this.writeDataToDom();
            var e3 = p2(this.node.cloneNode(true));
            return t3 ? t3.add(e3) : this.after(e3), e3;
          },
          remove: function () {
            return this.parent() && this.parent().removeElement(this), this;
          },
          replace: function (t3) {
            return this.after(t3).remove(), t3;
          },
          addTo: function (t3) {
            return t3.put(this);
          },
          putIn: function (t3) {
            return t3.add(this);
          },
          id: function (t3) {
            return this.attr("id", t3);
          },
          show: function () {
            return this.style("display", "");
          },
          hide: function () {
            return this.style("display", "none");
          },
          visible: function () {
            return "none" != this.style("display");
          },
          toString: function () {
            return this.attr("id");
          },
          classes: function () {
            var t3 = this.attr("class");
            return null == t3 ? [] : t3.trim().split(i2.regex.delimiter);
          },
          hasClass: function (t3) {
            return -1 != this.classes().indexOf(t3);
          },
          addClass: function (t3) {
            if (!this.hasClass(t3)) {
              var e3 = this.classes();
              e3.push(t3), this.attr("class", e3.join(" "));
            }
            return this;
          },
          removeClass: function (t3) {
            return this.hasClass(t3) && this.attr("class", this.classes().filter(function (e3) {
              return e3 != t3;
            }).join(" ")), this;
          },
          toggleClass: function (t3) {
            return this.hasClass(t3) ? this.removeClass(t3) : this.addClass(t3);
          },
          reference: function (t3) {
            return i2.get(this.attr(t3));
          },
          parent: function (e3) {
            var a3 = this;
            if (!a3.node.parentNode) return null;
            if (a3 = i2.adopt(a3.node.parentNode), !e3) return a3;
            for (; a3 && a3.node instanceof t2.SVGElement;) {
              if ("string" == typeof e3 ? a3.matches(e3) : a3 instanceof e3) return a3;
              if (!a3.node.parentNode || "#document" == a3.node.parentNode.nodeName) return null;
              a3 = i2.adopt(a3.node.parentNode);
            }
          },
          doc: function () {
            return this instanceof i2.Doc ? this : this.parent(i2.Doc);
          },
          parents: function (t3) {
            var e3 = [],
              i3 = this;
            do {
              if (!(i3 = i3.parent(t3)) || !i3.node) break;
              e3.push(i3);
            } while (i3.parent);
            return e3;
          },
          matches: function (t3) {
            return function (t4, e3) {
              return (t4.matches || t4.matchesSelector || t4.msMatchesSelector || t4.mozMatchesSelector || t4.webkitMatchesSelector || t4.oMatchesSelector).call(t4, e3);
            }(this.node, t3);
          },
          native: function () {
            return this.node;
          },
          svg: function (t3) {
            var a3 = e2.createElementNS("http://www.w3.org/2000/svg", "svg");
            if (!(t3 && this instanceof i2.Parent)) return a3.appendChild(t3 = e2.createElementNS("http://www.w3.org/2000/svg", "svg")), this.writeDataToDom(), t3.appendChild(this.node.cloneNode(true)), a3.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
            a3.innerHTML = "<svg>" + t3.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
            for (var s3 = 0, r3 = a3.firstChild.childNodes.length; s3 < r3; s3++) this.node.appendChild(a3.firstChild.firstChild);
            return this;
          },
          writeDataToDom: function () {
            return (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {
              this.writeDataToDom();
            }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
          },
          setData: function (t3) {
            return this.dom = t3, this;
          },
          is: function (t3) {
            return function (t4, e3) {
              return t4 instanceof e3;
            }(this, t3);
          }
        }
      }), i2.easing = {
        "-": function (t3) {
          return t3;
        },
        "<>": function (t3) {
          return -Math.cos(t3 * Math.PI) / 2 + 0.5;
        },
        ">": function (t3) {
          return Math.sin(t3 * Math.PI / 2);
        },
        "<": function (t3) {
          return 1 - Math.cos(t3 * Math.PI / 2);
        }
      }, i2.morph = function (t3) {
        return function (e3, a3) {
          return new i2.MorphObj(e3, a3).at(t3);
        };
      }, i2.Situation = i2.invent({
        create: function (t3) {
          this.init = false, this.reversed = false, this.reversing = false, this.duration = new i2.Number(t3.duration).valueOf(), this.delay = new i2.Number(t3.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t3.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
        }
      }), i2.FX = i2.invent({
        create: function (t3) {
          this._target = t3, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
        },
        extend: {
          animate: function (t3, e3, a3) {
            "object" === b(t3) && (e3 = t3.ease, a3 = t3.delay, t3 = t3.duration);
            var s3 = new i2.Situation({
              duration: t3 || 1e3,
              delay: a3 || 0,
              ease: i2.easing[e3 || "-"] || e3
            });
            return this.queue(s3), this;
          },
          target: function (t3) {
            return t3 && t3 instanceof i2.Element ? (this._target = t3, this) : this._target;
          },
          timeToAbsPos: function (t3) {
            return (t3 - this.situation.start) / (this.situation.duration / this._speed);
          },
          absPosToTime: function (t3) {
            return this.situation.duration / this._speed * t3 + this.situation.start;
          },
          startAnimFrame: function () {
            this.stopAnimFrame(), this.animationFrame = t2.requestAnimationFrame(function () {
              this.step();
            }.bind(this));
          },
          stopAnimFrame: function () {
            t2.cancelAnimationFrame(this.animationFrame);
          },
          start: function () {
            return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
          },
          startCurrent: function () {
            return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
          },
          queue: function (t3) {
            return ("function" == typeof t3 || t3 instanceof i2.Situation) && this.situations.push(t3), this.situation || (this.situation = this.situations.shift()), this;
          },
          dequeue: function () {
            return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof i2.Situation ? this.start() : this.situation.call(this)), this;
          },
          initAnimations: function () {
            var t3,
              e3 = this.situation;
            if (e3.init) return this;
            for (var a3 in e3.animations) {
              t3 = this.target()[a3](), Array.isArray(t3) || (t3 = [t3]), Array.isArray(e3.animations[a3]) || (e3.animations[a3] = [e3.animations[a3]]);
              for (var s3 = t3.length; s3--;) e3.animations[a3][s3] instanceof i2.Number && (t3[s3] = new i2.Number(t3[s3])), e3.animations[a3][s3] = t3[s3].morph(e3.animations[a3][s3]);
            }
            for (var a3 in e3.attrs) e3.attrs[a3] = new i2.MorphObj(this.target().attr(a3), e3.attrs[a3]);
            for (var a3 in e3.styles) e3.styles[a3] = new i2.MorphObj(this.target().style(a3), e3.styles[a3]);
            return e3.initialTransformation = this.target().matrixify(), e3.init = true, this;
          },
          clearQueue: function () {
            return this.situations = [], this;
          },
          clearCurrent: function () {
            return this.situation = null, this;
          },
          stop: function (t3, e3) {
            var i3 = this.active;
            return this.active = false, e3 && this.clearQueue(), t3 && this.situation && (!i3 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
          },
          after: function (t3) {
            var e3 = this.last();
            return this.target().on("finished.fx", function i3(a3) {
              a3.detail.situation == e3 && (t3.call(this, e3), this.off("finished.fx", i3));
            }), this._callStart();
          },
          during: function (t3) {
            var e3 = this.last(),
              a3 = function (a4) {
                a4.detail.situation == e3 && t3.call(this, a4.detail.pos, i2.morph(a4.detail.pos), a4.detail.eased, e3);
              };
            return this.target().off("during.fx", a3).on("during.fx", a3), this.after(function () {
              this.off("during.fx", a3);
            }), this._callStart();
          },
          afterAll: function (t3) {
            var e3 = function e4(i3) {
              t3.call(this), this.off("allfinished.fx", e4);
            };
            return this.target().off("allfinished.fx", e3).on("allfinished.fx", e3), this._callStart();
          },
          last: function () {
            return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
          },
          add: function (t3, e3, i3) {
            return this.last()[i3 || "animations"][t3] = e3, this._callStart();
          },
          step: function (t3) {
            var e3, i3, a3;
            t3 || (this.absPos = this.timeToAbsPos(+new Date())), false !== this.situation.loops ? (e3 = Math.max(this.absPos, 0), i3 = Math.floor(e3), true === this.situation.loops || i3 < this.situation.loops ? (this.pos = e3 - i3, a3 = this.situation.loop, this.situation.loop = i3) : (this.absPos = this.situation.loops, this.pos = 1, a3 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a3) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
            var s3 = this.situation.ease(this.pos);
            for (var r3 in this.situation.once) r3 > this.lastPos && r3 <= s3 && (this.situation.once[r3].call(this.target(), this.pos, s3), delete this.situation.once[r3]);
            return this.active && this.target().fire("during", {
              pos: this.pos,
              eased: s3,
              fx: this,
              situation: this.situation
            }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
              fx: this,
              situation: this.situation
            }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s3, this) : this;
          },
          eachAt: function () {
            var t3,
              e3 = this,
              a3 = this.target(),
              s3 = this.situation;
            for (var r3 in s3.animations) t3 = [].concat(s3.animations[r3]).map(function (t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), a3[r3].apply(a3, t3);
            for (var r3 in s3.attrs) t3 = [r3].concat(s3.attrs[r3]).map(function (t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), a3.attr.apply(a3, t3);
            for (var r3 in s3.styles) t3 = [r3].concat(s3.styles[r3]).map(function (t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), a3.style.apply(a3, t3);
            if (s3.transforms.length) {
              t3 = s3.initialTransformation, r3 = 0;
              for (var o3 = s3.transforms.length; r3 < o3; r3++) {
                var n3 = s3.transforms[r3];
                n3 instanceof i2.Matrix ? t3 = n3.relative ? t3.multiply(new i2.Matrix().morph(n3).at(s3.ease(this.pos))) : t3.morph(n3).at(s3.ease(this.pos)) : (n3.relative || n3.undo(t3.extract()), t3 = t3.multiply(n3.at(s3.ease(this.pos))));
              }
              a3.matrix(t3);
            }
            return this;
          },
          once: function (t3, e3, i3) {
            var a3 = this.last();
            return i3 || (t3 = a3.ease(t3)), a3.once[t3] = e3, this;
          },
          _callStart: function () {
            return setTimeout(function () {
              this.start();
            }.bind(this), 0), this;
          }
        },
        parent: i2.Element,
        construct: {
          animate: function (t3, e3, a3) {
            return (this.fx || (this.fx = new i2.FX(this))).animate(t3, e3, a3);
          },
          delay: function (t3) {
            return (this.fx || (this.fx = new i2.FX(this))).delay(t3);
          },
          stop: function (t3, e3) {
            return this.fx && this.fx.stop(t3, e3), this;
          },
          finish: function () {
            return this.fx && this.fx.finish(), this;
          }
        }
      }), i2.MorphObj = i2.invent({
        create: function (t3, e3) {
          return i2.Color.isColor(e3) ? new i2.Color(t3).morph(e3) : i2.regex.delimiter.test(t3) ? i2.regex.pathLetters.test(t3) ? new i2.PathArray(t3).morph(e3) : new i2.Array(t3).morph(e3) : i2.regex.numberAndUnit.test(e3) ? new i2.Number(t3).morph(e3) : (this.value = t3, void (this.destination = e3));
        },
        extend: {
          at: function (t3, e3) {
            return e3 < 1 ? this.value : this.destination;
          },
          valueOf: function () {
            return this.value;
          }
        }
      }), i2.extend(i2.FX, {
        attr: function (t3, e3, i3) {
          if ("object" === b(t3)) for (var a3 in t3) this.attr(a3, t3[a3]);else this.add(t3, e3, "attrs");
          return this;
        },
        plot: function (t3, e3, i3, a3) {
          return 4 == arguments.length ? this.plot([t3, e3, i3, a3]) : this.add("plot", new (this.target().morphArray)(t3));
        }
      }), i2.Box = i2.invent({
        create: function (t3, e3, a3, s3) {
          if (!("object" !== b(t3) || t3 instanceof i2.Element)) return i2.Box.call(this, null != t3.left ? t3.left : t3.x, null != t3.top ? t3.top : t3.y, t3.width, t3.height);
          var r3;
          4 == arguments.length && (this.x = t3, this.y = e3, this.width = a3, this.height = s3), null == (r3 = this).x && (r3.x = 0, r3.y = 0, r3.width = 0, r3.height = 0), r3.w = r3.width, r3.h = r3.height, r3.x2 = r3.x + r3.width, r3.y2 = r3.y + r3.height, r3.cx = r3.x + r3.width / 2, r3.cy = r3.y + r3.height / 2;
        }
      }), i2.BBox = i2.invent({
        create: function (t3) {
          if (i2.Box.apply(this, [].slice.call(arguments)), t3 instanceof i2.Element) {
            var a3;
            try {
              if (!e2.documentElement.contains) {
                for (var s3 = t3.node; s3.parentNode;) s3 = s3.parentNode;
                if (s3 != e2) throw new Error("Element not in the dom");
              }
              a3 = t3.node.getBBox();
            } catch (e3) {
              if (t3 instanceof i2.Shape) {
                i2.parser.draw || i2.prepare();
                var r3 = t3.clone(i2.parser.draw.instance).show();
                r3 && r3.node && "function" == typeof r3.node.getBBox && (a3 = r3.node.getBBox()), r3 && "function" == typeof r3.remove && r3.remove();
              } else a3 = {
                x: t3.node.clientLeft,
                y: t3.node.clientTop,
                width: t3.node.clientWidth,
                height: t3.node.clientHeight
              };
            }
            i2.Box.call(this, a3);
          }
        },
        inherit: i2.Box,
        parent: i2.Element,
        construct: {
          bbox: function () {
            return new i2.BBox(this);
          }
        }
      }), i2.BBox.prototype.constructor = i2.BBox, i2.Matrix = i2.invent({
        create: function (t3) {
          var e3 = f2([1, 0, 0, 1, 0, 0]);
          t3 = null === t3 ? e3 : t3 instanceof i2.Element ? t3.matrixify() : "string" == typeof t3 ? f2(t3.split(i2.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f2([].slice.call(arguments)) : Array.isArray(t3) ? f2(t3) : t3 && "object" === b(t3) ? t3 : e3;
          for (var a3 = v2.length - 1; a3 >= 0; --a3) this[v2[a3]] = null != t3[v2[a3]] ? t3[v2[a3]] : e3[v2[a3]];
        },
        extend: {
          extract: function () {
            var t3 = u2(this, 0, 1);
            u2(this, 1, 0);
            var e3 = 180 / Math.PI * Math.atan2(t3.y, t3.x) - 90;
            return {
              x: this.e,
              y: this.f,
              transformedX: (this.e * Math.cos(e3 * Math.PI / 180) + this.f * Math.sin(e3 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
              transformedY: (this.f * Math.cos(e3 * Math.PI / 180) + this.e * Math.sin(-e3 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
              rotation: e3,
              a: this.a,
              b: this.b,
              c: this.c,
              d: this.d,
              e: this.e,
              f: this.f,
              matrix: new i2.Matrix(this)
            };
          },
          clone: function () {
            return new i2.Matrix(this);
          },
          morph: function (t3) {
            return this.destination = new i2.Matrix(t3), this;
          },
          multiply: function (t3) {
            return new i2.Matrix(this.native().multiply(function (t4) {
              return t4 instanceof i2.Matrix || (t4 = new i2.Matrix(t4)), t4;
            }(t3).native()));
          },
          inverse: function () {
            return new i2.Matrix(this.native().inverse());
          },
          translate: function (t3, e3) {
            return new i2.Matrix(this.native().translate(t3 || 0, e3 || 0));
          },
          native: function () {
            for (var t3 = i2.parser.native.createSVGMatrix(), e3 = v2.length - 1; e3 >= 0; e3--) t3[v2[e3]] = this[v2[e3]];
            return t3;
          },
          toString: function () {
            return "matrix(" + x2(this.a) + "," + x2(this.b) + "," + x2(this.c) + "," + x2(this.d) + "," + x2(this.e) + "," + x2(this.f) + ")";
          }
        },
        parent: i2.Element,
        construct: {
          ctm: function () {
            return new i2.Matrix(this.node.getCTM());
          },
          screenCTM: function () {
            if (this instanceof i2.Nested) {
              var t3 = this.rect(1, 1),
                e3 = t3.node.getScreenCTM();
              return t3.remove(), new i2.Matrix(e3);
            }
            return new i2.Matrix(this.node.getScreenCTM());
          }
        }
      }), i2.Point = i2.invent({
        create: function (t3, e3) {
          var i3;
          i3 = Array.isArray(t3) ? {
            x: t3[0],
            y: t3[1]
          } : "object" === b(t3) ? {
            x: t3.x,
            y: t3.y
          } : null != t3 ? {
            x: t3,
            y: null != e3 ? e3 : t3
          } : {
            x: 0,
            y: 0
          }, this.x = i3.x, this.y = i3.y;
        },
        extend: {
          clone: function () {
            return new i2.Point(this);
          },
          morph: function (t3, e3) {
            return this.destination = new i2.Point(t3, e3), this;
          }
        }
      }), i2.extend(i2.Element, {
        point: function (t3, e3) {
          return new i2.Point(t3, e3).transform(this.screenCTM().inverse());
        }
      }), i2.extend(i2.Element, {
        attr: function (t3, e3, a3) {
          if (null == t3) {
            for (t3 = {}, a3 = (e3 = this.node.attributes).length - 1; a3 >= 0; a3--) t3[e3[a3].nodeName] = i2.regex.isNumber.test(e3[a3].nodeValue) ? parseFloat(e3[a3].nodeValue) : e3[a3].nodeValue;
            return t3;
          }
          if ("object" === b(t3)) for (var s3 in t3) this.attr(s3, t3[s3]);else if (null === e3) this.node.removeAttribute(t3);else {
            if (null == e3) return null == (e3 = this.node.getAttribute(t3)) ? i2.defaults.attrs[t3] : i2.regex.isNumber.test(e3) ? parseFloat(e3) : e3;
            "stroke-width" == t3 ? this.attr("stroke", parseFloat(e3) > 0 ? this._stroke : null) : "stroke" == t3 && (this._stroke = e3), "fill" != t3 && "stroke" != t3 || (i2.regex.isImage.test(e3) && (e3 = this.doc().defs().image(e3, 0, 0)), e3 instanceof i2.Image && (e3 = this.doc().defs().pattern(0, 0, function () {
              this.add(e3);
            }))), "number" == typeof e3 ? e3 = new i2.Number(e3) : i2.Color.isColor(e3) ? e3 = new i2.Color(e3) : Array.isArray(e3) && (e3 = new i2.Array(e3)), "leading" == t3 ? this.leading && this.leading(e3) : "string" == typeof a3 ? this.node.setAttributeNS(a3, t3, e3.toString()) : this.node.setAttribute(t3, e3.toString()), !this.rebuild || "font-size" != t3 && "x" != t3 || this.rebuild(t3, e3);
          }
          return this;
        }
      }), i2.extend(i2.Element, {
        transform: function (t3, e3) {
          var a3;
          return "object" !== b(t3) ? (a3 = new i2.Matrix(this).extract(), "string" == typeof t3 ? a3[t3] : a3) : (a3 = new i2.Matrix(this), e3 = !!e3 || !!t3.relative, null != t3.a && (a3 = e3 ? a3.multiply(new i2.Matrix(t3)) : new i2.Matrix(t3)), this.attr("transform", a3));
        }
      }), i2.extend(i2.Element, {
        untransform: function () {
          return this.attr("transform", null);
        },
        matrixify: function () {
          return (this.attr("transform") || "").split(i2.regex.transforms).slice(0, -1).map(function (t3) {
            var e3 = t3.trim().split("(");
            return [e3[0], e3[1].split(i2.regex.delimiter).map(function (t4) {
              return parseFloat(t4);
            })];
          }).reduce(function (t3, e3) {
            return "matrix" == e3[0] ? t3.multiply(f2(e3[1])) : t3[e3[0]].apply(t3, e3[1]);
          }, new i2.Matrix());
        },
        toParent: function (t3) {
          if (this == t3) return this;
          var e3 = this.screenCTM(),
            i3 = t3.screenCTM().inverse();
          return this.addTo(t3).untransform().transform(i3.multiply(e3)), this;
        },
        toDoc: function () {
          return this.toParent(this.doc());
        }
      }), i2.Transformation = i2.invent({
        create: function (t3, e3) {
          if (arguments.length > 1 && "boolean" != typeof e3) return this.constructor.call(this, [].slice.call(arguments));
          if (Array.isArray(t3)) for (var i3 = 0, a3 = this.arguments.length; i3 < a3; ++i3) this[this.arguments[i3]] = t3[i3];else if (t3 && "object" === b(t3)) for (i3 = 0, a3 = this.arguments.length; i3 < a3; ++i3) this[this.arguments[i3]] = t3[this.arguments[i3]];
          this.inversed = false, true === e3 && (this.inversed = true);
        }
      }), i2.Translate = i2.invent({
        parent: i2.Matrix,
        inherit: i2.Transformation,
        create: function (t3, e3) {
          this.constructor.apply(this, [].slice.call(arguments));
        },
        extend: {
          arguments: ["transformedX", "transformedY"],
          method: "translate"
        }
      }), i2.extend(i2.Element, {
        style: function (t3, e3) {
          if (0 == arguments.length) return this.node.style.cssText || "";
          if (arguments.length < 2) {
            if ("object" === b(t3)) for (var a3 in t3) this.style(a3, t3[a3]);else {
              if (!i2.regex.isCss.test(t3)) return this.node.style[h2(t3)];
              for (t3 = t3.split(/\s*;\s*/).filter(function (t4) {
                return !!t4;
              }).map(function (t4) {
                return t4.split(/\s*:\s*/);
              }); e3 = t3.pop();) this.style(e3[0], e3[1]);
            }
          } else this.node.style[h2(t3)] = null === e3 || i2.regex.isBlank.test(e3) ? "" : e3;
          return this;
        }
      }), i2.Parent = i2.invent({
        create: function (t3) {
          this.constructor.call(this, t3);
        },
        inherit: i2.Element,
        extend: {
          children: function () {
            return i2.utils.map(i2.utils.filterSVGElements(this.node.childNodes), function (t3) {
              return i2.adopt(t3);
            });
          },
          add: function (t3, e3) {
            return null == e3 ? this.node.appendChild(t3.node) : t3.node != this.node.childNodes[e3] && this.node.insertBefore(t3.node, this.node.childNodes[e3]), this;
          },
          put: function (t3, e3) {
            return this.add(t3, e3), t3;
          },
          has: function (t3) {
            return this.index(t3) >= 0;
          },
          index: function (t3) {
            return [].slice.call(this.node.childNodes).indexOf(t3.node);
          },
          get: function (t3) {
            return i2.adopt(this.node.childNodes[t3]);
          },
          first: function () {
            return this.get(0);
          },
          last: function () {
            return this.get(this.node.childNodes.length - 1);
          },
          each: function (t3, e3) {
            for (var a3 = this.children(), s3 = 0, r3 = a3.length; s3 < r3; s3++) a3[s3] instanceof i2.Element && t3.apply(a3[s3], [s3, a3]), e3 && a3[s3] instanceof i2.Container && a3[s3].each(t3, e3);
            return this;
          },
          removeElement: function (t3) {
            return this.node.removeChild(t3.node), this;
          },
          clear: function () {
            for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);
            return delete this._defs, this;
          },
          defs: function () {
            return this.doc().defs();
          }
        }
      }), i2.extend(i2.Parent, {
        ungroup: function (t3, e3) {
          return 0 === e3 || this instanceof i2.Defs || this.node == i2.parser.draw || (t3 = t3 || (this instanceof i2.Doc ? this : this.parent(i2.Parent)), e3 = e3 || 1 / 0, this.each(function () {
            return this instanceof i2.Defs ? this : this instanceof i2.Parent ? this.ungroup(t3, e3 - 1) : this.toParent(t3);
          }), this.node.firstChild || this.remove()), this;
        },
        flatten: function (t3, e3) {
          return this.ungroup(t3, e3);
        }
      }), i2.Container = i2.invent({
        create: function (t3) {
          this.constructor.call(this, t3);
        },
        inherit: i2.Parent
      }), i2.ViewBox = i2.invent({
        parent: i2.Container,
        construct: {}
      }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function (t3) {
        i2.Element.prototype[t3] = function (e3) {
          return i2.on(this.node, t3, e3), this;
        };
      }), i2.listeners = [], i2.handlerMap = [], i2.listenerId = 0, i2.on = function (t3, e3, a3, s3, r3) {
        var o3 = a3.bind(s3 || t3.instance || t3),
          n3 = (i2.handlerMap.indexOf(t3) + 1 || i2.handlerMap.push(t3)) - 1,
          l3 = e3.split(".")[0],
          h3 = e3.split(".")[1] || "*";
        i2.listeners[n3] = i2.listeners[n3] || {}, i2.listeners[n3][l3] = i2.listeners[n3][l3] || {}, i2.listeners[n3][l3][h3] = i2.listeners[n3][l3][h3] || {}, a3._svgjsListenerId || (a3._svgjsListenerId = ++i2.listenerId), i2.listeners[n3][l3][h3][a3._svgjsListenerId] = o3, t3.addEventListener(l3, o3, r3 || {
          passive: false
        });
      }, i2.off = function (t3, e3, a3) {
        var s3 = i2.handlerMap.indexOf(t3),
          r3 = e3 && e3.split(".")[0],
          o3 = e3 && e3.split(".")[1],
          n3 = "";
        if (-1 != s3) if (a3) {
          if ("function" == typeof a3 && (a3 = a3._svgjsListenerId), !a3) return;
          i2.listeners[s3][r3] && i2.listeners[s3][r3][o3 || "*"] && (t3.removeEventListener(r3, i2.listeners[s3][r3][o3 || "*"][a3], false), delete i2.listeners[s3][r3][o3 || "*"][a3]);
        } else if (o3 && r3) {
          if (i2.listeners[s3][r3] && i2.listeners[s3][r3][o3]) {
            for (var l3 in i2.listeners[s3][r3][o3]) i2.off(t3, [r3, o3].join("."), l3);
            delete i2.listeners[s3][r3][o3];
          }
        } else if (o3) for (var h3 in i2.listeners[s3]) for (var n3 in i2.listeners[s3][h3]) o3 === n3 && i2.off(t3, [h3, o3].join("."));else if (r3) {
          if (i2.listeners[s3][r3]) {
            for (var n3 in i2.listeners[s3][r3]) i2.off(t3, [r3, n3].join("."));
            delete i2.listeners[s3][r3];
          }
        } else {
          for (var h3 in i2.listeners[s3]) i2.off(t3, h3);
          delete i2.listeners[s3], delete i2.handlerMap[s3];
        }
      }, i2.extend(i2.Element, {
        on: function (t3, e3, a3, s3) {
          return i2.on(this.node, t3, e3, a3, s3), this;
        },
        off: function (t3, e3) {
          return i2.off(this.node, t3, e3), this;
        },
        fire: function (e3, a3) {
          return e3 instanceof t2.Event ? this.node.dispatchEvent(e3) : this.node.dispatchEvent(e3 = new i2.CustomEvent(e3, {
            detail: a3,
            cancelable: true
          })), this._event = e3, this;
        },
        event: function () {
          return this._event;
        }
      }), i2.Defs = i2.invent({
        create: "defs",
        inherit: i2.Container
      }), i2.G = i2.invent({
        create: "g",
        inherit: i2.Container,
        extend: {
          x: function (t3) {
            return null == t3 ? this.transform("x") : this.transform({
              x: t3 - this.x()
            }, true);
          }
        },
        construct: {
          group: function () {
            return this.put(new i2.G());
          }
        }
      }), i2.Doc = i2.invent({
        create: function (t3) {
          t3 && ("svg" == (t3 = "string" == typeof t3 ? e2.getElementById(t3) : t3).nodeName ? this.constructor.call(this, t3) : (this.constructor.call(this, i2.create("svg")), t3.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
        },
        inherit: i2.Container,
        extend: {
          namespace: function () {
            return this.attr({
              xmlns: i2.ns,
              version: "1.1"
            }).attr("xmlns:xlink", i2.xlink, i2.xmlns).attr("xmlns:svgjs", i2.svgjs, i2.xmlns);
          },
          defs: function () {
            var t3;
            return this._defs || ((t3 = this.node.getElementsByTagName("defs")[0]) ? this._defs = i2.adopt(t3) : this._defs = new i2.Defs(), this.node.appendChild(this._defs.node)), this._defs;
          },
          parent: function () {
            return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
          },
          remove: function () {
            return this.parent() && this.parent().removeChild(this.node), this;
          },
          clear: function () {
            for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);
            return delete this._defs, i2.parser.draw && !i2.parser.draw.parentNode && this.node.appendChild(i2.parser.draw), this;
          },
          clone: function (t3) {
            this.writeDataToDom();
            var e3 = this.node,
              i3 = p2(e3.cloneNode(true));
            return t3 ? (t3.node || t3).appendChild(i3.node) : e3.parentNode.insertBefore(i3.node, e3.nextSibling), i3;
          }
        }
      }), i2.extend(i2.Element, {}), i2.Gradient = i2.invent({
        create: function (t3) {
          this.constructor.call(this, i2.create(t3 + "Gradient")), this.type = t3;
        },
        inherit: i2.Container,
        extend: {
          at: function (t3, e3, a3) {
            return this.put(new i2.Stop()).update(t3, e3, a3);
          },
          update: function (t3) {
            return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
          },
          fill: function () {
            return "url(#" + this.id() + ")";
          },
          toString: function () {
            return this.fill();
          },
          attr: function (t3, e3, a3) {
            return "transform" == t3 && (t3 = "gradientTransform"), i2.Container.prototype.attr.call(this, t3, e3, a3);
          }
        },
        construct: {
          gradient: function (t3, e3) {
            return this.defs().gradient(t3, e3);
          }
        }
      }), i2.extend(i2.Gradient, i2.FX, {
        from: function (t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({
            fx: new i2.Number(t3),
            fy: new i2.Number(e3)
          }) : this.attr({
            x1: new i2.Number(t3),
            y1: new i2.Number(e3)
          });
        },
        to: function (t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({
            cx: new i2.Number(t3),
            cy: new i2.Number(e3)
          }) : this.attr({
            x2: new i2.Number(t3),
            y2: new i2.Number(e3)
          });
        }
      }), i2.extend(i2.Defs, {
        gradient: function (t3, e3) {
          return this.put(new i2.Gradient(t3)).update(e3);
        }
      }), i2.Stop = i2.invent({
        create: "stop",
        inherit: i2.Element,
        extend: {
          update: function (t3) {
            return ("number" == typeof t3 || t3 instanceof i2.Number) && (t3 = {
              offset: arguments[0],
              color: arguments[1],
              opacity: arguments[2]
            }), null != t3.opacity && this.attr("stop-opacity", t3.opacity), null != t3.color && this.attr("stop-color", t3.color), null != t3.offset && this.attr("offset", new i2.Number(t3.offset)), this;
          }
        }
      }), i2.Pattern = i2.invent({
        create: "pattern",
        inherit: i2.Container,
        extend: {
          fill: function () {
            return "url(#" + this.id() + ")";
          },
          update: function (t3) {
            return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
          },
          toString: function () {
            return this.fill();
          },
          attr: function (t3, e3, a3) {
            return "transform" == t3 && (t3 = "patternTransform"), i2.Container.prototype.attr.call(this, t3, e3, a3);
          }
        },
        construct: {
          pattern: function (t3, e3, i3) {
            return this.defs().pattern(t3, e3, i3);
          }
        }
      }), i2.extend(i2.Defs, {
        pattern: function (t3, e3, a3) {
          return this.put(new i2.Pattern()).update(a3).attr({
            x: 0,
            y: 0,
            width: t3,
            height: e3,
            patternUnits: "userSpaceOnUse"
          });
        }
      }), i2.Shape = i2.invent({
        create: function (t3) {
          this.constructor.call(this, t3);
        },
        inherit: i2.Element
      }), i2.Symbol = i2.invent({
        create: "symbol",
        inherit: i2.Container,
        construct: {
          symbol: function () {
            return this.put(new i2.Symbol());
          }
        }
      }), i2.Use = i2.invent({
        create: "use",
        inherit: i2.Shape,
        extend: {
          element: function (t3, e3) {
            return this.attr("href", (e3 || "") + "#" + t3, i2.xlink);
          }
        },
        construct: {
          use: function (t3, e3) {
            return this.put(new i2.Use()).element(t3, e3);
          }
        }
      }), i2.Rect = i2.invent({
        create: "rect",
        inherit: i2.Shape,
        construct: {
          rect: function (t3, e3) {
            return this.put(new i2.Rect()).size(t3, e3);
          }
        }
      }), i2.Circle = i2.invent({
        create: "circle",
        inherit: i2.Shape,
        construct: {
          circle: function (t3) {
            return this.put(new i2.Circle()).rx(new i2.Number(t3).divide(2)).move(0, 0);
          }
        }
      }), i2.extend(i2.Circle, i2.FX, {
        rx: function (t3) {
          return this.attr("r", t3);
        },
        ry: function (t3) {
          return this.rx(t3);
        }
      }), i2.Ellipse = i2.invent({
        create: "ellipse",
        inherit: i2.Shape,
        construct: {
          ellipse: function (t3, e3) {
            return this.put(new i2.Ellipse()).size(t3, e3).move(0, 0);
          }
        }
      }), i2.extend(i2.Ellipse, i2.Rect, i2.FX, {
        rx: function (t3) {
          return this.attr("rx", t3);
        },
        ry: function (t3) {
          return this.attr("ry", t3);
        }
      }), i2.extend(i2.Circle, i2.Ellipse, {
        x: function (t3) {
          return null == t3 ? this.cx() - this.rx() : this.cx(t3 + this.rx());
        },
        y: function (t3) {
          return null == t3 ? this.cy() - this.ry() : this.cy(t3 + this.ry());
        },
        cx: function (t3) {
          return null == t3 ? this.attr("cx") : this.attr("cx", t3);
        },
        cy: function (t3) {
          return null == t3 ? this.attr("cy") : this.attr("cy", t3);
        },
        width: function (t3) {
          return null == t3 ? 2 * this.rx() : this.rx(new i2.Number(t3).divide(2));
        },
        height: function (t3) {
          return null == t3 ? 2 * this.ry() : this.ry(new i2.Number(t3).divide(2));
        },
        size: function (t3, e3) {
          var a3 = g2(this, t3, e3);
          return this.rx(new i2.Number(a3.width).divide(2)).ry(new i2.Number(a3.height).divide(2));
        }
      }), i2.Line = i2.invent({
        create: "line",
        inherit: i2.Shape,
        extend: {
          array: function () {
            return new i2.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
          },
          plot: function (t3, e3, a3, s3) {
            return null == t3 ? this.array() : (t3 = void 0 !== e3 ? {
              x1: t3,
              y1: e3,
              x2: a3,
              y2: s3
            } : new i2.PointArray(t3).toLine(), this.attr(t3));
          },
          move: function (t3, e3) {
            return this.attr(this.array().move(t3, e3).toLine());
          },
          size: function (t3, e3) {
            var i3 = g2(this, t3, e3);
            return this.attr(this.array().size(i3.width, i3.height).toLine());
          }
        },
        construct: {
          line: function (t3, e3, a3, s3) {
            return i2.Line.prototype.plot.apply(this.put(new i2.Line()), null != t3 ? [t3, e3, a3, s3] : [0, 0, 0, 0]);
          }
        }
      }), i2.Polyline = i2.invent({
        create: "polyline",
        inherit: i2.Shape,
        construct: {
          polyline: function (t3) {
            return this.put(new i2.Polyline()).plot(t3 || new i2.PointArray());
          }
        }
      }), i2.Polygon = i2.invent({
        create: "polygon",
        inherit: i2.Shape,
        construct: {
          polygon: function (t3) {
            return this.put(new i2.Polygon()).plot(t3 || new i2.PointArray());
          }
        }
      }), i2.extend(i2.Polyline, i2.Polygon, {
        array: function () {
          return this._array || (this._array = new i2.PointArray(this.attr("points")));
        },
        plot: function (t3) {
          return null == t3 ? this.array() : this.clear().attr("points", "string" == typeof t3 ? t3 : this._array = new i2.PointArray(t3));
        },
        clear: function () {
          return delete this._array, this;
        },
        move: function (t3, e3) {
          return this.attr("points", this.array().move(t3, e3));
        },
        size: function (t3, e3) {
          var i3 = g2(this, t3, e3);
          return this.attr("points", this.array().size(i3.width, i3.height));
        }
      }), i2.extend(i2.Line, i2.Polyline, i2.Polygon, {
        morphArray: i2.PointArray,
        x: function (t3) {
          return null == t3 ? this.bbox().x : this.move(t3, this.bbox().y);
        },
        y: function (t3) {
          return null == t3 ? this.bbox().y : this.move(this.bbox().x, t3);
        },
        width: function (t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.width : this.size(t3, e3.height);
        },
        height: function (t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.height : this.size(e3.width, t3);
        }
      }), i2.Path = i2.invent({
        create: "path",
        inherit: i2.Shape,
        extend: {
          morphArray: i2.PathArray,
          array: function () {
            return this._array || (this._array = new i2.PathArray(this.attr("d")));
          },
          plot: function (t3) {
            return null == t3 ? this.array() : this.clear().attr("d", "string" == typeof t3 ? t3 : this._array = new i2.PathArray(t3));
          },
          clear: function () {
            return delete this._array, this;
          }
        },
        construct: {
          path: function (t3) {
            return this.put(new i2.Path()).plot(t3 || new i2.PathArray());
          }
        }
      }), i2.Image = i2.invent({
        create: "image",
        inherit: i2.Shape,
        extend: {
          load: function (e3) {
            if (!e3) return this;
            var a3 = this,
              s3 = new t2.Image();
            return i2.on(s3, "load", function () {
              i2.off(s3);
              var t3 = a3.parent(i2.Pattern);
              null !== t3 && (0 == a3.width() && 0 == a3.height() && a3.size(s3.width, s3.height), t3 && 0 == t3.width() && 0 == t3.height() && t3.size(a3.width(), a3.height()), "function" == typeof a3._loaded && a3._loaded.call(a3, {
                width: s3.width,
                height: s3.height,
                ratio: s3.width / s3.height,
                url: e3
              }));
            }), i2.on(s3, "error", function (t3) {
              i2.off(s3), "function" == typeof a3._error && a3._error.call(a3, t3);
            }), this.attr("href", s3.src = this.src = e3, i2.xlink);
          },
          loaded: function (t3) {
            return this._loaded = t3, this;
          },
          error: function (t3) {
            return this._error = t3, this;
          }
        },
        construct: {
          image: function (t3, e3, a3) {
            return this.put(new i2.Image()).load(t3).size(e3 || 0, a3 || e3 || 0);
          }
        }
      }), i2.Text = i2.invent({
        create: function () {
          this.constructor.call(this, i2.create("text")), this.dom.leading = new i2.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", i2.defaults.attrs["font-family"]);
        },
        inherit: i2.Shape,
        extend: {
          x: function (t3) {
            return null == t3 ? this.attr("x") : this.attr("x", t3);
          },
          text: function (t3) {
            if (void 0 === t3) {
              t3 = "";
              for (var e3 = this.node.childNodes, a3 = 0, s3 = e3.length; a3 < s3; ++a3) 0 != a3 && 3 != e3[a3].nodeType && 1 == i2.adopt(e3[a3]).dom.newLined && (t3 += "\n"), t3 += e3[a3].textContent;
              return t3;
            }
            if (this.clear().build(true), "function" == typeof t3) t3.call(this, this);else {
              a3 = 0;
              for (var r3 = (t3 = t3.split("\n")).length; a3 < r3; a3++) this.tspan(t3[a3]).newLine();
            }
            return this.build(false).rebuild();
          },
          size: function (t3) {
            return this.attr("font-size", t3).rebuild();
          },
          leading: function (t3) {
            return null == t3 ? this.dom.leading : (this.dom.leading = new i2.Number(t3), this.rebuild());
          },
          lines: function () {
            var t3 = (this.textPath && this.textPath() || this).node,
              e3 = i2.utils.map(i2.utils.filterSVGElements(t3.childNodes), function (t4) {
                return i2.adopt(t4);
              });
            return new i2.Set(e3);
          },
          rebuild: function (t3) {
            if ("boolean" == typeof t3 && (this._rebuild = t3), this._rebuild) {
              var e3 = this,
                a3 = 0,
                s3 = this.dom.leading * new i2.Number(this.attr("font-size"));
              this.lines().each(function () {
                this.dom.newLined && (e3.textPath() || this.attr("x", e3.attr("x")), "\n" == this.text() ? a3 += s3 : (this.attr("dy", s3 + a3), a3 = 0));
              }), this.fire("rebuild");
            }
            return this;
          },
          build: function (t3) {
            return this._build = !!t3, this;
          },
          setData: function (t3) {
            return this.dom = t3, this.dom.leading = new i2.Number(t3.leading || 1.3), this;
          }
        },
        construct: {
          text: function (t3) {
            return this.put(new i2.Text()).text(t3);
          },
          plain: function (t3) {
            return this.put(new i2.Text()).plain(t3);
          }
        }
      }), i2.Tspan = i2.invent({
        create: "tspan",
        inherit: i2.Shape,
        extend: {
          text: function (t3) {
            return null == t3 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t3 ? t3.call(this, this) : this.plain(t3), this);
          },
          dx: function (t3) {
            return this.attr("dx", t3);
          },
          dy: function (t3) {
            return this.attr("dy", t3);
          },
          newLine: function () {
            var t3 = this.parent(i2.Text);
            return this.dom.newLined = true, this.dy(t3.dom.leading * t3.attr("font-size")).attr("x", t3.x());
          }
        }
      }), i2.extend(i2.Text, i2.Tspan, {
        plain: function (t3) {
          return false === this._build && this.clear(), this.node.appendChild(e2.createTextNode(t3)), this;
        },
        tspan: function (t3) {
          var e3 = (this.textPath && this.textPath() || this).node,
            a3 = new i2.Tspan();
          return false === this._build && this.clear(), e3.appendChild(a3.node), a3.text(t3);
        },
        clear: function () {
          for (var t3 = (this.textPath && this.textPath() || this).node; t3.hasChildNodes();) t3.removeChild(t3.lastChild);
          return this;
        },
        length: function () {
          return this.node.getComputedTextLength();
        }
      }), i2.TextPath = i2.invent({
        create: "textPath",
        inherit: i2.Parent,
        parent: i2.Text,
        construct: {
          morphArray: i2.PathArray,
          array: function () {
            var t3 = this.track();
            return t3 ? t3.array() : null;
          },
          plot: function (t3) {
            var e3 = this.track(),
              i3 = null;
            return e3 && (i3 = e3.plot(t3)), null == t3 ? i3 : this;
          },
          track: function () {
            var t3 = this.textPath();
            if (t3) return t3.reference("href");
          },
          textPath: function () {
            if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return i2.adopt(this.node.firstChild);
          }
        }
      }), i2.Nested = i2.invent({
        create: function () {
          this.constructor.call(this, i2.create("svg")), this.style("overflow", "visible");
        },
        inherit: i2.Container,
        construct: {
          nested: function () {
            return this.put(new i2.Nested());
          }
        }
      });
      var n2 = {
        stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"],
        fill: ["color", "opacity", "rule"],
        prefix: function (t3, e3) {
          return "color" == e3 ? t3 : t3 + "-" + e3;
        }
      };
      function l2(t3, e3, a3, s3) {
        return a3 + s3.replace(i2.regex.dots, " .");
      }
      function h2(t3) {
        return t3.toLowerCase().replace(/-(.)/g, function (t4, e3) {
          return e3.toUpperCase();
        });
      }
      function c2(t3) {
        return t3.charAt(0).toUpperCase() + t3.slice(1);
      }
      function d2(t3) {
        var e3 = t3.toString(16);
        return 1 == e3.length ? "0" + e3 : e3;
      }
      function g2(t3, e3, i3) {
        if (null == e3 || null == i3) {
          var a3 = t3.bbox();
          null == e3 ? e3 = a3.width / a3.height * i3 : null == i3 && (i3 = a3.height / a3.width * e3);
        }
        return {
          width: e3,
          height: i3
        };
      }
      function u2(t3, e3, i3) {
        return {
          x: e3 * t3.a + i3 * t3.c + 0,
          y: e3 * t3.b + i3 * t3.d + 0
        };
      }
      function f2(t3) {
        return {
          a: t3[0],
          b: t3[1],
          c: t3[2],
          d: t3[3],
          e: t3[4],
          f: t3[5]
        };
      }
      function p2(e3) {
        for (var a3 = e3.childNodes.length - 1; a3 >= 0; a3--) e3.childNodes[a3] instanceof t2.SVGElement && p2(e3.childNodes[a3]);
        return i2.adopt(e3).id(i2.eid(e3.nodeName));
      }
      function x2(t3) {
        return Math.abs(t3) > 1e-37 ? t3 : 0;
      }
      ["fill", "stroke"].forEach(function (t3) {
        var e3 = {};
        e3[t3] = function (e4) {
          if (void 0 === e4) return this;
          if ("string" == typeof e4 || i2.Color.isRgb(e4) || e4 && "function" == typeof e4.fill) this.attr(t3, e4);else for (var a3 = n2[t3].length - 1; a3 >= 0; a3--) null != e4[n2[t3][a3]] && this.attr(n2.prefix(t3, n2[t3][a3]), e4[n2[t3][a3]]);
          return this;
        }, i2.extend(i2.Element, i2.FX, e3);
      }), i2.extend(i2.Element, i2.FX, {
        translate: function (t3, e3) {
          return this.transform({
            x: t3,
            y: e3
          });
        },
        matrix: function (t3) {
          return this.attr("transform", new i2.Matrix(6 == arguments.length ? [].slice.call(arguments) : t3));
        },
        opacity: function (t3) {
          return this.attr("opacity", t3);
        },
        dx: function (t3) {
          return this.x(new i2.Number(t3).plus(this instanceof i2.FX ? 0 : this.x()), true);
        },
        dy: function (t3) {
          return this.y(new i2.Number(t3).plus(this instanceof i2.FX ? 0 : this.y()), true);
        }
      }), i2.extend(i2.Path, {
        length: function () {
          return this.node.getTotalLength();
        },
        pointAt: function (t3) {
          return this.node.getPointAtLength(t3);
        }
      }), i2.Set = i2.invent({
        create: function (t3) {
          Array.isArray(t3) ? this.members = t3 : this.clear();
        },
        extend: {
          add: function () {
            for (var t3 = [].slice.call(arguments), e3 = 0, i3 = t3.length; e3 < i3; e3++) this.members.push(t3[e3]);
            return this;
          },
          remove: function (t3) {
            var e3 = this.index(t3);
            return e3 > -1 && this.members.splice(e3, 1), this;
          },
          each: function (t3) {
            for (var e3 = 0, i3 = this.members.length; e3 < i3; e3++) t3.apply(this.members[e3], [e3, this.members]);
            return this;
          },
          clear: function () {
            return this.members = [], this;
          },
          length: function () {
            return this.members.length;
          },
          has: function (t3) {
            return this.index(t3) >= 0;
          },
          index: function (t3) {
            return this.members.indexOf(t3);
          },
          get: function (t3) {
            return this.members[t3];
          },
          first: function () {
            return this.get(0);
          },
          last: function () {
            return this.get(this.members.length - 1);
          },
          valueOf: function () {
            return this.members;
          }
        },
        construct: {
          set: function (t3) {
            return new i2.Set(t3);
          }
        }
      }), i2.FX.Set = i2.invent({
        create: function (t3) {
          this.set = t3;
        }
      }), i2.Set.inherit = function () {
        var t3 = [];
        for (var e3 in i2.Shape.prototype) "function" == typeof i2.Shape.prototype[e3] && "function" != typeof i2.Set.prototype[e3] && t3.push(e3);
        for (var e3 in t3.forEach(function (t4) {
          i2.Set.prototype[t4] = function () {
            for (var e4 = 0, a3 = this.members.length; e4 < a3; e4++) this.members[e4] && "function" == typeof this.members[e4][t4] && this.members[e4][t4].apply(this.members[e4], arguments);
            return "animate" == t4 ? this.fx || (this.fx = new i2.FX.Set(this)) : this;
          };
        }), t3 = [], i2.FX.prototype) "function" == typeof i2.FX.prototype[e3] && "function" != typeof i2.FX.Set.prototype[e3] && t3.push(e3);
        t3.forEach(function (t4) {
          i2.FX.Set.prototype[t4] = function () {
            for (var e4 = 0, i3 = this.set.members.length; e4 < i3; e4++) this.set.members[e4].fx[t4].apply(this.set.members[e4].fx, arguments);
            return this;
          };
        });
      }, i2.extend(i2.Element, {}), i2.extend(i2.Element, {
        remember: function (t3, e3) {
          if ("object" === b(arguments[0])) for (var i3 in t3) this.remember(i3, t3[i3]);else {
            if (1 == arguments.length) return this.memory()[t3];
            this.memory()[t3] = e3;
          }
          return this;
        },
        forget: function () {
          if (0 == arguments.length) this._memory = {};else for (var t3 = arguments.length - 1; t3 >= 0; t3--) delete this.memory()[arguments[t3]];
          return this;
        },
        memory: function () {
          return this._memory || (this._memory = {});
        }
      }), i2.get = function (t3) {
        var a3 = e2.getElementById(function (t4) {
          var e3 = (t4 || "").toString().match(i2.regex.reference);
          if (e3) return e3[1];
        }(t3) || t3);
        return i2.adopt(a3);
      }, i2.select = function (t3, a3) {
        return new i2.Set(i2.utils.map((a3 || e2).querySelectorAll(t3), function (t4) {
          return i2.adopt(t4);
        }));
      }, i2.extend(i2.Parent, {
        select: function (t3) {
          return i2.select(t3, this.node);
        }
      });
      var v2 = "abcdef".split("");
      if ("function" != typeof t2.CustomEvent) {
        var m2 = function (t3, i3) {
          i3 = i3 || {
            bubbles: false,
            cancelable: false,
            detail: void 0
          };
          var a3 = e2.createEvent("CustomEvent");
          return a3.initCustomEvent(t3, i3.bubbles, i3.cancelable, i3.detail), a3;
        };
        m2.prototype = t2.Event.prototype, i2.CustomEvent = m2;
      } else i2.CustomEvent = t2.CustomEvent;
      return i2;
    }, "function" == typeof define && define.amd ? define(function () {
      return Wt(Nt, Nt.document);
    }) : "object" === ("undefined" == typeof exports ? "undefined" : b(exports)) && "undefined" != typeof module2 ? module2.exports = Nt.document ? Wt(Nt, Nt.document) : function (t2) {
      return Wt(t2, t2.document);
    } : Nt.SVG = Wt(Nt, Nt.document), function () {
      SVG.Filter = SVG.invent({
        create: "filter",
        inherit: SVG.Parent,
        extend: {
          source: "SourceGraphic",
          sourceAlpha: "SourceAlpha",
          background: "BackgroundImage",
          backgroundAlpha: "BackgroundAlpha",
          fill: "FillPaint",
          stroke: "StrokePaint",
          autoSetIn: true,
          put: function (t3, e3) {
            return this.add(t3, e3), !t3.attr("in") && this.autoSetIn && t3.attr("in", this.source), t3.attr("result") || t3.attr("result", t3), t3;
          },
          blend: function (t3, e3, i3) {
            return this.put(new SVG.BlendEffect(t3, e3, i3));
          },
          colorMatrix: function (t3, e3) {
            return this.put(new SVG.ColorMatrixEffect(t3, e3));
          },
          convolveMatrix: function (t3) {
            return this.put(new SVG.ConvolveMatrixEffect(t3));
          },
          componentTransfer: function (t3) {
            return this.put(new SVG.ComponentTransferEffect(t3));
          },
          composite: function (t3, e3, i3) {
            return this.put(new SVG.CompositeEffect(t3, e3, i3));
          },
          flood: function (t3, e3) {
            return this.put(new SVG.FloodEffect(t3, e3));
          },
          offset: function (t3, e3) {
            return this.put(new SVG.OffsetEffect(t3, e3));
          },
          image: function (t3) {
            return this.put(new SVG.ImageEffect(t3));
          },
          merge: function () {
            var t3 = [void 0];
            for (var e3 in arguments) t3.push(arguments[e3]);
            return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t3))());
          },
          gaussianBlur: function (t3, e3) {
            return this.put(new SVG.GaussianBlurEffect(t3, e3));
          },
          morphology: function (t3, e3) {
            return this.put(new SVG.MorphologyEffect(t3, e3));
          },
          diffuseLighting: function (t3, e3, i3) {
            return this.put(new SVG.DiffuseLightingEffect(t3, e3, i3));
          },
          displacementMap: function (t3, e3, i3, a3, s3) {
            return this.put(new SVG.DisplacementMapEffect(t3, e3, i3, a3, s3));
          },
          specularLighting: function (t3, e3, i3, a3) {
            return this.put(new SVG.SpecularLightingEffect(t3, e3, i3, a3));
          },
          tile: function () {
            return this.put(new SVG.TileEffect());
          },
          turbulence: function (t3, e3, i3, a3, s3) {
            return this.put(new SVG.TurbulenceEffect(t3, e3, i3, a3, s3));
          },
          toString: function () {
            return "url(#" + this.attr("id") + ")";
          }
        }
      }), SVG.extend(SVG.Defs, {
        filter: function (t3) {
          var e3 = this.put(new SVG.Filter());
          return "function" == typeof t3 && t3.call(e3, e3), e3;
        }
      }), SVG.extend(SVG.Container, {
        filter: function (t3) {
          return this.defs().filter(t3);
        }
      }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
        filter: function (t3) {
          return this.filterer = t3 instanceof SVG.Element ? t3 : this.doc().filter(t3), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
        },
        unfilter: function (t3) {
          return this.filterer && true === t3 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
        }
      }), SVG.Effect = SVG.invent({
        create: function () {
          this.constructor.call(this);
        },
        inherit: SVG.Element,
        extend: {
          in: function (t3) {
            return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
          },
          result: function (t3) {
            return null == t3 ? this.attr("result") : this.attr("result", t3);
          },
          toString: function () {
            return this.result();
          }
        }
      }), SVG.ParentEffect = SVG.invent({
        create: function () {
          this.constructor.call(this);
        },
        inherit: SVG.Parent,
        extend: {
          in: function (t3) {
            return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
          },
          result: function (t3) {
            return null == t3 ? this.attr("result") : this.attr("result", t3);
          },
          toString: function () {
            return this.result();
          }
        }
      });
      var t2 = {
        blend: function (t3, e3) {
          return this.parent() && this.parent().blend(this, t3, e3);
        },
        colorMatrix: function (t3, e3) {
          return this.parent() && this.parent().colorMatrix(t3, e3).in(this);
        },
        convolveMatrix: function (t3) {
          return this.parent() && this.parent().convolveMatrix(t3).in(this);
        },
        componentTransfer: function (t3) {
          return this.parent() && this.parent().componentTransfer(t3).in(this);
        },
        composite: function (t3, e3) {
          return this.parent() && this.parent().composite(this, t3, e3);
        },
        flood: function (t3, e3) {
          return this.parent() && this.parent().flood(t3, e3);
        },
        offset: function (t3, e3) {
          return this.parent() && this.parent().offset(t3, e3).in(this);
        },
        image: function (t3) {
          return this.parent() && this.parent().image(t3);
        },
        merge: function () {
          return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
        },
        gaussianBlur: function (t3, e3) {
          return this.parent() && this.parent().gaussianBlur(t3, e3).in(this);
        },
        morphology: function (t3, e3) {
          return this.parent() && this.parent().morphology(t3, e3).in(this);
        },
        diffuseLighting: function (t3, e3, i3) {
          return this.parent() && this.parent().diffuseLighting(t3, e3, i3).in(this);
        },
        displacementMap: function (t3, e3, i3, a3) {
          return this.parent() && this.parent().displacementMap(this, t3, e3, i3, a3);
        },
        specularLighting: function (t3, e3, i3, a3) {
          return this.parent() && this.parent().specularLighting(t3, e3, i3, a3).in(this);
        },
        tile: function () {
          return this.parent() && this.parent().tile().in(this);
        },
        turbulence: function (t3, e3, i3, a3, s3) {
          return this.parent() && this.parent().turbulence(t3, e3, i3, a3, s3).in(this);
        }
      };
      SVG.extend(SVG.Effect, t2), SVG.extend(SVG.ParentEffect, t2), SVG.ChildEffect = SVG.invent({
        create: function () {
          this.constructor.call(this);
        },
        inherit: SVG.Element,
        extend: {
          in: function (t3) {
            this.attr("in", t3);
          }
        }
      });
      var e2 = {
          blend: function (t3, e3, i3) {
            this.attr({
              in: t3,
              in2: e3,
              mode: i3 || "normal"
            });
          },
          colorMatrix: function (t3, e3) {
            "matrix" == t3 && (e3 = s2(e3)), this.attr({
              type: t3,
              values: void 0 === e3 ? null : e3
            });
          },
          convolveMatrix: function (t3) {
            t3 = s2(t3), this.attr({
              order: Math.sqrt(t3.split(" ").length),
              kernelMatrix: t3
            });
          },
          composite: function (t3, e3, i3) {
            this.attr({
              in: t3,
              in2: e3,
              operator: i3
            });
          },
          flood: function (t3, e3) {
            this.attr("flood-color", t3), null != e3 && this.attr("flood-opacity", e3);
          },
          offset: function (t3, e3) {
            this.attr({
              dx: t3,
              dy: e3
            });
          },
          image: function (t3) {
            this.attr("href", t3, SVG.xlink);
          },
          displacementMap: function (t3, e3, i3, a3, s3) {
            this.attr({
              in: t3,
              in2: e3,
              scale: i3,
              xChannelSelector: a3,
              yChannelSelector: s3
            });
          },
          gaussianBlur: function (t3, e3) {
            null != t3 || null != e3 ? this.attr("stdDeviation", function (t4) {
              if (!Array.isArray(t4)) return t4;
              for (var e4 = 0, i3 = t4.length, a3 = []; e4 < i3; e4++) a3.push(t4[e4]);
              return a3.join(" ");
            }(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
          },
          morphology: function (t3, e3) {
            this.attr({
              operator: t3,
              radius: e3
            });
          },
          tile: function () {},
          turbulence: function (t3, e3, i3, a3, s3) {
            this.attr({
              numOctaves: e3,
              seed: i3,
              stitchTiles: a3,
              baseFrequency: t3,
              type: s3
            });
          }
        },
        i2 = {
          merge: function () {
            var t3;
            if (arguments[0] instanceof SVG.Set) {
              var e3 = this;
              arguments[0].each(function (t4) {
                this instanceof SVG.MergeNode ? e3.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e3.put(new SVG.MergeNode(this));
              });
            } else {
              t3 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
              for (var i3 = 0; i3 < t3.length; i3++) t3[i3] instanceof SVG.MergeNode ? this.put(t3[i3]) : this.put(new SVG.MergeNode(t3[i3]));
            }
          },
          componentTransfer: function (t3) {
            if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function (t4) {
              this[t4] = new SVG["Func" + t4.toUpperCase()]("identity"), this.rgb.add(this[t4]), this.node.appendChild(this[t4].node);
            }.bind(this)), t3) for (var e3 in t3.rgb && (["r", "g", "b"].forEach(function (e4) {
              this[e4].attr(t3.rgb);
            }.bind(this)), delete t3.rgb), t3) this[e3].attr(t3[e3]);
          },
          diffuseLighting: function (t3, e3, i3) {
            this.attr({
              surfaceScale: t3,
              diffuseConstant: e3,
              kernelUnitLength: i3
            });
          },
          specularLighting: function (t3, e3, i3, a3) {
            this.attr({
              surfaceScale: t3,
              diffuseConstant: e3,
              specularExponent: i3,
              kernelUnitLength: a3
            });
          }
        },
        a2 = {
          distantLight: function (t3, e3) {
            this.attr({
              azimuth: t3,
              elevation: e3
            });
          },
          pointLight: function (t3, e3, i3) {
            this.attr({
              x: t3,
              y: e3,
              z: i3
            });
          },
          spotLight: function (t3, e3, i3, a3, s3, r3) {
            this.attr({
              x: t3,
              y: e3,
              z: i3,
              pointsAtX: a3,
              pointsAtY: s3,
              pointsAtZ: r3
            });
          },
          mergeNode: function (t3) {
            this.attr("in", t3);
          }
        };
      function s2(t3) {
        return Array.isArray(t3) && (t3 = new SVG.Array(t3)), t3.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
      }
      function r2() {
        var t3 = function () {};
        for (var e3 in "function" == typeof arguments[arguments.length - 1] && (t3 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) for (var i3 in arguments[e3]) t3(arguments[e3][i3], i3, arguments[e3]);
      }
      ["r", "g", "b", "a"].forEach(function (t3) {
        a2["Func" + t3.toUpperCase()] = function (t4) {
          switch (this.attr("type", t4), t4) {
            case "table":
              this.attr("tableValues", arguments[1]);
              break;
            case "linear":
              this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
              break;
            case "gamma":
              this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
          }
        };
      }), r2(e2, function (t3, e3) {
        var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
        SVG[i3 + "Effect"] = SVG.invent({
          create: function () {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          },
          inherit: SVG.Effect,
          extend: {}
        });
      }), r2(i2, function (t3, e3) {
        var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
        SVG[i3 + "Effect"] = SVG.invent({
          create: function () {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          },
          inherit: SVG.ParentEffect,
          extend: {}
        });
      }), r2(a2, function (t3, e3) {
        var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
        SVG[i3] = SVG.invent({
          create: function () {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments);
          },
          inherit: SVG.ChildEffect,
          extend: {}
        });
      }), SVG.extend(SVG.MergeEffect, {
        in: function (t3) {
          return t3 instanceof SVG.MergeNode ? this.add(t3, 0) : this.add(new SVG.MergeNode(t3), 0), this;
        }
      }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
        in2: function (t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t3);
        }
      }), SVG.filter = {
        sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0]
      };
    }.call(void 0), function () {
      function t2(t3, s3, r2, o2, n2, l2, h2) {
        for (var c2 = t3.slice(s3, r2 || h2), d2 = o2.slice(n2, l2 || h2), g2 = 0, u2 = {
            pos: [0, 0],
            start: [0, 0]
          }, f2 = {
            pos: [0, 0],
            start: [0, 0]
          };;) {
          if (c2[g2] = e2.call(u2, c2[g2]), d2[g2] = e2.call(f2, d2[g2]), c2[g2][0] != d2[g2][0] || "M" == c2[g2][0] || "A" == c2[g2][0] && (c2[g2][4] != d2[g2][4] || c2[g2][5] != d2[g2][5]) ? (Array.prototype.splice.apply(c2, [g2, 1].concat(a2.call(u2, c2[g2]))), Array.prototype.splice.apply(d2, [g2, 1].concat(a2.call(f2, d2[g2])))) : (c2[g2] = i2.call(u2, c2[g2]), d2[g2] = i2.call(f2, d2[g2])), ++g2 == c2.length && g2 == d2.length) break;
          g2 == c2.length && c2.push(["C", u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1]]), g2 == d2.length && d2.push(["C", f2.pos[0], f2.pos[1], f2.pos[0], f2.pos[1], f2.pos[0], f2.pos[1]]);
        }
        return {
          start: c2,
          dest: d2
        };
      }
      function e2(t3) {
        switch (t3[0]) {
          case "z":
          case "Z":
            t3[0] = "L", t3[1] = this.start[0], t3[2] = this.start[1];
            break;
          case "H":
            t3[0] = "L", t3[2] = this.pos[1];
            break;
          case "V":
            t3[0] = "L", t3[2] = t3[1], t3[1] = this.pos[0];
            break;
          case "T":
            t3[0] = "Q", t3[3] = t3[1], t3[4] = t3[2], t3[1] = this.reflection[1], t3[2] = this.reflection[0];
            break;
          case "S":
            t3[0] = "C", t3[6] = t3[4], t3[5] = t3[3], t3[4] = t3[2], t3[3] = t3[1], t3[2] = this.reflection[1], t3[1] = this.reflection[0];
        }
        return t3;
      }
      function i2(t3) {
        var e3 = t3.length;
        return this.pos = [t3[e3 - 2], t3[e3 - 1]], -1 != "SCQT".indexOf(t3[0]) && (this.reflection = [2 * this.pos[0] - t3[e3 - 4], 2 * this.pos[1] - t3[e3 - 3]]), t3;
      }
      function a2(t3) {
        var e3 = [t3];
        switch (t3[0]) {
          case "M":
            return this.pos = this.start = [t3[1], t3[2]], e3;
          case "L":
            t3[5] = t3[3] = t3[1], t3[6] = t3[4] = t3[2], t3[1] = this.pos[0], t3[2] = this.pos[1];
            break;
          case "Q":
            t3[6] = t3[4], t3[5] = t3[3], t3[4] = 1 * t3[4] / 3 + 2 * t3[2] / 3, t3[3] = 1 * t3[3] / 3 + 2 * t3[1] / 3, t3[2] = 1 * this.pos[1] / 3 + 2 * t3[2] / 3, t3[1] = 1 * this.pos[0] / 3 + 2 * t3[1] / 3;
            break;
          case "A":
            e3 = function (t4, e4) {
              var i3,
                a3,
                s3,
                r2,
                o2,
                n2,
                l2,
                h2,
                c2,
                d2,
                g2,
                u2,
                f2,
                p2,
                x2,
                b2,
                v2,
                m2,
                y2,
                w2,
                k2,
                A2,
                S2,
                C2,
                L2,
                P2,
                M2 = Math.abs(e4[1]),
                I2 = Math.abs(e4[2]),
                T2 = e4[3] % 360,
                z2 = e4[4],
                X2 = e4[5],
                E2 = e4[6],
                Y2 = e4[7],
                R2 = new SVG.Point(t4),
                F2 = new SVG.Point(E2, Y2),
                D2 = [];
              if (0 === M2 || 0 === I2 || R2.x === F2.x && R2.y === F2.y) return [["C", R2.x, R2.y, F2.x, F2.y, F2.x, F2.y]];
              i3 = new SVG.Point((R2.x - F2.x) / 2, (R2.y - F2.y) / 2).transform(new SVG.Matrix().rotate(T2)), (a3 = i3.x * i3.x / (M2 * M2) + i3.y * i3.y / (I2 * I2)) > 1 && (M2 *= a3 = Math.sqrt(a3), I2 *= a3);
              s3 = new SVG.Matrix().rotate(T2).scale(1 / M2, 1 / I2).rotate(-T2), R2 = R2.transform(s3), F2 = F2.transform(s3), r2 = [F2.x - R2.x, F2.y - R2.y], n2 = r2[0] * r2[0] + r2[1] * r2[1], o2 = Math.sqrt(n2), r2[0] /= o2, r2[1] /= o2, l2 = n2 < 4 ? Math.sqrt(1 - n2 / 4) : 0, z2 === X2 && (l2 *= -1);
              h2 = new SVG.Point((F2.x + R2.x) / 2 + l2 * -r2[1], (F2.y + R2.y) / 2 + l2 * r2[0]), c2 = new SVG.Point(R2.x - h2.x, R2.y - h2.y), d2 = new SVG.Point(F2.x - h2.x, F2.y - h2.y), g2 = Math.acos(c2.x / Math.sqrt(c2.x * c2.x + c2.y * c2.y)), c2.y < 0 && (g2 *= -1);
              u2 = Math.acos(d2.x / Math.sqrt(d2.x * d2.x + d2.y * d2.y)), d2.y < 0 && (u2 *= -1);
              X2 && g2 > u2 && (u2 += 2 * Math.PI);
              !X2 && g2 < u2 && (u2 -= 2 * Math.PI);
              for (p2 = Math.ceil(2 * Math.abs(g2 - u2) / Math.PI), b2 = [], v2 = g2, f2 = (u2 - g2) / p2, x2 = 4 * Math.tan(f2 / 4) / 3, k2 = 0; k2 <= p2; k2++) y2 = Math.cos(v2), m2 = Math.sin(v2), w2 = new SVG.Point(h2.x + y2, h2.y + m2), b2[k2] = [new SVG.Point(w2.x + x2 * m2, w2.y - x2 * y2), w2, new SVG.Point(w2.x - x2 * m2, w2.y + x2 * y2)], v2 += f2;
              for (b2[0][0] = b2[0][1].clone(), b2[b2.length - 1][2] = b2[b2.length - 1][1].clone(), s3 = new SVG.Matrix().rotate(T2).scale(M2, I2).rotate(-T2), k2 = 0, A2 = b2.length; k2 < A2; k2++) b2[k2][0] = b2[k2][0].transform(s3), b2[k2][1] = b2[k2][1].transform(s3), b2[k2][2] = b2[k2][2].transform(s3);
              for (k2 = 1, A2 = b2.length; k2 < A2; k2++) S2 = (w2 = b2[k2 - 1][2]).x, C2 = w2.y, L2 = (w2 = b2[k2][0]).x, P2 = w2.y, E2 = (w2 = b2[k2][1]).x, Y2 = w2.y, D2.push(["C", S2, C2, L2, P2, E2, Y2]);
              return D2;
            }(this.pos, t3), t3 = e3[0];
        }
        return t3[0] = "C", this.pos = [t3[5], t3[6]], this.reflection = [2 * t3[5] - t3[3], 2 * t3[6] - t3[4]], e3;
      }
      function s2(t3, e3) {
        if (false === e3) return false;
        for (var i3 = e3, a3 = t3.length; i3 < a3; ++i3) if ("M" == t3[i3][0]) return i3;
        return false;
      }
      SVG.extend(SVG.PathArray, {
        morph: function (e3) {
          for (var i3 = this.value, a3 = this.parse(e3), r2 = 0, o2 = 0, n2 = false, l2 = false; false !== r2 || false !== o2;) {
            var h2;
            n2 = s2(i3, false !== r2 && r2 + 1), l2 = s2(a3, false !== o2 && o2 + 1), false === r2 && (r2 = 0 == (h2 = new SVG.PathArray(c2.start).bbox()).height || 0 == h2.width ? i3.push(i3[0]) - 1 : i3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1), false === o2 && (o2 = 0 == (h2 = new SVG.PathArray(c2.dest).bbox()).height || 0 == h2.width ? a3.push(a3[0]) - 1 : a3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1);
            var c2 = t2(i3, r2, n2, a3, o2, l2);
            i3 = i3.slice(0, r2).concat(c2.start, false === n2 ? [] : i3.slice(n2)), a3 = a3.slice(0, o2).concat(c2.dest, false === l2 ? [] : a3.slice(l2)), r2 = false !== n2 && r2 + c2.start.length, o2 = false !== l2 && o2 + c2.dest.length;
          }
          return this.value = i3, this.destination = new SVG.PathArray(), this.destination.value = a3, this;
        }
      });
    }(), function () {
      function t2(t3) {
        t3.remember("_draggable", this), this.el = t3;
      }
      t2.prototype.init = function (t3, e2) {
        var i2 = this;
        this.constraint = t3, this.value = e2, this.el.on("mousedown.drag", function (t4) {
          i2.start(t4);
        }), this.el.on("touchstart.drag", function (t4) {
          i2.start(t4);
        });
      }, t2.prototype.transformPoint = function (t3, e2) {
        var i2 = (t3 = t3 || window.event).changedTouches && t3.changedTouches[0] || t3;
        return this.p.x = i2.clientX - (e2 || 0), this.p.y = i2.clientY, this.p.matrixTransform(this.m);
      }, t2.prototype.getBBox = function () {
        var t3 = this.el.bbox();
        return this.el instanceof SVG.Nested && (t3 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t3.x = this.el.x(), t3.y = this.el.y()), t3;
      }, t2.prototype.start = function (t3) {
        if ("click" != t3.type && "mousedown" != t3.type && "mousemove" != t3.type || 1 == (t3.which || t3.buttons)) {
          var e2 = this;
          if (this.el.fire("beforedrag", {
            event: t3,
            handler: this
          }), !this.el.event().defaultPrevented) {
            t3.preventDefault(), t3.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
            var i2,
              a2 = this.getBBox();
            if (this.el instanceof SVG.Text) switch (i2 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
              case "middle":
                i2 /= 2;
                break;
              case "start":
                i2 = 0;
            }
            this.startPoints = {
              point: this.transformPoint(t3, i2),
              box: a2,
              transform: this.el.transform()
            }, SVG.on(window, "mousemove.drag", function (t4) {
              e2.drag(t4);
            }), SVG.on(window, "touchmove.drag", function (t4) {
              e2.drag(t4);
            }), SVG.on(window, "mouseup.drag", function (t4) {
              e2.end(t4);
            }), SVG.on(window, "touchend.drag", function (t4) {
              e2.end(t4);
            }), this.el.fire("dragstart", {
              event: t3,
              p: this.startPoints.point,
              m: this.m,
              handler: this
            });
          }
        }
      }, t2.prototype.drag = function (t3) {
        var e2 = this.getBBox(),
          i2 = this.transformPoint(t3),
          a2 = this.startPoints.box.x + i2.x - this.startPoints.point.x,
          s2 = this.startPoints.box.y + i2.y - this.startPoints.point.y,
          r2 = this.constraint,
          o2 = i2.x - this.startPoints.point.x,
          n2 = i2.y - this.startPoints.point.y;
        if (this.el.fire("dragmove", {
          event: t3,
          p: i2,
          m: this.m,
          handler: this
        }), this.el.event().defaultPrevented) return i2;
        if ("function" == typeof r2) {
          var l2 = r2.call(this.el, a2, s2, this.m);
          "boolean" == typeof l2 && (l2 = {
            x: l2,
            y: l2
          }), true === l2.x ? this.el.x(a2) : false !== l2.x && this.el.x(l2.x), true === l2.y ? this.el.y(s2) : false !== l2.y && this.el.y(l2.y);
        } else "object" == typeof r2 && (null != r2.minX && a2 < r2.minX ? o2 = (a2 = r2.minX) - this.startPoints.box.x : null != r2.maxX && a2 > r2.maxX - e2.width && (o2 = (a2 = r2.maxX - e2.width) - this.startPoints.box.x), null != r2.minY && s2 < r2.minY ? n2 = (s2 = r2.minY) - this.startPoints.box.y : null != r2.maxY && s2 > r2.maxY - e2.height && (n2 = (s2 = r2.maxY - e2.height) - this.startPoints.box.y), null != r2.snapToGrid && (a2 -= a2 % r2.snapToGrid, s2 -= s2 % r2.snapToGrid, o2 -= o2 % r2.snapToGrid, n2 -= n2 % r2.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
          x: o2,
          y: n2
        }, true) : this.el.move(a2, s2));
        return i2;
      }, t2.prototype.end = function (t3) {
        var e2 = this.drag(t3);
        this.el.fire("dragend", {
          event: t3,
          p: e2,
          m: this.m,
          handler: this
        }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
      }, SVG.extend(SVG.Element, {
        draggable: function (e2, i2) {
          "function" != typeof e2 && "object" != typeof e2 || (i2 = e2, e2 = true);
          var a2 = this.remember("_draggable") || new t2(this);
          return (e2 = void 0 === e2 || e2) ? a2.init(i2 || {}, e2) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
        }
      });
    }.call(void 0), function () {
      function t2(t3) {
        this.el = t3, t3.remember("_selectHandler", this), this.pointSelection = {
          isSelected: false
        }, this.rectSelection = {
          isSelected: false
        }, this.pointsList = {
          lt: [0, 0],
          rt: ["width", 0],
          rb: ["width", "height"],
          lb: [0, "height"],
          t: ["width", 0],
          r: ["width", "height"],
          b: ["width", "height"],
          l: [0, "height"]
        }, this.pointCoord = function (t4, e2, i2) {
          var a2 = "string" != typeof t4 ? t4 : e2[t4];
          return i2 ? a2 / 2 : a2;
        }, this.pointCoords = function (t4, e2) {
          var i2 = this.pointsList[t4];
          return {
            x: this.pointCoord(i2[0], e2, "t" === t4 || "b" === t4),
            y: this.pointCoord(i2[1], e2, "r" === t4 || "l" === t4)
          };
        };
      }
      t2.prototype.init = function (t3, e2) {
        var i2 = this.el.bbox();
        this.options = {};
        var a2 = this.el.selectize.defaults.points;
        for (var s2 in this.el.selectize.defaults) this.options[s2] = this.el.selectize.defaults[s2], void 0 !== e2[s2] && (this.options[s2] = e2[s2]);
        var r2 = ["points", "pointsExclude"];
        for (var s2 in r2) {
          var o2 = this.options[r2[s2]];
          "string" == typeof o2 ? o2 = o2.length > 0 ? o2.split(/\s*,\s*/i) : [] : "boolean" == typeof o2 && "points" === r2[s2] && (o2 = o2 ? a2 : []), this.options[r2[s2]] = o2;
        }
        this.options.points = [a2, this.options.points].reduce(function (t4, e3) {
          return t4.filter(function (t5) {
            return e3.indexOf(t5) > -1;
          });
        }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (t4, e3) {
          return t4.filter(function (t5) {
            return e3.indexOf(t5) < 0;
          });
        }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i2.x, i2.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t3) : this.selectRect(t3), this.observe(), this.cleanup();
      }, t2.prototype.selectPoints = function (t3) {
        return this.pointSelection.isSelected = t3, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
      }, t2.prototype.getPointArray = function () {
        var t3 = this.el.bbox();
        return this.el.array().valueOf().map(function (e2) {
          return [e2[0] - t3.x, e2[1] - t3.y];
        });
      }, t2.prototype.drawPoints = function () {
        for (var t3 = this, e2 = this.getPointArray(), i2 = 0, a2 = e2.length; i2 < a2; ++i2) {
          var s2 = function (e3) {
              return function (i3) {
                (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
                var a3 = i3.pageX || i3.touches[0].pageX,
                  s3 = i3.pageY || i3.touches[0].pageY;
                t3.el.fire("point", {
                  x: a3,
                  y: s3,
                  i: e3,
                  event: i3
                });
              };
            }(i2),
            r2 = this.drawPoint(e2[i2][0], e2[i2][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s2).on("mousedown", s2);
          this.pointSelection.set.add(r2);
        }
      }, t2.prototype.drawPoint = function (t3, e2) {
        var i2 = this.options.pointType;
        switch (i2) {
          case "circle":
            return this.drawCircle(t3, e2);
          case "rect":
            return this.drawRect(t3, e2);
          default:
            if ("function" == typeof i2) return i2.call(this, t3, e2);
            throw new Error("Unknown " + i2 + " point type!");
        }
      }, t2.prototype.drawCircle = function (t3, e2) {
        return this.nested.circle(this.options.pointSize).center(t3, e2);
      }, t2.prototype.drawRect = function (t3, e2) {
        return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t3, e2);
      }, t2.prototype.updatePointSelection = function () {
        var t3 = this.getPointArray();
        this.pointSelection.set.each(function (e2) {
          this.cx() === t3[e2][0] && this.cy() === t3[e2][1] || this.center(t3[e2][0], t3[e2][1]);
        });
      }, t2.prototype.updateRectSelection = function () {
        var t3 = this,
          e2 = this.el.bbox();
        if (this.rectSelection.set.get(0).attr({
          width: e2.width,
          height: e2.height
        }), this.options.points.length && this.options.points.map(function (i3, a2) {
          var s2 = t3.pointCoords(i3, e2);
          t3.rectSelection.set.get(a2 + 1).center(s2.x, s2.y);
        }), this.options.rotationPoint) {
          var i2 = this.rectSelection.set.length();
          this.rectSelection.set.get(i2 - 1).center(e2.width / 2, 20);
        }
      }, t2.prototype.selectRect = function (t3) {
        var e2 = this,
          i2 = this.el.bbox();
        function a2(t4) {
          return function (i3) {
            (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
            var a3 = i3.pageX || i3.touches[0].pageX,
              s3 = i3.pageY || i3.touches[0].pageY;
            e2.el.fire(t4, {
              x: a3,
              y: s3,
              event: i3
            });
          };
        }
        if (this.rectSelection.isSelected = t3, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i2.width, i2.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
          this.options.points.map(function (t4, s3) {
            var r3 = e2.pointCoords(t4, i2),
              o2 = e2.drawPoint(r3.x, r3.y).attr("class", e2.options.classPoints + "_" + t4).on("mousedown", a2(t4)).on("touchstart", a2(t4));
            e2.rectSelection.set.add(o2);
          }), this.rectSelection.set.each(function () {
            this.addClass(e2.options.classPoints);
          });
        }
        if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
          var s2 = function (t4) {
              (t4 = t4 || window.event).preventDefault ? t4.preventDefault() : t4.returnValue = false, t4.stopPropagation();
              var i3 = t4.pageX || t4.touches[0].pageX,
                a3 = t4.pageY || t4.touches[0].pageY;
              e2.el.fire("rot", {
                x: i3,
                y: a3,
                event: t4
              });
            },
            r2 = this.drawPoint(i2.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s2).on("mousedown", s2);
          this.rectSelection.set.add(r2);
        }
      }, t2.prototype.handler = function () {
        var t3 = this.el.bbox();
        this.nested.matrix(new SVG.Matrix(this.el).translate(t3.x, t3.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
      }, t2.prototype.observe = function () {
        var t3 = this;
        if (MutationObserver) {
          if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {
            t3.handler();
          }), this.observerInst.observe(this.el.node, {
            attributes: true
          });else try {
            this.observerInst.disconnect(), delete this.observerInst;
          } catch (t4) {}
        } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function () {
          t3.handler();
        });
      }, t2.prototype.cleanup = function () {
        !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {
          this.remove();
        }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {
          this.remove();
        }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
      }, SVG.extend(SVG.Element, {
        selectize: function (e2, i2) {
          return "object" == typeof e2 && (i2 = e2, e2 = true), (this.remember("_selectHandler") || new t2(this)).init(void 0 === e2 || e2, i2 || {}), this;
        }
      }), SVG.Element.prototype.selectize.defaults = {
        points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
        pointsExclude: [],
        classRect: "svg_select_boundingRect",
        classPoints: "svg_select_points",
        pointSize: 7,
        rotationPoint: true,
        deepSelect: false,
        pointType: "circle"
      };
    }(), function () {
      (function () {
        function t2(t3) {
          t3.remember("_resizeHandler", this), this.el = t3, this.parameters = {}, this.lastUpdateCall = null, this.p = t3.doc().node.createSVGPoint();
        }
        t2.prototype.transformPoint = function (t3, e2, i2) {
          return this.p.x = t3 - (this.offset.x - window.pageXOffset), this.p.y = e2 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i2 || this.m);
        }, t2.prototype._extractPosition = function (t3) {
          return {
            x: null != t3.clientX ? t3.clientX : t3.touches[0].clientX,
            y: null != t3.clientY ? t3.clientY : t3.touches[0].clientY
          };
        }, t2.prototype.init = function (t3) {
          var e2 = this;
          if (this.stop(), "stop" !== t3) {
            for (var i2 in this.options = {}, this.el.resize.defaults) this.options[i2] = this.el.resize.defaults[i2], void 0 !== t3[i2] && (this.options[i2] = t3[i2]);
            this.el.on("lt.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("rt.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("rb.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("lb.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("t.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("r.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("b.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("l.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("rot.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.el.on("point.resize", function (t4) {
              e2.resize(t4 || window.event);
            }), this.update();
          }
        }, t2.prototype.stop = function () {
          return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
        }, t2.prototype.resize = function (t3) {
          var e2 = this;
          this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
            x: window.pageXOffset,
            y: window.pageYOffset
          };
          var i2 = this._extractPosition(t3.detail.event);
          if (this.parameters = {
            type: this.el.type,
            p: this.transformPoint(i2.x, i2.y),
            x: t3.detail.x,
            y: t3.detail.y,
            box: this.el.bbox(),
            rotation: this.el.transform().rotation
          }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t3.detail.i) {
            var a2 = this.el.array().valueOf();
            this.parameters.i = t3.detail.i, this.parameters.pointCoords = [a2[t3.detail.i][0], a2[t3.detail.i][1]];
          }
          switch (t3.type) {
            case "lt":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3);
                if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                  i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y + i3[1]).size(this.parameters.box.width - i3[0], this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "rt":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 2);
                if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                  i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).size(this.parameters.box.width + i3[0], this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "rb":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 0);
                if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                  i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i3[0], this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "lb":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 1);
                if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                  i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).size(this.parameters.box.width - i3[0], this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "t":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 2);
                if (this.parameters.box.height - i3[1] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).height(this.parameters.box.height - i3[1]);
                }
              };
              break;
            case "r":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 0);
                if (this.parameters.box.width + i3[0] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i3[0]);
                }
              };
              break;
            case "b":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 0);
                if (this.parameters.box.height + i3[1] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i3[1]);
                }
              };
              break;
            case "l":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, 1);
                if (this.parameters.box.width - i3[0] > 0) {
                  if ("text" === this.parameters.type) return;
                  this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).width(this.parameters.box.width - i3[0]);
                }
              };
              break;
            case "rot":
              this.calc = function (t4, e3) {
                var i3 = t4 + this.parameters.p.x,
                  a3 = e3 + this.parameters.p.y,
                  s2 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),
                  r2 = Math.atan2(a3 - this.parameters.box.y - this.parameters.box.height / 2, i3 - this.parameters.box.x - this.parameters.box.width / 2),
                  o2 = this.parameters.rotation + 180 * (r2 - s2) / Math.PI + this.options.snapToAngle / 2;
                this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o2 - o2 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
              };
              break;
            case "point":
              this.calc = function (t4, e3) {
                var i3 = this.snapToGrid(t4, e3, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),
                  a3 = this.el.array().valueOf();
                a3[this.parameters.i][0] = this.parameters.pointCoords[0] + i3[0], a3[this.parameters.i][1] = this.parameters.pointCoords[1] + i3[1], this.el.plot(a3);
              };
          }
          this.el.fire("resizestart", {
            dx: this.parameters.x,
            dy: this.parameters.y,
            event: t3
          }), SVG.on(window, "touchmove.resize", function (t4) {
            e2.update(t4 || window.event);
          }), SVG.on(window, "touchend.resize", function () {
            e2.done();
          }), SVG.on(window, "mousemove.resize", function (t4) {
            e2.update(t4 || window.event);
          }), SVG.on(window, "mouseup.resize", function () {
            e2.done();
          });
        }, t2.prototype.update = function (t3) {
          if (t3) {
            var e2 = this._extractPosition(t3),
              i2 = this.transformPoint(e2.x, e2.y),
              a2 = i2.x - this.parameters.p.x,
              s2 = i2.y - this.parameters.p.y;
            this.lastUpdateCall = [a2, s2], this.calc(a2, s2), this.el.fire("resizing", {
              dx: a2,
              dy: s2,
              event: t3
            });
          } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
        }, t2.prototype.done = function () {
          this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
        }, t2.prototype.snapToGrid = function (t3, e2, i2, a2) {
          var s2;
          return void 0 !== a2 ? s2 = [(i2 + t3) % this.options.snapToGrid, (a2 + e2) % this.options.snapToGrid] : (i2 = null == i2 ? 3 : i2, s2 = [(this.parameters.box.x + t3 + (1 & i2 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e2 + (2 & i2 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t3 < 0 && (s2[0] -= this.options.snapToGrid), e2 < 0 && (s2[1] -= this.options.snapToGrid), t3 -= Math.abs(s2[0]) < this.options.snapToGrid / 2 ? s2[0] : s2[0] - (t3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e2 -= Math.abs(s2[1]) < this.options.snapToGrid / 2 ? s2[1] : s2[1] - (e2 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t3, e2, i2, a2);
        }, t2.prototype.constraintToBox = function (t3, e2, i2, a2) {
          var s2,
            r2,
            o2 = this.options.constraint || {};
          return void 0 !== a2 ? (s2 = i2, r2 = a2) : (s2 = this.parameters.box.x + (1 & i2 ? 0 : this.parameters.box.width), r2 = this.parameters.box.y + (2 & i2 ? 0 : this.parameters.box.height)), void 0 !== o2.minX && s2 + t3 < o2.minX && (t3 = o2.minX - s2), void 0 !== o2.maxX && s2 + t3 > o2.maxX && (t3 = o2.maxX - s2), void 0 !== o2.minY && r2 + e2 < o2.minY && (e2 = o2.minY - r2), void 0 !== o2.maxY && r2 + e2 > o2.maxY && (e2 = o2.maxY - r2), [t3, e2];
        }, t2.prototype.checkAspectRatio = function (t3, e2) {
          if (!this.options.saveAspectRatio) return t3;
          var i2 = t3.slice(),
            a2 = this.parameters.box.width / this.parameters.box.height,
            s2 = this.parameters.box.width + t3[0],
            r2 = this.parameters.box.height - t3[1],
            o2 = s2 / r2;
          return o2 < a2 ? (i2[1] = s2 / a2 - this.parameters.box.height, e2 && (i2[1] = -i2[1])) : o2 > a2 && (i2[0] = this.parameters.box.width - r2 * a2, e2 && (i2[0] = -i2[0])), i2;
        }, SVG.extend(SVG.Element, {
          resize: function (e2) {
            return (this.remember("_resizeHandler") || new t2(this)).init(e2 || {}), this;
          }
        }), SVG.Element.prototype.resize.defaults = {
          snapToAngle: 0.1,
          snapToGrid: 1,
          constraint: {},
          saveAspectRatio: false
        };
      }).call(this);
    }(), void 0 === window.Apex && (window.Apex = {});
    var qt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "initModules",
          value: function () {
            this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "isSeriesHidden", "highlightSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new y(this.ctx), this.ctx.axes = new et(this.ctx), this.ctx.core = new _t(this.ctx.el, this.ctx), this.ctx.config = new D({}), this.ctx.data = new _(this.ctx), this.ctx.grid = new Z(this.ctx), this.ctx.graphics = new k(this.ctx), this.ctx.coreUtils = new A(this.ctx), this.ctx.crosshairs = new it(this.ctx), this.ctx.events = new K(this.ctx), this.ctx.exports = new U(this.ctx), this.ctx.fill = new N(this.ctx), this.ctx.localization = new tt(this.ctx), this.ctx.options = new X(), this.ctx.responsive = new at(this.ctx), this.ctx.series = new V(this.ctx), this.ctx.theme = new st(this.ctx), this.ctx.formatters = new P(this.ctx), this.ctx.titleSubtitle = new rt(this.ctx), this.ctx.legend = new gt(this.ctx), this.ctx.toolbar = new ut(this.ctx), this.ctx.tooltip = new wt(this.ctx), this.ctx.dimensions = new ct(this.ctx), this.ctx.updateHelpers = new Ut(this.ctx), this.ctx.zoomPanSelection = new ft(this.ctx), this.ctx.w.globals.tooltip = new wt(this.ctx);
          }
        }]), t2;
      }(),
      Zt = function () {
        function t2(e2) {
          i(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return s(t2, [{
          key: "clear",
          value: function (t3) {
            var e2 = t3.isUpdating;
            this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({
              isUpdating: e2
            });
          }
        }, {
          key: "killSVG",
          value: function (t3) {
            t3.each(function () {
              this.removeClass("*"), this.off(), this.stop();
            }, true), t3.ungroup(), t3.clear();
          }
        }, {
          key: "clearDomElements",
          value: function (t3) {
            var e2 = this,
              i2 = t3.isUpdating,
              a2 = this.w.globals.dom.Paper.node;
            a2.parentNode && a2.parentNode.parentNode && !i2 && (a2.parentNode.parentNode.style.minHeight = "unset");
            var s2 = this.w.globals.dom.baseEl;
            s2 && this.ctx.eventList.forEach(function (t4) {
              s2.removeEventListener(t4, e2.ctx.events.documentEvent);
            });
            var r2 = this.w.globals.dom;
            if (null !== this.ctx.el) for (; this.ctx.el.firstChild;) this.ctx.el.removeChild(this.ctx.el.firstChild);
            this.killSVG(r2.Paper), r2.Paper.remove(), r2.elWrap = null, r2.elGraphical = null, r2.elLegendWrap = null, r2.elLegendForeign = null, r2.baseEl = null, r2.elGridRect = null, r2.elGridRectMask = null, r2.elGridRectBarMask = null, r2.elGridRectMarkerMask = null, r2.elForecastMask = null, r2.elNonForecastMask = null, r2.elDefs = null;
          }
        }]), t2;
      }(),
      $t = /* @__PURE__ */new WeakMap();
    var Jt = function () {
      function t2(e2, a2) {
        i(this, t2), this.opts = a2, this.ctx = this, this.w = new O(a2).init(), this.el = e2, this.w.globals.cuid = m.randomId(), this.w.globals.chartID = this.w.config.chart.id ? m.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new qt(this).initModules(), this.create = m.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
      }
      return s(t2, [{
        key: "render",
        value: function () {
          var t3 = this;
          return new Promise(function (e2, i2) {
            if (null !== t3.el) {
              void 0 === Apex._chartInstances && (Apex._chartInstances = []), t3.w.config.chart.id && Apex._chartInstances.push({
                id: t3.w.globals.chartID,
                group: t3.w.config.chart.group,
                chart: t3
              }), t3.setLocale(t3.w.config.chart.defaultLocale);
              var a2 = t3.w.config.chart.events.beforeMount;
              "function" == typeof a2 && a2(t3, t3.w), t3.events.fireEvent("beforeMount", [t3, t3.w]), window.addEventListener("resize", t3.windowResizeHandler), function (t4, e3) {
                var i3 = false;
                if (t4.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                  var a3 = t4.getBoundingClientRect();
                  "none" !== t4.style.display && 0 !== a3.width || (i3 = true);
                }
                var s3 = new ResizeObserver(function (a4) {
                  i3 && e3.call(t4, a4), i3 = true;
                });
                t4.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t4.children).forEach(function (t5) {
                  return s3.observe(t5);
                }) : s3.observe(t4), $t.set(e3, s3);
              }(t3.el.parentNode, t3.parentResizeHandler);
              var s2 = t3.el.getRootNode && t3.el.getRootNode(),
                r2 = m.is("ShadowRoot", s2),
                o2 = t3.el.ownerDocument,
                n2 = r2 ? s2.getElementById("apexcharts-css") : o2.getElementById("apexcharts-css");
              if (!n2) {
                var l2;
                (n2 = document.createElement("style")).id = "apexcharts-css", n2.textContent = '@keyframes opaque {\n  0% {\n    opacity: 0\n  }\n\n  to {\n    opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n\n  0%,\n  to {\n    opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  direction: ltr !important;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\nrect.legend-mouseover-inactive,\n.legend-mouseover-inactive rect,\n.legend-mouseover-inactive path,\n.legend-mouseover-inactive circle,\n.legend-mouseover-inactive line,\n.legend-mouseover-inactive text.apexcharts-yaxis-title-text,\n.legend-mouseover-inactive text.apexcharts-yaxis-label {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, .96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, .8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, .7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-z-value:empty,\n.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,\n.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,\n.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,\n.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,\n.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,\n.apexcharts-pan-icon,\n.apexcharts-reset-icon,\n.apexcharts-selection-icon,\n.apexcharts-toolbar-custom-icon,\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,\n.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,\n.apexcharts-reset-icon,\n.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, .7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,\n.apexcharts-datalabel.apexcharts-element-hidden,\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value,\n.apexcharts-datalabels,\n.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-radialbar-label {\n  cursor: pointer;\n}\n\n.apexcharts-annotation-rect,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-gridline,\n.apexcharts-line,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-point-annotation-label,\n.apexcharts-radar-series path:not(.apexcharts-marker),\n.apexcharts-radar-series polygon,\n.apexcharts-toolbar svg,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-xaxis-annotation-label,\n.apexcharts-yaxis-annotation-label,\n.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-tooltip-active .apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,\n.resize-triggers,\n.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers {\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows {\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers {\n  pointer-events: none\n}\n';
                var h2 = (null === (l2 = t3.opts.chart) || void 0 === l2 ? void 0 : l2.nonce) || t3.w.config.chart.nonce;
                h2 && n2.setAttribute("nonce", h2), r2 ? s2.prepend(n2) : o2.head.appendChild(n2);
              }
              var c2 = t3.create(t3.w.config.series, {});
              if (!c2) return e2(t3);
              t3.mount(c2).then(function () {
                "function" == typeof t3.w.config.chart.events.mounted && t3.w.config.chart.events.mounted(t3, t3.w), t3.events.fireEvent("mounted", [t3, t3.w]), e2(c2);
              }).catch(function (t4) {
                i2(t4);
              });
            } else i2(new Error("Element not found"));
          });
        }
      }, {
        key: "create",
        value: function (t3, e2) {
          var i2 = this,
            a2 = this.w;
          new qt(this).initModules();
          var s2 = this.w.globals;
          (s2.noData = false, s2.animationEnded = false, this.responsive.checkResponsiveConfig(e2), a2.config.xaxis.convertedCatToNumeric) && new F(a2.config).convertCatToNumericXaxis(a2.config, this.ctx);
          if (null === this.el) return s2.animationEnded = true, null;
          if (this.core.setupElements(), "treemap" === a2.config.chart.type && (a2.config.grid.show = false, a2.config.yaxis[0].show = false), 0 === s2.svgWidth) return s2.animationEnded = true, null;
          var r2 = t3;
          t3.forEach(function (t4, e3) {
            t4.hidden && (r2 = i2.legend.legendHelpers.getSeriesAfterCollapsing({
              realIndex: e3
            }));
          });
          var o2 = A.checkComboSeries(r2, a2.config.chart.type);
          s2.comboCharts = o2.comboCharts, s2.comboBarCount = o2.comboBarCount;
          var n2 = r2.every(function (t4) {
            return t4.data && 0 === t4.data.length;
          });
          (0 === r2.length || n2 && s2.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(r2), this.theme.init(), new W(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), s2.noData && s2.collapsedSeries.length !== s2.series.length && !a2.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), s2.axisCharts && (this.core.coreCalculations(), "category" !== a2.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = a2.globals.minX, this.ctx.toolbar.maxX = a2.globals.maxX), this.formatters.heatmapLabelFormatters(), new A(this).getLargestMarkerSize(), this.dimensions.plotCoords();
          var l2 = this.core.xySettings();
          this.grid.createGridMask();
          var h2 = this.core.plotChartType(r2, l2),
            c2 = new G(this);
          return c2.bringForward(), a2.config.dataLabels.background.enabled && c2.dataLabelsBackground(), this.core.shiftGraphPosition(), {
            elGraph: h2,
            xyRatios: l2,
            dimensions: {
              plot: {
                left: a2.globals.translateX,
                top: a2.globals.translateY,
                width: a2.globals.gridWidth,
                height: a2.globals.gridHeight
              }
            }
          };
        }
      }, {
        key: "mount",
        value: function () {
          var t3 = this,
            e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            i2 = this,
            a2 = i2.w;
          return new Promise(function (s2, r2) {
            if (null === i2.el) return r2(new Error("Not enough data to display or target element not found"));
            (null === e2 || a2.globals.allSeriesCollapsed) && i2.series.handleNoData(), i2.grid = new Z(i2);
            var o2,
              n2,
              l2 = i2.grid.drawGrid();
            (i2.annotations = new E(i2), i2.annotations.drawImageAnnos(), i2.annotations.drawTextAnnos(), "back" === a2.config.grid.position) && (l2 && a2.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (o2 = l2.elGridBorders) && void 0 !== o2 && o2.node && a2.globals.dom.elGraphical.add(l2.elGridBorders));
            if (Array.isArray(e2.elGraph)) for (var h2 = 0; h2 < e2.elGraph.length; h2++) a2.globals.dom.elGraphical.add(e2.elGraph[h2]);else a2.globals.dom.elGraphical.add(e2.elGraph);
            "front" === a2.config.grid.position && (l2 && a2.globals.dom.elGraphical.add(l2.el), null != l2 && null !== (n2 = l2.elGridBorders) && void 0 !== n2 && n2.node && a2.globals.dom.elGraphical.add(l2.elGridBorders));
            "front" === a2.config.xaxis.crosshairs.position && i2.crosshairs.drawXCrosshairs(), "front" === a2.config.yaxis[0].crosshairs.position && i2.crosshairs.drawYCrosshairs(), "treemap" !== a2.config.chart.type && i2.axes.drawAxis(a2.config.chart.type, l2);
            var c2 = new q(t3.ctx, l2),
              d2 = new Q(t3.ctx, l2);
            if (null !== l2 && (c2.xAxisLabelCorrections(l2.xAxisTickWidth), d2.setYAxisTextAlignments(), a2.config.yaxis.map(function (t4, e3) {
              -1 === a2.globals.ignoreYAxisIndexes.indexOf(e3) && d2.yAxisTitleRotate(e3, t4.opposite);
            })), i2.annotations.drawAxesAnnotations(), !a2.globals.noData) {
              if (a2.config.tooltip.enabled && !a2.globals.noData && i2.w.globals.tooltip.drawTooltip(e2.xyRatios), a2.globals.axisCharts && (a2.globals.isXNumeric || a2.config.xaxis.convertedCatToNumeric || a2.globals.isRangeBar)) (a2.config.chart.zoom.enabled || a2.config.chart.selection && a2.config.chart.selection.enabled || a2.config.chart.pan && a2.config.chart.pan.enabled) && i2.zoomPanSelection.init({
                xyRatios: e2.xyRatios
              });else {
                var g2 = a2.config.chart.toolbar.tools;
                ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function (t4) {
                  g2[t4] = false;
                });
              }
              a2.config.chart.toolbar.show && !a2.globals.allSeriesCollapsed && i2.toolbar.createToolbar();
            }
            a2.globals.memory.methodsToExec.length > 0 && a2.globals.memory.methodsToExec.forEach(function (t4) {
              t4.method(t4.params, false, t4.context);
            }), a2.globals.axisCharts || a2.globals.noData || i2.core.resizeNonAxisCharts(), s2(i2);
          });
        }
      }, {
        key: "destroy",
        value: function () {
          var t3, e2;
          window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t3 = this.parentResizeHandler, (e2 = $t.get(t3)) && (e2.disconnect(), $t.delete(t3));
          var i2 = this.w.config.chart.id;
          i2 && Apex._chartInstances.forEach(function (t4, e3) {
            t4.id === m.escapeString(i2) && Apex._chartInstances.splice(e3, 1);
          }), new Zt(this.ctx).clear({
            isUpdating: false
          });
        }
      }, {
        key: "updateOptions",
        value: function (t3) {
          var e2 = this,
            i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            a2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            r2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
            o2 = this.w;
          return o2.globals.selection = void 0, t3.series && (this.series.resetSeries(false, true, false), t3.series.length && t3.series[0].data && (t3.series = t3.series.map(function (t4, i3) {
            return e2.updateHelpers._extendSeries(t4, i3);
          })), this.updateHelpers.revertDefaultAxisMinMax()), t3.xaxis && (t3 = this.updateHelpers.forceXAxisUpdate(t3)), t3.yaxis && (t3 = this.updateHelpers.forceYAxisUpdate(t3)), o2.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t3.theme && (t3 = this.theme.updateThemeOptions(t3)), this.updateHelpers._updateOptions(t3, i2, a2, s2, r2);
        }
      }, {
        key: "updateSeries",
        value: function () {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t3, e2, i2);
        }
      }, {
        key: "appendSeries",
        value: function (t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            a2 = this.w.config.series.slice();
          return a2.push(t3), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a2, e2, i2);
        }
      }, {
        key: "appendData",
        value: function (t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = this;
          i2.w.globals.dataChanged = true, i2.series.getPreviousPaths();
          for (var a2 = i2.w.config.series.slice(), s2 = 0; s2 < a2.length; s2++) if (null !== t3[s2] && void 0 !== t3[s2]) for (var r2 = 0; r2 < t3[s2].data.length; r2++) a2[s2].data.push(t3[s2].data[r2]);
          return i2.w.config.series = a2, e2 && (i2.w.globals.initialSeries = m.clone(i2.w.config.series)), this.update();
        }
      }, {
        key: "update",
        value: function (t3) {
          var e2 = this;
          return new Promise(function (i2, a2) {
            new Zt(e2.ctx).clear({
              isUpdating: true
            });
            var s2 = e2.create(e2.w.config.series, t3);
            if (!s2) return i2(e2);
            e2.mount(s2).then(function () {
              "function" == typeof e2.w.config.chart.events.updated && e2.w.config.chart.events.updated(e2, e2.w), e2.events.fireEvent("updated", [e2, e2.w]), e2.w.globals.isDirty = true, i2(e2);
            }).catch(function (t4) {
              a2(t4);
            });
          });
        }
      }, {
        key: "getSyncedCharts",
        value: function () {
          var t3 = this.getGroupedCharts(),
            e2 = [this];
          return t3.length && (e2 = [], t3.forEach(function (t4) {
            e2.push(t4);
          })), e2;
        }
      }, {
        key: "getGroupedCharts",
        value: function () {
          var t3 = this;
          return Apex._chartInstances.filter(function (t4) {
            if (t4.group) return true;
          }).map(function (e2) {
            return t3.w.config.chart.group === e2.group ? e2.chart : t3;
          });
        }
      }, {
        key: "toggleSeries",
        value: function (t3) {
          return this.series.toggleSeries(t3);
        }
      }, {
        key: "highlightSeriesOnLegendHover",
        value: function (t3, e2) {
          return this.series.toggleSeriesOnHover(t3, e2);
        }
      }, {
        key: "showSeries",
        value: function (t3) {
          this.series.showSeries(t3);
        }
      }, {
        key: "hideSeries",
        value: function (t3) {
          this.series.hideSeries(t3);
        }
      }, {
        key: "highlightSeries",
        value: function (t3) {
          this.series.highlightSeries(t3);
        }
      }, {
        key: "isSeriesHidden",
        value: function (t3) {
          this.series.isSeriesHidden(t3);
        }
      }, {
        key: "resetSeries",
        value: function () {
          var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
            e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this.series.resetSeries(t3, e2);
        }
      }, {
        key: "addEventListener",
        value: function (t3, e2) {
          this.events.addEventListener(t3, e2);
        }
      }, {
        key: "removeEventListener",
        value: function (t3, e2) {
          this.events.removeEventListener(t3, e2);
        }
      }, {
        key: "addXaxisAnnotation",
        value: function (t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a2 = this;
          i2 && (a2 = i2), a2.annotations.addXaxisAnnotationExternal(t3, e2, a2);
        }
      }, {
        key: "addYaxisAnnotation",
        value: function (t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a2 = this;
          i2 && (a2 = i2), a2.annotations.addYaxisAnnotationExternal(t3, e2, a2);
        }
      }, {
        key: "addPointAnnotation",
        value: function (t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            a2 = this;
          i2 && (a2 = i2), a2.annotations.addPointAnnotationExternal(t3, e2, a2);
        }
      }, {
        key: "clearAnnotations",
        value: function () {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,
            e2 = this;
          t3 && (e2 = t3), e2.annotations.clearAnnotations(e2);
        }
      }, {
        key: "removeAnnotation",
        value: function (t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,
            i2 = this;
          e2 && (i2 = e2), i2.annotations.removeAnnotation(i2, t3);
        }
      }, {
        key: "getChartArea",
        value: function () {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
        }
      }, {
        key: "getSeriesTotalXRange",
        value: function (t3, e2) {
          return this.coreUtils.getSeriesTotalsXRange(t3, e2);
        }
      }, {
        key: "getHighestValueInSeries",
        value: function () {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new J(this.ctx).getMinYMaxY(t3).highestY;
        }
      }, {
        key: "getLowestValueInSeries",
        value: function () {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          return new J(this.ctx).getMinYMaxY(t3).lowestY;
        }
      }, {
        key: "getSeriesTotal",
        value: function () {
          return this.w.globals.seriesTotals;
        }
      }, {
        key: "toggleDataPointSelection",
        value: function (t3, e2) {
          return this.updateHelpers.toggleDataPointSelection(t3, e2);
        }
      }, {
        key: "zoomX",
        value: function (t3, e2) {
          this.ctx.toolbar.zoomUpdateOptions(t3, e2);
        }
      }, {
        key: "setLocale",
        value: function (t3) {
          this.localization.setCurrentLocaleValues(t3);
        }
      }, {
        key: "dataURI",
        value: function (t3) {
          return new U(this.ctx).dataURI(t3);
        }
      }, {
        key: "exportToCSV",
        value: function () {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return new U(this.ctx).exportToCSV(t3);
        }
      }, {
        key: "paper",
        value: function () {
          return this.w.globals.dom.Paper;
        }
      }, {
        key: "_parentResizeCallback",
        value: function () {
          this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
        }
      }, {
        key: "_windowResize",
        value: function () {
          var t3 = this;
          clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {
            t3.w.globals.resized = true, t3.w.globals.dataChanged = false, t3.ctx.update();
          }, 150);
        }
      }, {
        key: "_windowResizeHandler",
        value: function () {
          var t3 = this.w.config.chart.redrawOnWindowResize;
          "function" == typeof t3 && (t3 = t3()), t3 && this._windowResize();
        }
      }], [{
        key: "getChartByID",
        value: function (t3) {
          var e2 = m.escapeString(t3);
          if (Apex._chartInstances) {
            var i2 = Apex._chartInstances.filter(function (t4) {
              return t4.id === e2;
            })[0];
            return i2 && i2.chart;
          }
        }
      }, {
        key: "initOnLoad",
        value: function () {
          for (var e2 = document.querySelectorAll("[data-apexcharts]"), i2 = 0; i2 < e2.length; i2++) {
            new t2(e2[i2], JSON.parse(e2[i2].getAttribute("data-options"))).render();
          }
        }
      }, {
        key: "exec",
        value: function (t3, e2) {
          var i2 = this.getChartByID(t3);
          if (i2) {
            i2.w.globals.isExecCalled = true;
            var a2 = null;
            if (-1 !== i2.publicMethods.indexOf(e2)) {
              for (var s2 = arguments.length, r2 = new Array(s2 > 2 ? s2 - 2 : 0), o2 = 2; o2 < s2; o2++) r2[o2 - 2] = arguments[o2];
              a2 = i2[e2].apply(i2, r2);
            }
            return a2;
          }
        }
      }, {
        key: "merge",
        value: function (t3, e2) {
          return m.extend(t3, e2);
        }
      }]), t2;
    }();
    module2.exports = Jt;
  }
});

// .beyond/uimport/temp/apexcharts.3.54.1.js
var apexcharts_3_54_1_exports = {};
__export(apexcharts_3_54_1_exports, {
  default: () => apexcharts_3_54_1_default
});
module.exports = __toCommonJS(apexcharts_3_54_1_exports);
__reExport(apexcharts_3_54_1_exports, __toESM(require_apexcharts_common()), module.exports);
var import_apexcharts = __toESM(require_apexcharts_common());
var apexcharts_3_54_1_default = import_apexcharts.default;
/*!
 * ApexCharts v3.54.1
 * (c) 2018-2024 ApexCharts
 * Released under the MIT License.
 */
};

code(module, require);
_exports(module.exports);
}}});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9hcGV4Y2hhcnRzL2Rpc3QvYXBleGNoYXJ0cy5jb21tb24uanMiLCIuLi8uYmV5b25kL3VpbXBvcnQvdGVtcC9hcGV4Y2hhcnRzLjMuNTQuMS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlX2FwZXhjaGFydHNfY29tbW9uIiwiX19jb21tb25KUyIsIm5vZGVfbW9kdWxlcy9hcGV4Y2hhcnRzL2Rpc3QvYXBleGNoYXJ0cy5jb21tb24uanMiLCJleHBvcnRzIiwibW9kdWxlMiIsInQiLCJ0MiIsImUyIiwibGVuZ3RoIiwiaTIiLCJhMiIsIkFycmF5IiwiZSIsIlJlZmVyZW5jZUVycm9yIiwiaSIsIlR5cGVFcnJvciIsImEiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIngiLCJrZXkiLCJzIiwicHJvdG90eXBlIiwiciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaXNBcnJheSIsInYiLCJzMiIsIm4iLCJkb25lIiwidmFsdWUiLCJ0MyIsImYiLCJyMiIsIm8yIiwibjIiLCJjYWxsIiwibmV4dCIsInJldHVybiIsIm8iLCJjIiwibCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiaTMiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsImgiLCJjcmVhdGUiLCJ1IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJkIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImUzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHVzaCIsImciLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJsMiIsImgyIiwidDQiLCJwIiwiZnJvbSIsInRvUHJpbWl0aXZlIiwiU3RyaW5nIiwiTnVtYmVyIiwiYiIsInRvU3RyaW5nIiwic2xpY2UiLCJuYW1lIiwidGVzdCIsIm0iLCJzcGxpdCIsInBhcnNlSW50IiwiTWF0aCIsInJvdW5kIiwiaXNDb2xvckhleCIsInNoYWRlSGV4Q29sb3IiLCJzaGFkZVJHQkNvbG9yIiwiYXNzaWduIiwiYTMiLCJoYXNPd25Qcm9wZXJ0eSIsImlzT2JqZWN0IiwiZXh0ZW5kIiwibWFwIiwiaXMiLCJjbG9uZSIsImxvZyIsIkxOMTAiLCJwb3ciLCJmbG9vciIsImxvZzEwIiwicGFyc2VGbG9hdCIsImlzSW50ZWdlciIsInRvUHJlY2lzaW9uIiwicmFuZG9tIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsImdldENvbXB1dGVkU3R5bGUiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsInkiLCJyZWR1Y2UiLCJ0NSIsIm1hdGNoIiwiUmVnRXhwIiwiam9pbiIsIlBJIiwic2luIiwiY29zIiwic3BsaWNlIiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwic3R5bGUiLCJtYXgiLCJpc05hTiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsIndpbmRvdyIsImFicyIsImN0eCIsInciLCJzZXRFYXNpbmdGdW5jdGlvbnMiLCJnbG9iYWxzIiwiZWFzaW5nIiwiY29uZmlnIiwiY2hhcnQiLCJhbmltYXRpb25zIiwiYXR0ciIsImFuaW1hdGUiLCJvcGFjaXR5IiwiYWZ0ZXJBbGwiLCJlbCIsInJlYWxJbmRleCIsImoiLCJmaWxsIiwicGF0aEZyb20iLCJwYXRoVG8iLCJzcGVlZCIsImRlbGF5IiwiYzIiLCJhbmltYXRlR3JhZHVhbGx5IiwiZW5hYmxlZCIsImR5bmFtaWNBbmltYXRpb24iLCJkYXRhQ2hhbmdlZCIsInR5cGUiLCJtb3JwaFNWRyIsImNvbWJvQ2hhcnRzIiwiZGVsYXllZEVsZW1lbnRzIiwicmVtb3ZlIiwiYWRkIiwiYW5pbWF0aW9uRW5kZWQiLCJzaG93RGVsYXllZEVsZW1lbnRzIiwiZXZlbnRzIiwiYW5pbWF0aW9uRW5kIiwiY29uY2F0IiwiZ3JpZEhlaWdodCIsInNob3VsZEFuaW1hdGUiLCJwbG90IiwiaXNOdW1iZXIiLCJzZXJpZXMiLCJtYXhWYWxzSW5BcnJheUluZGV4IiwiYW5pbWF0aW9uQ29tcGxldGVkIiwidW5maWx0ZXIiLCJTVkciLCJGaWx0ZXIiLCJzaXplIiwic3RhdGVzIiwibm9ybWFsIiwiYXBwbHlGaWx0ZXIiLCJkcm9wU2hhZG93Iiwibm9kZSIsImludGVuc2l0eSIsImFkZFNoYWRvdyIsImNvbXBvbmVudFRyYW5zZmVyIiwicmdiIiwic2xvcGUiLCJpbnRlcmNlcHQiLCJmaWx0ZXJlciIsInNldEF0dHJpYnV0ZSIsIl9zY2FsZUZpbHRlclNpemUiLCJhZGROb3JtYWxGaWx0ZXIiLCJhZGRMaWdodGVuRmlsdGVyIiwiYWRkRGFya2VuRmlsdGVyIiwiYmx1ciIsImNvbG9yIiwiZW5hYmxlZE9uU2VyaWVzIiwiZmxvb2QiLCJjb21wb3NpdGUiLCJzb3VyY2VBbHBoYSIsIm9mZnNldCIsImdhdXNzaWFuQmx1ciIsIm1lcmdlIiwic291cmNlIiwiYmxlbmQiLCJub1VzZXJTcGFjZU9uVXNlIiwiZDIiLCJpc01zRWRnZSIsImlzU2FmYXJpIiwiaXNGaXJlZm94Iiwic2VsZWN0ZWREYXRhUG9pbnRzIiwiYWN0aXZlIiwiayIsInMzIiwicjMiLCJvMyIsInNxcnQiLCJtaW4iLCJnMiIsInUyIiwiZjIiLCJwMiIsIngyIiwiYjIiLCJ2MiIsIm9yaWdQb2ludCIsIm0yIiwieTIiLCJ3MiIsImsyIiwiZG9tIiwiUGFwZXIiLCJsaW5lIiwieDEiLCJ5MSIsInN0cm9rZSIsInJlY3QiLCJyeCIsInJ5IiwicG9seWdvbiIsImNpcmNsZSIsInN0cm9rZVdpZHRoIiwiZmlsbE9wYWNpdHkiLCJzdHJva2VPcGFjaXR5IiwiY2xhc3NlcyIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VEYXNoQXJyYXkiLCJsaW5lQ2FwIiwicGF0aCIsImNsYXNzIiwiZ3JvdXAiLCJhbmltYXRpb25EZWxheSIsImluaXRpYWxTcGVlZCIsImRhdGFDaGFuZ2VTcGVlZCIsImNsYXNzTmFtZSIsImNoYXJ0VHlwZSIsInNob3VsZENsaXBUb0dyaWQiLCJiaW5kRXZlbnRzT25QYXRocyIsImRyYXdTaGFkb3ciLCJBMiIsIlMyIiwiQzIiLCJMMiIsIlAyIiwiTTIiLCJJMiIsInJlc2l6ZWQiLCJUMiIsImRhc2hBcnJheSIsInoyIiwiWDIiLCJkcmF3UGF0aCIsImlzSG9yaXpvbnRhbCIsImN1aWQiLCJnZXREZWZhdWx0RmlsdGVyIiwiRTIiLCJhZGRFdmVudExpc3RlbmVyIiwicGF0aE1vdXNlRW50ZXIiLCJwYXRoTW91c2VMZWF2ZSIsInBhdGhNb3VzZURvd24iLCJZMiIsImFuaW1hdGVQYXRoc0dyYWR1YWxseSIsInBhdHRlcm4iLCJoZXhUb1JnYmEiLCJncmFkaWVudCIsImF0IiwiZ3JpZFdpZHRoIiwiZ3JhZGllbnRVbml0cyIsImN4IiwiY3kiLCJmeCIsImZ5IiwidG8iLCJ0ZXh0IiwibWF4V2lkdGgiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJnZXRUZXh0UmVjdHMiLCJ0ZXh0QW5jaG9yIiwiZm9udFdlaWdodCIsImZvcmVDb2xvciIsImNzc0NsYXNzIiwiaXNQbGFpblRleHQiLCJkb21pbmFudEJhc2VsaW5lIiwiZ2V0VGV4dEJhc2VkT25NYXhXaWR0aCIsInRzcGFuIiwibmV3TGluZSIsInBsYWluIiwiZ2V0TWFya2VyUGF0aCIsInBvaW50U3Ryb2tlQ29sb3IiLCJwb2ludFN0cm9rZURhc2hBcnJheSIsInBvaW50U3Ryb2tlV2lkdGgiLCJwb2ludEZpbGxDb2xvciIsInBvaW50RmlsbE9wYWNpdHkiLCJwb2ludFN0cm9rZU9wYWNpdHkiLCJzaGFwZSIsInBTaXplIiwiZHJhd01hcmtlclNoYXBlIiwiZ2V0QXR0cmlidXRlIiwiZGF0YVBvaW50TW91c2VFbnRlciIsInNlcmllc0luZGV4IiwiZGF0YVBvaW50SW5kZXgiLCJmaXJlRXZlbnQiLCJob3ZlciIsImlzVG91Y2hEZXZpY2UiLCJkYXRhUG9pbnRNb3VzZUxlYXZlIiwiYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb24iLCJzZWxlY3QiLCJtZW1iZXJzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwiZ2V0QkJveCIsImRyYXdUZXh0IiwiYmJveCIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsInRleHRDb250ZW50IiwiZ2V0U3ViU3RyaW5nTGVuZ3RoIiwiQSIsInNlcmllc0dyb3VwcyIsInNlcmllc05hbWVzIiwiZ2V0U3RhY2tlZFNlcmllc1RvdGFscyIsInlheGlzIiwic29tZSIsInNlcmllc05hbWUiLCJuMyIsImwzIiwibDQiLCJjb25zb2xlIiwid2FybiIsInNoaWZ0Iiwic2VyaWVzWUF4aXNNYXAiLCJzZXJpZXNZQXhpc1JldmVyc2VNYXAiLCJkYXRhIiwiZXZlcnkiLCJ4YXhpcyIsImNvbnZlcnRlZENhdFRvTnVtZXJpYyIsImxhYmVscyIsImZvcm1hdHRlciIsIm1pblgiLCJtYXJrZXJzIiwiZGlzY3JldGUiLCJzaXplT2Zmc2V0IiwibGFyZ2VzdFNpemUiLCJzZXJpZXNUb3RhbHMiLCJzZXJpZXNYIiwic2VyaWVzUGVyY2VudCIsInN0YWNrZWRTZXJpZXNUb3RhbHMiLCJ5UmFuZ2UiLCJpc011bHRpcGxlWUF4aXMiLCJtaW5ZQXJyIiwibWF4WUFyciIsIm1pblkiLCJtYXhZIiwieFJhbmdlIiwibWF4WCIsInpSYW5nZSIsIm1heFoiLCJtaW5aIiwiTUlOX1ZBTFVFIiwiaGFzTmVncyIsImxvZ2FyaXRobWljIiwiZ2V0QmFzZUxvZyIsImxvZ0Jhc2UiLCJ5UmF0aW8iLCJpbnZlcnRlZFlSYXRpbyIsInpSYXRpbyIsInhSYXRpbyIsImludmVydGVkWFJhdGlvIiwiYmFzZUxpbmVJbnZlcnRlZFkiLCJiYXNlTGluZVkiLCJiYXNlTGluZVgiLCJzZXJpZXNMb2ciLCJnZXRMb2dWYWwiLCJpbnZhbGlkTG9nU2NhbGUiLCJ5TG9nUmF0aW8iLCJsb2dZUmFuZ2UiLCJNQVhfVkFMVUUiLCJ0NiIsImRyYXciLCJjb21ib0JhckNvdW50IiwiZXh0ZW5kWUF4aXMiLCJhbm5vdGF0aW9ucyIsImV4dGVuZFlBeGlzQW5ub3RhdGlvbnMiLCJleHRlbmRYQXhpc0Fubm90YXRpb25zIiwicG9pbnRzIiwiZXh0ZW5kUG9pbnRBbm5vdGF0aW9ucyIsIlMiLCJhbm5vQ3R4IiwibGFiZWwiLCJvcmllbnRhdGlvbiIsImJhc2VFbCIsInF1ZXJ5U2VsZWN0b3IiLCJwb3NpdGlvbiIsImdyYXBoaWNzIiwicm90YXRlQXJvdW5kQ2VudGVyIiwidHJpbSIsInBhZGRpbmciLCJkcmF3UmVjdCIsImJhclBhZEZvck51bWVyaWNBeGlzIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJpZCIsInBhcmVudE5vZGUiLCJhZGRCYWNrZ3JvdW5kVG9Bbm5vIiwiaW5zZXJ0QmVmb3JlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJjbGljayIsImludmVydEF4aXMiLCJjYXRlZ29yeUxhYmVscyIsImJhckhlaWdodCIsInlBeGlzSW5kZXgiLCJtYXJrZXIiLCJyZXZlcnNlZCIsImluY2x1ZGVzIiwieVAiLCJjbGlwcGVkIiwiaW52ZXJzZWRSZXZlcnNlZEF4aXMiLCJkYXRhRm9ybWF0WE51bWVyaWMiLCJzcGFya2xpbmUiLCJnZXRTdHJpbmdYIiwiYmFyV2lkdGgiLCJDIiwiaGVscGVycyIsImdldFgxWDIiLCJkcmF3TGluZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYXBwZW5kQ2hpbGQiLCJmaWxsQ29sb3IiLCJyZWwiLCJzZXRPcmllbnRhdGlvbnMiLCJhZGRYYXhpc0Fubm90YXRpb24iLCJMIiwibW9udGhzMzEiLCJtb250aHMzMCIsImRheXNDbnRPZlllYXIiLCJwYXJzZURhdGUiLCJEYXRlIiwicGFyc2UiLCJkYXRldGltZVVUQyIsInRvSVNPU3RyaW5nIiwic3Vic3RyIiwiZ2V0VGltZSIsInRvVVRDU3RyaW5nIiwiZ2V0VGltZVN0YW1wIiwibG9jYWxlIiwibW9udGhzIiwic2hvcnRNb250aHMiLCJkYXlzIiwic2hvcnREYXlzIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0TW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0RGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0SG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0TWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiY2hhckF0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJnZXRVVENEYXkiLCJnZXREYXkiLCJmb3JtYXREYXRlIiwibWluTWlsbGlzZWNvbmQiLCJtYXhNaWxsaXNlY29uZCIsIm1pblNlY29uZCIsIm1heFNlY29uZCIsIm1pbk1pbnV0ZSIsIm1heE1pbnV0ZSIsIm1pbkhvdXIiLCJtYXhIb3VyIiwibWluRGF0ZSIsIm1heERhdGUiLCJtaW5Nb250aCIsIm1heE1vbnRoIiwibWluWWVhciIsIm1heFllYXIiLCJkZXRlcm1pbmVEYXlzT2ZNb250aHMiLCJpc0xlYXBZZWFyIiwibW9udGhNb2QiLCJQIiwidG9vbHRpcEtleUZvcm1hdCIsInRvb2x0aXAiLCJmb3JtYXQiLCJ5VmFsdWVEZWNpbWFsIiwidG9GaXhlZCIsImRlY2ltYWxzSW5GbG9hdCIsInhheGlzVG9vbHRpcEZvcm1hdHRlciIsImRlZmF1bHRHZW5lcmFsRm9ybWF0dGVyIiwidHRLZXlGb3JtYXR0ZXIiLCJ0dFpGb3JtYXR0ZXIiLCJsZWdlbmRGb3JtYXR0ZXIiLCJ4TGFiZWxGb3JtYXR0ZXIiLCJpc0Jhckhvcml6b250YWwiLCJ0dFZhbCIsInoiLCJsZWdlbmQiLCJ5TGFiZWxGb3JtYXR0ZXJzIiwieHlDaGFydHMiLCJkZWZhdWx0WUZvcm1hdHRlciIsInlBeGlzU2NhbGUiLCJyZXN1bHQiLCJuaWNlTWF4IiwibmljZU1pbiIsIk0iLCJ4TGFiZWxGb3JtYXQiLCJkYXRlRm9ybWF0dGVyIiwidW5pdCIsInJvdGF0ZVhMYWJlbHMiLCJyb3RhdGUiLCJzaG93RHVwbGljYXRlcyIsInRpbWVTY2FsZSIsInRleHRSZWN0IiwiaXNCb2xkIiwidGlja0Ftb3VudCIsInNraXBGaXJzdFRpbWVsaW5lbGFiZWwiLCJza2lwTGFzdFRpbWVsaW5lbGFiZWwiLCJoaWRlT3ZlcmxhcHBpbmdMYWJlbHMiLCJyZXZlcnNlIiwiY29sbGFwc2VkU2VyaWVzSW5kaWNlcyIsInNob3ciLCJ5QXhpc0FsbFNlcmllc0NvbGxhcHNlZCIsInNob3dGb3JOdWxsU2VyaWVzIiwiaXNTZXJpZXNOdWxsIiwidGhlbWUiLCJwdXNoRXh0cmFDb2xvcnMiLCJ0cmFuc2xhdGVZIiwib3Bwb3NpdGUiLCJJIiwiYXhlc1V0aWxzIiwiZ2V0WTFZMiIsIl9nZXRZQXhpc0Fubm90YXRpb25XaWR0aCIsInRyYW5zbGF0ZVlBeGlzSW5kZXgiLCJpc1lBeGlzSGlkZGVuIiwiYWRkWWF4aXNBbm5vdGF0aW9uIiwiVCIsInN0cm9rZUNvbG9yIiwicFJhZGl1cyIsInJhZGl1cyIsImRyYXdNYXJrZXIiLCJjdXN0b21TVkciLCJ0cmFuc2Zvcm0iLCJpbm5lckhUTUwiLCJpbWFnZSIsImFkZEltYWdlIiwiYXBwZW5kVG8iLCJhZGRQb2ludEFubm90YXRpb24iLCJvcHRpb25zIiwidG9vbGJhciIsImV4cG9ydFRvU1ZHIiwiZXhwb3J0VG9QTkciLCJleHBvcnRUb0NTViIsIm1lbnUiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25ab29tIiwiem9vbUluIiwiem9vbU91dCIsInBhbiIsInJlc2V0IiwiWCIsInlBeGlzIiwic2hvd0Fsd2F5cyIsInN0ZXBTaXplIiwiZm9yY2VOaWNlU2NhbGUiLCJmbG9hdGluZyIsIm1pbldpZHRoIiwiYWxpZ24iLCJjb2xvcnMiLCJheGlzQm9yZGVyIiwiYXhpc1RpY2tzIiwidGl0bGUiLCJjcm9zc2hhaXJzIiwicG9pbnRBbm5vdGF0aW9uIiwieUF4aXNBbm5vdGF0aW9uIiwieEF4aXNBbm5vdGF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwidGV4dHMiLCJpbWFnZXMiLCJzaGFwZXMiLCJsb2NhbGVzIiwiZGVmYXVsdExvY2FsZSIsImJlZm9yZU1vdW50IiwibW91bnRlZCIsInVwZGF0ZWQiLCJtb3VzZU1vdmUiLCJ4QXhpc0xhYmVsQ2xpY2siLCJsZWdlbmRDbGljayIsIm1hcmtlckNsaWNrIiwiYmVmb3JlWm9vbSIsImJlZm9yZVJlc2V0Wm9vbSIsInpvb21lZCIsInNjcm9sbGVkIiwiYnJ1c2hTY3JvbGxlZCIsInBhcmVudEhlaWdodE9mZnNldCIsInJlZHJhd09uUGFyZW50UmVzaXplIiwicmVkcmF3T25XaW5kb3dSZXNpemUiLCJub25jZSIsImJydXNoIiwiYXV0b1NjYWxlWWF4aXMiLCJ0YXJnZXQiLCJ0YXJnZXRzIiwic3RhY2tlZCIsInN0YWNrT25seUJhciIsInN0YWNrVHlwZSIsInRvb2xzIiwiZG93bmxvYWQiLCJ6b29tIiwiem9vbWluIiwiem9vbW91dCIsImN1c3RvbUljb25zIiwiZXhwb3J0IiwiY3N2IiwiZmlsZW5hbWUiLCJjb2x1bW5EZWxpbWl0ZXIiLCJoZWFkZXJDYXRlZ29yeSIsImhlYWRlclZhbHVlIiwiY2F0ZWdvcnlGb3JtYXR0ZXIiLCJ2YWx1ZUZvcm1hdHRlciIsInBuZyIsInN2ZyIsInNjYWxlIiwiYXV0b1NlbGVjdGVkIiwiYWxsb3dNb3VzZVdoZWVsWm9vbSIsInpvb21lZEFyZWEiLCJwbG90T3B0aW9ucyIsImlzU2xvcGVDaGFydCIsImFyZWEiLCJmaWxsVG8iLCJiYXIiLCJob3Jpem9udGFsIiwiY29sdW1uV2lkdGgiLCJkaXN0cmlidXRlZCIsImJvcmRlclJhZGl1c0FwcGxpY2F0aW9uIiwiYm9yZGVyUmFkaXVzV2hlblN0YWNrZWQiLCJyYW5nZUJhck92ZXJsYXAiLCJyYW5nZUJhckdyb3VwUm93cyIsImhpZGVaZXJvQmFyc1doZW5Hcm91cGVkIiwiaXNEdW1iYmVsbCIsImR1bWJiZWxsQ29sb3JzIiwiaXNGdW5uZWwiLCJpc0Z1bm5lbDNkIiwicmFuZ2VzIiwiYmFja2dyb3VuZEJhckNvbG9ycyIsImJhY2tncm91bmRCYXJPcGFjaXR5IiwiYmFja2dyb3VuZEJhclJhZGl1cyIsImRhdGFMYWJlbHMiLCJtYXhJdGVtcyIsImhpZGVPdmVyZmxvd2luZ0xhYmVscyIsInRvdGFsIiwiYnViYmxlIiwielNjYWxpbmciLCJtaW5CdWJibGVSYWRpdXMiLCJtYXhCdWJibGVSYWRpdXMiLCJjYW5kbGVzdGljayIsInVwd2FyZCIsImRvd253YXJkIiwid2ljayIsInVzZUZpbGxDb2xvciIsImJveFBsb3QiLCJ1cHBlciIsImxvd2VyIiwiaGVhdG1hcCIsImVuYWJsZVNoYWRlcyIsInNoYWRlSW50ZW5zaXR5IiwicmV2ZXJzZU5lZ2F0aXZlU2hhZGUiLCJ1c2VGaWxsQ29sb3JBc1N0cm9rZSIsImNvbG9yU2NhbGUiLCJpbnZlcnNlIiwidHJlZW1hcCIsInJhZGlhbEJhciIsImludmVyc2VPcmRlciIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImhvbGxvdyIsIm1hcmdpbiIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsImltYWdlT2Zmc2V0WCIsImltYWdlT2Zmc2V0WSIsImltYWdlQ2xpcHBlZCIsInRyYWNrIiwiYmFyTGFiZWxzIiwidXNlU2VyaWVzQ29sb3JzIiwib25DbGljayIsInBpZSIsImN1c3RvbVNjYWxlIiwiZXhwYW5kT25DbGljayIsIm1pbkFuZ2xlVG9TaG93TGFiZWwiLCJkb251dCIsInBvbGFyQXJlYSIsInJpbmdzIiwic3Bva2VzIiwiY29ubmVjdG9yQ29sb3JzIiwicmFkYXIiLCJwb2x5Z29ucyIsInN0cm9rZUNvbG9ycyIsInNoYWRlIiwiZ3JhZGllbnRUb0NvbG9ycyIsImludmVyc2VDb2xvcnMiLCJvcGFjaXR5RnJvbSIsIm9wYWNpdHlUbyIsInN0b3BzIiwiY29sb3JTdG9wcyIsInNyYyIsImZvcmVjYXN0RGF0YVBvaW50cyIsImNvdW50IiwiZ3JpZCIsImxpbmVzIiwicm93IiwiY29sdW1uIiwic2hvd0ZvclNpbmdsZVNlcmllcyIsInNob3dGb3JaZXJvU2VyaWVzIiwiaG9yaXpvbnRhbEFsaWduIiwidG9vbHRpcEhvdmVyRm9ybWF0dGVyIiwiY3VzdG9tTGVnZW5kSXRlbXMiLCJmaWxsQ29sb3JzIiwiY3VzdG9tSFRNTCIsIml0ZW1NYXJnaW4iLCJ2ZXJ0aWNhbCIsIm9uSXRlbUNsaWNrIiwidG9nZ2xlRGF0YVNlcmllcyIsIm9uSXRlbUhvdmVyIiwiaGlnaGxpZ2h0RGF0YVNlcmllcyIsInNob3dOdWxsRGF0YVBvaW50cyIsIm9uRGJsQ2xpY2siLCJub0RhdGEiLCJ2ZXJ0aWNhbEFsaWduIiwicmVzcG9uc2l2ZSIsInN1YnRpdGxlIiwiY3VydmUiLCJzaGFyZWQiLCJoaWRlRW1wdHlTZXJpZXMiLCJmb2xsb3dDdXJzb3IiLCJpbnRlcnNlY3QiLCJjdXN0b20iLCJmaWxsU2VyaWVzQ29sb3IiLCJvbkRhdGFzZXRIb3ZlciIsIml0ZW1zIiwiZGlzcGxheSIsImZpeGVkIiwiY2F0ZWdvcmllcyIsIm92ZXJ3cml0ZUNhdGVnb3JpZXMiLCJyb3RhdGVBbHdheXMiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJkYXRldGltZUZvcm1hdHRlciIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJncm91cHMiLCJ0aWNrUGxhY2VtZW50IiwicmFuZ2UiLCJjb2xvckZyb20iLCJjb2xvclRvIiwibW9kZSIsInBhbGV0dGUiLCJtb25vY2hyb21lIiwic2hhZGVUbyIsIkUiLCJ4QXhpc0Fubm90YXRpb25zIiwieUF4aXNBbm5vdGF0aW9ucyIsInBvaW50c0Fubm90YXRpb25zIiwieERpdmlzaW9uIiwiZGF0YVBvaW50cyIsImF4aXNDaGFydHMiLCJkcmF3WUF4aXNBbm5vdGF0aW9ucyIsImRyYXdYQXhpc0Fubm90YXRpb25zIiwiZHJhd1BvaW50QW5ub3RhdGlvbnMiLCJlbEdyYXBoaWNhbCIsImluZGV4IiwiYW5ub3RhdGlvbnNCYWNrZ3JvdW5kIiwiYWRkVGV4dCIsIm1vdmUiLCJhZGRBbm5vdGF0aW9uRXh0ZXJuYWwiLCJwYXJhbXMiLCJwdXNoVG9NZW1vcnkiLCJjb250ZXh0IiwiY29udGV4dE1ldGhvZCIsImNoaWxkTm9kZXMiLCJtZW1vcnkiLCJtZXRob2RzVG9FeGVjIiwicmFuZG9tSWQiLCJtZXRob2QiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGlzdFRvQXJyYXkiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJZIiwiaXNUaW1lbGluZSIsInNlcmllc1JhbmdlU3RhcnQiLCJzZXJpZXNSYW5nZUVuZCIsInN0YXJ0IiwiZW5kIiwiaXNGaW5pdGUiLCJzdGFydFZhbCIsImVuZFZhbCIsInlsYWJlbCIsIlIiLCJ0b29sdGlwTGFiZWxzIiwiZ2V0Rm9ybWF0dGVycyIsInlMYkZvcm1hdHRlciIsIkYiLCJvcHRzIiwiaGlkZVlBeGlzIiwiX2dldEJveFRvb2x0aXAiLCJzZXJpZXNDYW5kbGVPIiwic2VyaWVzQ2FuZGxlSCIsInNlcmllc0NhbmRsZU0iLCJzZXJpZXNDYW5kbGVMIiwic2VyaWVzQ2FuZGxlQyIsIkQiLCJyZXNwb25zaXZlT3ZlcnJpZGUiLCJleHRlbmRBbm5vdGF0aW9ucyIsImluaXQiLCJmdW5uZWwiLCJzdGFja2VkQmFycyIsInN0YWNrZWQxMDAiLCJkdW1iYmVsbCIsImNoZWNrRm9yRGFya1RoZW1lIiwiQXBleCIsImNoZWNrRm9yQ2F0VG9OdW1lcmljWEF4aXMiLCJoYW5kbGVVc2VySW5wdXRFcnJvcnMiLCJjb252ZXJ0Q2F0VG9OdW1lcmljIiwiZXh0ZW5kQXJyYXkiLCJFcnJvciIsIkgiLCJzZXJpZXNSYW5nZSIsInNlcmllc0dvYWxzIiwic2VyaWVzWiIsInNlcmllc0NvbG9ycyIsInNlcmllc1h2YWx1ZXMiLCJzZXJpZXNZdmFsdWVzIiwiaGFzWGF4aXNHcm91cHMiLCJiYXJHcm91cHMiLCJsaW5lR3JvdXBzIiwiYXJlYUdyb3VwcyIsImhhc1Nlcmllc0dyb3VwcyIsInRpbWVzY2FsZUxhYmVscyIsIm5vTGFiZWxzUHJvdmlkZWQiLCJyZXNpemVUaW1lciIsInNlbGVjdGlvblJlc2l6ZVRpbWVyIiwibGFzdFdoZWVsRXhlY3V0aW9uIiwicG9pbnRzQXJyYXkiLCJkYXRhTGFiZWxzUmVjdHMiLCJpc1hOdW1lcmljIiwiaXNEYXRhWFlaIiwiaXNNdWx0aUxpbmVYIiwiaW5pdGlhbE1heFgiLCJpbml0aWFsTWluWCIsIm1pblhEaWZmIiwieEF4aXNTY2FsZSIsInhBeGlzVGlja3NQb3NpdGlvbnMiLCJ5TGFiZWxzQ29vcmRzIiwieVRpdGxlQ29vcmRzIiwicGFkSG9yaXpvbnRhbCIsInhUaWNrQW1vdW50IiwibXVsdGlBeGlzVGlja0Ftb3VudCIsImNoYXJ0SUQiLCJjbGlja2VkIiwiY2xpZW50WCIsImNsaWVudFkiLCJyYWRhclBvbHlnb25zIiwibXNNYXhUb3VjaFBvaW50cyIsImlzRGlydHkiLCJpc0V4ZWNDYWxsZWQiLCJpbml0aWFsQ29uZmlnIiwiaW5pdGlhbFNlcmllcyIsImxhc3RYQXhpcyIsImxhc3RZQXhpcyIsImNvbHVtblNlcmllcyIsImFsbFNlcmllc0NvbGxhcHNlZCIsImNvbGxhcHNlZFNlcmllcyIsImFuY2lsbGFyeUNvbGxhcHNlZFNlcmllcyIsImFuY2lsbGFyeUNvbGxhcHNlZFNlcmllc0luZGljZXMiLCJyaXNpbmdTZXJpZXMiLCJjYXB0dXJlZFNlcmllc0luZGV4IiwiY2FwdHVyZWREYXRhUG9pbnRJbmRleCIsImlnbm9yZVlBeGlzSW5kZXhlcyIsInJhZGlhbFNpemUiLCJ6b29tRW5hYmxlZCIsInBhbkVuYWJsZWQiLCJzZWxlY3Rpb25FbmFibGVkIiwibW91c2Vkb3duIiwibGFzdENsaWVudFBvc2l0aW9uIiwidmlzaWJsZVhSYW5nZSIsIlNWR05TIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJwcmV2aW91c1BhdGhzIiwiYWxsU2VyaWVzSGFzRXF1YWxYIiwibGFzdERyYXduRGF0YUxhYmVsc0luZGV4ZXMiLCJoYXNOdWxsVmFsdWVzIiwiZGVmYXVsdExhYmVscyIsIkxJTkVfSEVJR0hUX1JBVElPIiwieEF4aXNMYWJlbHNIZWlnaHQiLCJ4QXhpc0dyb3VwTGFiZWxzSGVpZ2h0IiwieEF4aXNMYWJlbHNXaWR0aCIsInlBeGlzTGFiZWxzV2lkdGgiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWUF4aXNYIiwieUF4aXNXaWR0aHMiLCJ0cmFuc2xhdGVYQXhpc1kiLCJ0cmFuc2xhdGVYQXhpc1giLCJuaWNlU2NhbGVBbGxvd2VkTWFnTXNkIiwibmljZVNjYWxlRGVmYXVsdFRpY2tzIiwiZ2xvYmFsVmFycyIsImluaXRHbG9iYWxWYXJzIiwiTyIsIk4iLCJwYXR0ZXJuSURzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRycyIsInBhdHRlcm5JRCIsInBhdHRlcm5Vbml0cyIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmsiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiZWxEZWZzIiwic2VyaWVzTnVtYmVyIiwiZ2V0U2VyaWVzSW5kZXgiLCJnZXRGaWxsQ29sb3JzIiwiZmlsbFR5cGUiLCJnZXRGaWxsVHlwZSIsImdldE9wYWNpdHlGcm9tUkdCQSIsImhhbmRsZVBhdHRlcm5GaWxsIiwiZmlsbENvbmZpZyIsInBhdHRlcm5GaWxsIiwiZGVmYXVsdENvbG9yIiwiaGFuZGxlR3JhZGllbnRGaWxsIiwiY2xpcHBlZEltZ0FyZWEiLCJzb2xpZCIsImRyYXdQYXR0ZXJuIiwic2hhZGVDb2xvciIsInJnYjJoZXgiLCJncmFkaWVudEZyb20iLCJncmFkaWVudFRvIiwiZHJhd0dyYWRpZW50IiwiVyIsImdldE1hcmtlckNvbmZpZyIsInNldFNlbGVjdGlvbkZpbHRlciIsImFkZEV2ZW50cyIsImdldE1hcmtlclN0eWxlIiwicG9pbnRTaGFwZSIsInBhc3NpdmUiLCJCIiwiaW5pdGlhbEFuaW0iLCJwb2ludHNQb3MiLCJlbFBhcmVudCIsImRyYXdQb2ludCIsImZpbGxQYXRoIiwiYW5pbWF0ZU1hcmtlciIsInNldFRpbWVvdXQiLCJHIiwidGV4dFJlY3RzIiwiZHJhd25leHRMYWJlbCIsInBvcyIsImlzUmFuZ2VTdGFydCIsImNlbnRlclRleHRJbkJ1YmJsZSIsInBsb3REYXRhTGFiZWxzVGV4dCIsInBhcmVudCIsIm9mZnNldENvcnJlY3Rpb24iLCJkYXRhTGFiZWxzQ29uZmlnIiwiYWx3YXlzRHJhd0RhdGFMYWJlbCIsImRhdGFMYWJlbHNDb3JyZWN0aW9uIiwiYWRkQmFja2dyb3VuZFRvRGF0YUxhYmVsIiwibmV4dFNpYmxpbmciLCJWIiwibGVnZW5kSW5hY3RpdmVDbGFzcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJlc2NhcGVTdHJpbmciLCJnZXRTZXJpZXNCeU5hbWUiLCJpc0hpZGRlbiIsImlzU2VyaWVzSGlkZGVuIiwibGVnZW5kSGVscGVycyIsImVtcHR5Q29sbGFwc2VkU2VyaWVzIiwidXBkYXRlSGVscGVycyIsInJldmVydERlZmF1bHRBeGlzTWluTWF4IiwiX3VwZGF0ZVNlcmllcyIsImhpZ2hsaWdodFNlcmllcyIsInBhdGhzIiwiaGFzQXR0cmlidXRlIiwiaGFuZGxlUHJldkJ1YmJsZVNjYXR0ZXJQYXRocyIsImU0IiwiZTUiLCJzNCIsImZpbHRlcmVkU2VyaWVzWCIsIl8iLCJ0d29EU2VyaWVzIiwidGhyZWVEU2VyaWVzIiwidHdvRFNlcmllc1giLCJjb3JlVXRpbHMiLCJpc0Zvcm1hdFhZIiwiaXNGb3JtYXQyREFycmF5IiwiYWN0aXZlU2VyaWVzSW5kZXgiLCJnZXRBY3RpdmVDb25maWdTZXJpZXNJbmRleCIsInBhcnNlTnVtYmVyIiwiZ29hbHMiLCJpc1ZhbGlkRGF0ZSIsImlzUmFuZ2VEYXRhIiwiZmFsbGJhY2tUb0NhdGVnb3J5IiwiaGFuZGxlUmFuZ2VEYXRhRm9ybWF0IiwicmFuZ2VVbmlxdWVzIiwib3ZlcmxhcHMiLCJyYW5nZU5hbWUiLCJoYW5kbGVDYW5kbGVTdGlja0JveERhdGFGb3JtYXQiLCJmaW5kSW5kZXgiLCJpc1JhbmdlQmFyIiwic2V0U2VyaWVzWUF4aXNNYXBwaW5ncyIsIlNldCIsImVycm9yIiwiaGFuZGxlUmFuZ2VEYXRhIiwiaXNNdWx0aUZvcm1hdCIsImhhbmRsZUZvcm1hdDJEQXJyYXkiLCJoYW5kbGVGb3JtYXRYWSIsImhhbmRsZUNhbmRsZVN0aWNrQm94RGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb252ZXJ0Q2F0VG9OdW1lcmljWGF4aXMiLCJfZ2VuZXJhdGVFeHRlcm5hbExhYmVscyIsImV4Y2x1ZGVDb2xsYXBzZWRTZXJpZXNJbllBeGlzIiwiY29yZSIsInJlc2V0R2xvYmFscyIsImlzTXVsdGlwbGVZIiwicGFyc2VEYXRhQXhpc0NoYXJ0cyIsImdldExhcmdlc3RTZXJpZXMiLCJwYXJzZURhdGFOb25BeGlzQ2hhcnRzIiwic2V0TnVsbFNlcmllc1RvWmVyb1ZhbHVlcyIsImdldFNlcmllc1RvdGFscyIsInN0YWNrZWRTZXJpZXNUb3RhbHNCeUdyb3VwcyIsImdldFN0YWNrZWRTZXJpZXNUb3RhbHNCeUdyb3VwcyIsImdldFBlcmNlbnRTZXJpZXMiLCJoYW5kbGVFeHRlcm5hbExhYmVsc0RhdGEiLCJnZXRDYXRlZ29yeUxhYmVscyIsIlUiLCJnZXRBdHRyaWJ1dGVOUyIsIlByb21pc2UiLCJjbG9uZU5vZGUiLCJzY2FsZVN2Z05vZGUiLCJjb252ZXJ0SW1hZ2VzVG9CYXNlNjQiLCJ0aGVuIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdGFydHNXaXRoIiwiZ2V0QmFzZTY0RnJvbVVybCIsImNhdGNoIiwicmVzb2x2ZSIsImFsbCIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsIm9uZXJyb3IiLCJjbGVhbnVwIiwiZ2V0U3ZnU3RyaW5nIiwiQmxvYiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImVsV3JhcCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibXNUb0Jsb2IiLCJibG9iIiwiaW1nVVJJIiwic3ZnVXJsIiwidHJpZ2dlckRvd25sb2FkIiwiZGF0YVVSSSIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJmaWxlTmFtZSIsImxpbmVEZWxpbWl0ZXIiLCJ0b0RhdGVTdHJpbmciLCJnZXRMYWJlbCIsImgzIiwicG9wIiwic29ydCIsImhyZWYiLCJib2R5IiwicSIsImVsZ3JpZCIsInhheGlzTGFiZWxzIiwiZHJhd25MYWJlbHMiLCJkcmF3bkxhYmVsc1JlY3RzIiwib2ZmWSIsImlzQ2F0ZWdvcnlCYXJIb3Jpem9udGFsIiwieGF4aXNGb250U2l6ZSIsInhheGlzRm9udEZhbWlseSIsInhheGlzRm9yZUNvbG9ycyIsInhheGlzQm9yZGVyV2lkdGgiLCJ4YXhpc0JvcmRlckhlaWdodCIsImRyYXdYQXhpc0xhYmVsQW5kR3JvdXAiLCJjb2xzIiwiZWxHcmlkQm9yZGVycyIsInkzIiwidzMiLCJjaGVja0xhYmVsQmFzZWRPblRpY2thbW91bnQiLCJjaGVja0Zvck92ZXJmbG93aW5nTGFiZWxzIiwiazMiLCJ4QXhpc0hlaWdodCIsIm9uIiwibGFiZWxJbmRleCIsImMzIiwiZ2V0WUF4aXNGb3JlQ29sb3IiLCJ1MyIsImYzIiwicDMiLCJ4MyIsImIzIiwidjMiLCJkcmF3WUF4aXNUaWNrcyIsInBsYWNlVGV4dFdpdGhFbGxpcHNpcyIsIloiLCJyZW5kZXJHcmlkIiwiZHJhd0dyaWRBcmVhIiwiZWxHcmlkUmVjdE1hc2siLCJlbEdyaWRSZWN0QmFyTWFzayIsImVsR3JpZFJlY3RNYXJrZXJNYXNrIiwiZWxGb3JlY2FzdE1hc2siLCJlbE5vbkZvcmVjYXN0TWFzayIsImVsR3JpZFJlY3QiLCJlbEdyaWRSZWN0QmFyIiwiZWxHcmlkUmVjdE1hcmtlciIsInhDb3VudCIsIl9kcmF3R3JpZExpbmUiLCJkcmF3WGF4aXNUaWNrcyIsImVsZyIsInhDIiwiX2RyYXdHcmlkTGluZXMiLCJlbGdyaWRMaW5lc1YiLCJlbGdyaWRMaW5lc0giLCJoaWRlIiwiX2RyYXdYWUxpbmVzIiwiX2RyYXdJbnZlcnRlZFhZTGluZXMiLCJkcmF3R3JpZEJhbmRzIiwieEF4aXNUaWNrV2lkdGgiLCJfZHJhd0dyaWRCYW5kUmVjdCIsIiQiLCJjZWlsIiwibW9kIiwiZ2V0R0NEIiwiZ2V0UHJpbWVGYWN0b3JzIiwiUjIiLCJGMiIsIkQyIiwiSDIiLCJPMiIsIk4yIiwiVzIiLCJzdHJpcE51bWJlciIsIl9hZGp1c3RUaWNrc0ZvclNtYWxsUmFuZ2UiLCJFUFNJTE9OIiwicHJlY2lzZUFkZGl0aW9uIiwibG9nYXJpdGhtaWNTY2FsZU5pY2UiLCJsb2dhcml0aG1pY1NjYWxlIiwibmljZVNjYWxlIiwibGluZWFyU2NhbGUiLCJhNCIsInNldFlTY2FsZUZvckluZGV4IiwiSiIsInNjYWxlcyIsInNldFlSYW5nZSIsInNldFhSYW5nZSIsInNldFpSYW5nZSIsImJydXNoU291cmNlIiwiaXNGbG9hdCIsIm5vRXhwb25lbnRzIiwibG93ZXN0WSIsImhpZ2hlc3RZIiwiZ2V0TWluWU1heFkiLCJfc2V0U3RhY2tlZE1pbk1heCIsInNjYWxlTXVsdGlwbGVZQXhlcyIsInNldFhTY2FsZSIsIl9oYW5kbGVTaW5nbGVEYXRhUG9pbnQiLCJfZ2V0TWluWERpZmYiLCJzZXRVVENEYXRlIiwic2V0RGF0ZSIsImVudHJpZXMiLCJRIiwiYXhpc0ZvbnRGYW1pbHkiLCJ4QXhpc29mZlgiLCJjaGVja0ZvclJldmVyc2VkTGFiZWxzIiwiZ2V0VGV4dEFuY2hvciIsImFkZFRvb2x0aXAiLCJyb3RhdGVMYWJlbCIsImZpcnN0TGFiZWwiLCJhZGRZQXhpc1RpdGxlIiwiYWRkQXhpc0JvcmRlciIsImludmVyc2VkWUF4aXNUaXRsZVRleHQiLCJpbnZlcnNlZFlBeGlzQm9yZGVyIiwieFBhZGRpbmdGb3JZQXhpc1RpdGxlIiwieFBvcyIsInBhZGQiLCJtdWx0aXBsZVlzIiwiSyIsImRvY3VtZW50RXZlbnQiLCJjaGFydENsYXNzIiwiZXZlbnRMaXN0Iiwid2hpY2giLCJjYXB0dXJlIiwic2V0dXBCcnVzaEhhbmRsZXIiLCJ0b3VjaGVzIiwidHQiLCJldCIsImRyYXdZYXhpc0ludmVyc2VkIiwiZHJhd1hheGlzSW52ZXJzZWQiLCJkcmF3WGF4aXMiLCJkcmF3WWF4aXMiLCJjaGlsZHJlbiIsIml0IiwiYnJlYWtwb2ludCIsImlubmVyV2lkdGgiLCJzY3JlZW4iLCJleHRlbmRBcnJheVByb3BzIiwib3ZlcnJpZGVSZXNwb25zaXZlT3B0aW9ucyIsInN0IiwiaXNDb2xvckZuIiwiaXNIZWF0bWFwRGlzdHJpYnV0ZWQiLCJjaGVja0hlYXRtYXBEaXN0cmlidXRlZCIsImlzQmFyRGlzdHJpYnV0ZWQiLCJjaGVja0JhckRpc3RyaWJ1dGVkIiwic2V0RGVmYXVsdENvbG9ycyIsImdldENvbG9ycyIsImFwcGx5U2VyaWVzQ29sb3JzIiwiZ2V0TW9ub2Nocm9tZUNvbG9ycyIsImFwcGx5Q29sb3JUeXBlcyIsImFwcGx5RGF0YUxhYmVsc0NvbG9ycyIsImFwcGx5UmFkYXJQb2x5Z29uc0NvbG9ycyIsImFwcGx5TWFya2Vyc0NvbG9ycyIsInByZWRlZmluZWQiLCJwYWxldHRlMSIsInBhbGV0dGUyIiwicGFsZXR0ZTMiLCJwYWxldHRlNCIsInBhbGV0dGU1IiwicGFsZXR0ZTYiLCJwYWxldHRlNyIsInBhbGV0dGU4IiwicGFsZXR0ZTkiLCJwYWxldHRlMTAiLCJkZWZhdWx0IiwicnQiLCJkcmF3VGl0bGVTdWJ0aXRsZSIsIm90IiwiZEN0eCIsImVsTGVnZW5kV3JhcCIsImxnUmVjdCIsImdldExhcmdlc3RTdHJpbmdGcm9tQXJyIiwibnQiLCJnZXR4QXhpc1RpbWVTY2FsZUxhYmVsc0Nvb3JkcyIsImxnV2lkdGhGb3JTaWRlTGVnZW5kcyIsImRpbUhlbHBlcnMiLCJnZXRMYXJnZXN0U3RyaW5nRnJvbU11bHRpQXJyIiwieUF4aXNXaWR0aCIsImdyaWRQYWQiLCJvdmVybGFwcGluZ1hMYWJlbHMiLCJuNCIsInlBeGlzV2lkdGhSaWdodCIsInlBeGlzV2lkdGhMZWZ0IiwieFBhZFJpZ2h0IiwieFBhZExlZnQiLCJsdCIsImh0IiwiaXNTcGFya2xpbmUiLCJnZXRUaXRsZVN1YnRpdGxlQ29vcmRzIiwiY3QiLCJkaW1ZQXhpcyIsImRpbVhBeGlzIiwiZGltR3JpZCIsImdldExlZ2VuZHNSZWN0IiwiZGF0YWxhYmVsc0Nvb3JkcyIsInNldERpbWVuc2lvbnNGb3JBeGlzQ2hhcnRzIiwic2V0RGltZW5zaW9uc0Zvck5vbkF4aXNDaGFydHMiLCJncmlkUGFkRm9ydGl0bGVTdWJ0aXRsZSIsImdyaWRQYWRGb3JDb2x1bW5zSW5OdW1lcmljQXhpcyIsImdldHlBeGlzTGFiZWxzQ29vcmRzIiwiZ2V0eUF4aXNUaXRsZUNvb3JkcyIsImdldERhdGFsYWJlbHNSZWN0IiwiZ2V0VG90YWxZQXhpc1dpZHRoIiwiZ2V0eEF4aXNMYWJlbHNDb29yZHMiLCJnZXR4QXhpc0dyb3VwTGFiZWxzQ29vcmRzIiwiZ2V0eEF4aXNUaXRsZUNvb3JkcyIsImNvbmRpdGlvbmFsQ2hlY2tzRm9yQXhpc0Nvb3JkcyIsInhBeGlzV2lkdGgiLCJhZGRpdGlvbmFsUGFkZGluZ1hMYWJlbHMiLCJzZXRHcmlkWFBvc0ZvckR1YWxZQXhpcyIsInNldFlBeGlzWFBvc2l0aW9uIiwiZHQiLCJsZ0N0eCIsImNyZWF0ZVRleHROb2RlIiwiY2x3aCIsImNsd3ciLCJlbExlZ2VuZEZvcmVpZ24iLCJnZXRMZWdlbmRTdHlsZXMiLCJjcyIsImNzaSIsInJpc2VDb2xsYXBzZWRTZXJpZXMiLCJoaWRlU2VyaWVzIiwic2VyaWVzRWwiLCJwcmludERhdGFMYWJlbHNJbm5lciIsImZpcmUiLCJfZ2V0U2VyaWVzQmFzZWRPbkNvbGxhcHNlZFN0YXRlIiwiZ2V0U2VyaWVzQWZ0ZXJDb2xsYXBzaW5nIiwiaGlkZGVuIiwiZ3QiLCJvbkxlZ2VuZENsaWNrIiwib25MZWdlbmRIb3ZlcmVkIiwiaXNCYXJzRGlzdHJpYnV0ZWQiLCJhcHBlbmRUb0ZvcmVpZ25PYmplY3QiLCJkcmF3TGVnZW5kcyIsImxlZ2VuZEFsaWduSG9yaXpvbnRhbCIsImxlZ2VuZEFsaWduVmVydGljYWwiLCJmaWxsY29sb3IiLCJjcmVhdGVMZWdlbmRNYXJrZXIiLCJnZXRTZXJpZXNUb3RhbEJ5SW5kZXgiLCJzZXJpZXNIYXZlU2FtZVZhbHVlcyIsInNldExlZ2VuZFdyYXBYWSIsImdldExlZ2VuZERpbWVuc2lvbnMiLCJoaWdobGlnaHRSYW5nZUluU2VyaWVzIiwidG9nZ2xlU2VyaWVzT25Ib3ZlciIsInV0IiwiZXYiLCJzZWxlY3RlZENsYXNzIiwibG9jYWxlVmFsdWVzIiwiZWxab29tIiwiZWxab29tSW4iLCJlbFpvb21PdXQiLCJlbFBhbiIsImVsU2VsZWN0aW9uIiwiZWxab29tUmVzZXQiLCJlbE1lbnVJY29uIiwiZWxNZW51IiwiZWxDdXN0b21JY29ucyIsImljb24iLCJtb3ZlSW5kZXhJbkFycmF5IiwiX2NyZWF0ZUhhbWJ1cmdlck1lbnUiLCJhZGRUb29sYmFyRXZlbnRMaXN0ZW5lcnMiLCJlbE1lbnVJdGVtcyIsImhhbmRsZVpvb21SZXNldCIsInRvZ2dsZVpvb21TZWxlY3Rpb24iLCJoYW5kbGVab29tSW4iLCJoYW5kbGVab29tT3V0IiwidG9nZ2xlUGFubmluZyIsInRvZ2dsZU1lbnUiLCJoYW5kbGVEb3dubG9hZCIsImdldFN5bmNlZENoYXJ0cyIsInRvZ2dsZU90aGVyQ29udHJvbHMiLCJnZXRUb29sYmFySWNvbnNSZWZlcmVuY2UiLCJfZ2V0TmV3TWluWE1heFgiLCJkaXNhYmxlWm9vbUluIiwiem9vbVVwZGF0ZU9wdGlvbnMiLCJkaXNhYmxlWm9vbU91dCIsImdldEJlZm9yZVpvb21SYW5nZSIsIl91cGRhdGVPcHRpb25zIiwiem9vbUNhbGxiYWNrIiwiZXhwb3J0VG9QbmciLCJmdCIsImRyYWdnZWQiLCJzdGFydFgiLCJlbmRYIiwiZHJhZ1giLCJzdGFydFkiLCJlbmRZIiwiZHJhZ1kiLCJtb3ZlRGlyZWN0aW9uIiwiZGVib3VuY2VUaW1lciIsImRlYm91bmNlRGVsYXkiLCJ3aGVlbERlbGF5IiwieHlSYXRpb3MiLCJ6b29tUmVjdCIsInNlbGVjdGlvblJlY3QiLCJncmlkUmVjdCIsInNsRHJhZ2dhYmxlUmVjdCIsImRyYWdnYWJsZSIsInNlbGVjdGlvbkRyYWdnaW5nIiwicHJlc2VsZWN0ZWRTZWxlY3Rpb24iLCJob3ZlckFyZWEiLCJzdmdNb3VzZUV2ZW50cyIsIm1vdXNlV2hlZWxFdmVudCIsIm9mZiIsInNoaWZ0S2V5Iiwic2hpZnRXYXNQcmVzc2VkIiwiZW5hYmxlWm9vbVBhbkZyb21Ub29sYmFyIiwiY2hhbmdlZFRvdWNoZXMiLCJwYW5EcmFnZ2luZyIsInpvb210eXBlIiwic2VsZWN0aW9uRHJhd2luZyIsInNlbGVjdGlvbkRyYXduIiwiZGVsYXllZFBhblNjcm9sbGVkIiwiaGlkZVNlbGVjdGlvblJlY3QiLCJtYWtlU2VsZWN0aW9uUmVjdERyYWdnYWJsZSIsInByZXZlbnREZWZhdWx0Iiwibm93IiwiZXhlY3V0ZU1vdXNlV2hlZWxab29tIiwiY2xlYXJUaW1lb3V0IiwiZGVsdGFZIiwic2VsZWN0aXplIiwicG9pbnRTaXplIiwicG9pbnRUeXBlIiwicmVzaXplIiwiY29uc3RyYWludCIsImRyYXdTZWxlY3Rpb25SZWN0IiwicGFuU2Nyb2xsZWQiLCJ1cGRhdGVTY3JvbGxlZENoYXJ0IiwicHQiLCJ0dEN0eCIsImVsR3JpZCIsImhhc0JhcnMiLCJnZXRFbEdyaWQiLCJjbG9zZXN0SW5NdWx0aUFycmF5IiwiY2xvc2VzdEluQXJyYXkiLCJjYXB0dXJlZFNlcmllcyIsImhvdmVyWCIsImhvdmVyWSIsImdldEZpcnN0QWN0aXZlWEFycmF5IiwiZ2V0RWxNYXJrZXJzIiwiZ2V0RWxCYXJzIiwiYWxsVG9vbHRpcFNlcmllc0dyb3VwcyIsInh0IiwidG9vbHRpcFV0aWwiLCJ0dEl0ZW1zIiwiaGFuZGxlQ3VzdG9tVG9vbHRpcCIsInRvZ2dsZUFjdGl2ZUluYWN0aXZlU2VyaWVzIiwiZ2V0VmFsdWVzVG9QcmludCIsInByaW50TGFiZWxzIiwidmFsdWVzIiwiZ2V0RWxUb29sdGlwIiwidG9vbHRpcFJlY3QiLCJ0dFdpZHRoIiwidHRIZWlnaHQiLCJ4VmFsIiwielZhbCIsInhBeGlzVFRWYWwiLCJnZXRTZXJpZXNOYW1lIiwiZm4iLCJ5TGJUaXRsZUZvcm1hdHRlciIsIm0zIiwicjQiLCJhdHRycyIsInZhbCIsIkRPTUhhbmRsaW5nIiwiZ29hbFZhbHMiLCJwQ29sb3IiLCJzaG93VG9vbHRpcFRpdGxlIiwidG9vbHRpcFRpdGxlIiwiaXNYQXhpc1Rvb2x0aXBFbmFibGVkIiwieGF4aXNUb29sdGlwVGV4dCIsInRDb25maWciLCJ0b2dnbGVBbGxUb29sdGlwU2VyaWVzR3JvdXBzIiwiYnQiLCJnZXRFbFhDcm9zc2hhaXJzIiwieGNyb3NzaGFpcnNXaWR0aCIsIm1vdmVYQXhpc1Rvb2x0aXAiLCJ5Y3Jvc3NoYWlycyIsInljcm9zc2hhaXJzSGlkZGVuIiwieGF4aXNUb29sdGlwIiwieGF4aXNPZmZZIiwieWF4aXNUVEVscyIsInJlc2V0UG9pbnRzU2l6ZSIsImVubGFyZ2VDdXJyZW50UG9pbnQiLCJtb3ZlRHluYW1pY1BvaW50T25Ib3ZlciIsImdldEhvdmVyTWFya2VyU2l6ZSIsIm1vdmVYQ3Jvc3NoYWlycyIsImZpeGVkVG9vbHRpcCIsIm1vdmVUb29sdGlwIiwiZ2V0QWxsTWFya2VycyIsImRhdGFQb2ludHNEaXZpZGVkV2lkdGgiLCJ2dCIsInRvb2x0aXBQb3NpdGlvbiIsIm5ld1BvaW50U2l6ZSIsIm9sZFBvaW50U2l6ZSIsImxhc3RDaGlsZCIsImdldFBhdGhGcm9tUG9pbnQiLCJtdCIsImlzVmVydGljYWxHcm91cGVkUmFuZ2VCYXIiLCJvcHQiLCJnZXRBdHRyIiwiZHJhd1Nlcmllc1RleHRzIiwiZmluZEFuY2VzdG9yIiwic2hvd09uSW50ZXJzZWN0IiwiZ2V0QmFyVG9vbHRpcFhZIiwiZGF0YVBvaW50c0RpdmlkZWRIZWlnaHQiLCJ5dCIsInlheGlzT2ZmWCIsInlheGlzVG9vbHRpcCIsInlheGlzVG9vbHRpcFRleHQiLCJ5YXhpc1Rvb2x0aXBzIiwibW92ZVlDcm9zc2hhaXJzIiwibW92ZVlBeGlzVG9vbHRpcCIsInd0IiwiYXhlc1Rvb2x0aXAiLCJpc0JhclNoYXJlZCIsImxhc3RIb3ZlclRpbWUiLCJkcmF3WGF4aXNUb29sdGlwIiwiZHJhd1lheGlzVG9vbHRpcCIsInNldFhDcm9zc2hhaXJXaWR0aCIsImhhbmRsZVlDcm9zc2hhaXIiLCJnZXRYQXhpc1RpY2tzUG9zaXRpb25zIiwiZHJhd0R5bmFtaWNQb2ludHMiLCJsZWdlbmRMYWJlbHMiLCJjcmVhdGVUVEVsZW1lbnRzIiwiYWRkU1ZHRXZlbnRzIiwib3JkZXIiLCJzZXJpZXNCb3VuZCIsInRvb2x0aXBFbCIsInRvb2x0aXBZIiwidG9vbHRpcFgiLCJhZGRQYXRoc0V2ZW50TGlzdGVuZXJzIiwiYWRkRGF0YXBvaW50RXZlbnRzTGlzdGVuZXJzIiwib25TZXJpZXNIb3ZlciIsInNlcmllc0hvdmVyIiwic2VyaWVzSG92ZXJUaW1lb3V0IiwiZ2V0R3JvdXBlZENoYXJ0cyIsInNlcmllc0hvdmVyQnlDb250ZXh0IiwiY2hhcnRDdHgiLCJkcmF3Rml4ZWRUb29sdGlwUmVjdCIsImF4aXNDaGFydHNUb29sdGlwcyIsIm5vbkF4aXNDaGFydHNUb29sdGlwcyIsImhhbmRsZU1vdXNlT3V0IiwiaGFuZGxlU3RpY2t5VG9vbHRpcCIsImhhbmRsZUhlYXRUcmVlVG9vbHRpcCIsImhhbmRsZUJhclRvb2x0aXAiLCJoYXNNYXJrZXJzIiwiaGFuZGxlTWFya2VyVG9vbHRpcCIsImRyYXdZYXhpc1Rvb2x0aXBUZXh0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2V0TmVhcmVzdFZhbHVlcyIsImhhbmRsZVN0aWNreUNhcHR1cmVkU2VyaWVzIiwiaXNYb3ZlcmxhcCIsImlzSW5pdGlhbFNlcmllc1NhbWVMZW4iLCJkZWFjdGl2YXRlSG92ZXJGaWx0ZXIiLCJlbmxhcmdlUG9pbnRzIiwibW92ZUR5bmFtaWNQb2ludHNPbkhvdmVyIiwiYmFyU2VyaWVzSGVpZ2h0IiwiZ2V0QmFyc0hlaWdodCIsIm1vdmVTdGlja3lUb29sdGlwT3ZlckJhcnMiLCJtb3ZlTWFya2VycyIsImt0IiwiYmFyQ3R4IiwidG90YWxGb3JtYXR0ZXIiLCJjb2x1bW5Hcm91cEluZGV4IiwiYmFyWFBvc2l0aW9uIiwiYmFyWVBvc2l0aW9uIiwidmlzaWJsZVNlcmllcyIsInJlbmRlcmVkUGF0aCIsImJhck9wdGlvbnMiLCJiY3giLCJiY3kiLCJkYXRhTGFiZWxzWCIsImRhdGFMYWJlbHNZIiwiYmFyRGF0YUxhYmVsc0NvbmZpZyIsImJhclRvdGFsRGF0YUxhYmVsc0NvbmZpZyIsIm9mZlgiLCJjYWxjdWxhdGVCYXJzRGF0YUxhYmVsc1Bvc2l0aW9uIiwiY2FsY3VsYXRlQ29sdW1uc0RhdGFMYWJlbHNQb3NpdGlvbiIsImRyYXdDYWxjdWxhdGVkRGF0YUxhYmVscyIsImRyYXdUb3RhbERhdGFMYWJlbHMiLCJ0b3RhbERhdGFMYWJlbHNYIiwidG90YWxEYXRhTGFiZWxzWSIsInRvdGFsRGF0YUxhYmVsc0FuY2hvciIsImdldFN0YWNrZWRUb3RhbERhdGFMYWJlbCIsInRvdGFsRGF0YUxhYmVscyIsImJhckhlbHBlcnMiLCJnZXRaZXJvVmFsdWVFbmNvdW50ZXJzIiwiemVyb0VuY291bnRlcnMiLCJpc1JldmVyc2VkIiwibGFzdEFjdGl2ZUJhclNlcmllSW5kZXgiLCJBdCIsInRvdGFsSXRlbXMiLCJzZXJpZXNMZW4iLCJ2aXNpYmxlSSIsInZpc2libGVJdGVtcyIsImFyckJvcmRlclJhZGl1cyIsImNyZWF0ZUJvcmRlclJhZGl1c0FyciIsInplcm9TZXJpZXNlcyIsImNoZWNrWmVyb1NlcmllcyIsInRyYW5zbGF0aW9uc0luZGV4IiwieURpdmlzaW9uIiwiemVyb0giLCJ6ZXJvVyIsInByZXZZIiwicHJldlgiLCJwcmV2WUYiLCJwcmV2WEYiLCJwcmV2WVZhbCIsInByZXZYVmFsIiwieEFycmoiLCJ4QXJyakYiLCJ4QXJyalZhbCIsInlBcnJqIiwieUFycmpGIiwieUFycmpWYWwiLCJpc051bGxWYWx1ZSIsImVsU2VyaWVzIiwic2VyaWVzR3JvdXAiLCJjb2x1bW5XaWR0aE9mZnNldCIsImdldFByZXZpb3VzUGF0aCIsInJvdW5kUGF0aENvcm5lcnMiLCJiYXJIZWlnaHRPZmZzZXQiLCJnZXRYRm9yVmFsdWUiLCJnZXRZRm9yVmFsdWUiLCJzdHJva2VIZWlnaHQiLCJzdHJva2VMaW5lQ2FwIiwiZ29hbFgiLCJnb2FsWSIsInByZXZQYXRocyIsImN1cnJQYXRocyIsIm5vblplcm9Db2x1bW5zIiwiY29sdW1uR3JvdXBJbmRpY2VzIiwiZ3JvdXBJbmRleCIsIlN0IiwieWF4aXNJbmRleCIsInBhdGhBcnIiLCJnZXRCYXJTZXJpZXNJbmRpY2VzIiwiZ2V0TG9nU2VyaWVzIiwiZ2V0TG9nWVJhdGlvcyIsImluaXRWYXJpYWJsZXMiLCJnZXRHcm91cEluZGV4IiwiYWRkQ29sbGFwc2VkQ2xhc3NUb1NlcmllcyIsImluaXRpYWxQb3NpdGlvbnMiLCJnZXRTdHJva2VXaWR0aCIsImluZGV4ZXMiLCJiYyIsImRyYXdCYXJQYXRocyIsImRyYXdDb2x1bW5QYXRocyIsImdldFBhdGhGaWxsQ29sb3IiLCJkcmF3QmFyU2hhZG93IiwiZHJhd0dvYWxMaW5lIiwicmVuZGVyU2VyaWVzIiwicGF0aEZpbGwiLCJlbERhdGFMYWJlbHNXcmFwIiwiZWxHb2Fsc01hcmtlcnMiLCJlbEJhclNoYWRvd3MiLCJsaW5lRmlsbCIsInJlbmRlclBhdGhzIiwiaGFuZGxlQmFyRGF0YUxhYmVscyIsImdldEJhcnBhdGhzIiwiYmFyQmFja2dyb3VuZCIsImdldEdvYWxWYWx1ZXMiLCJnZXRCYXJYRm9yTnVtZXJpY1hBeGlzIiwiZ2V0Q29sdW1uUGF0aHMiLCJDdCIsImluaXRpYWxpemVTdGFja2VkUHJldlZhcnMiLCJncm91cEN0eCIsImluaXRpYWxpemVTdGFja2VkWFlWYXJzIiwiZHJhd1N0YWNrZWRCYXJQYXRocyIsImRyYXdTdGFja2VkQ29sdW1uUGF0aHMiLCJMdCIsImNhbmRsZXN0aWNrT3B0aW9ucyIsImJveE9wdGlvbnMiLCJpc0JveFBsb3QiLCJkMyIsImRyYXdIb3Jpem9udGFsQm94UGF0aHMiLCJkcmF3VmVydGljYWxCb3hQYXRocyIsIm80IiwiYzQiLCJkNCIsImdldE9ITENWYWx1ZSIsIlB0IiwiZGV0ZXJtaW5lQ29sb3IiLCJwZXJjZW50IiwiY29sb3JQcm9wcyIsIk10IiwiZHluYW1pY0FuaW0iLCJyZWN0UmFkaXVzIiwibmVnUmFuZ2UiLCJjaGVja0NvbG9yUmFuZ2UiLCJnZXRTaGFkZUNvbG9yIiwiYWRkTGlzdGVuZXJzIiwiYW5pbWF0ZUhlYXRNYXAiLCJhbmltYXRlSGVhdENvbG9yIiwiY2FsY3VsYXRlRGF0YUxhYmVscyIsInVuc2hpZnQiLCJhbmltYXRlUmVjdCIsIkl0IiwiVHQiLCJhbmltQmVnaW5BcnIiLCJhbmltRHVyIiwiZG9udXREYXRhTGFiZWxzIiwibGluZUNvbG9yQXJyIiwiZGVmYXVsdFNpemUiLCJjZW50ZXJZIiwiY2VudGVyWCIsImZ1bGxBbmdsZSIsImluaXRpYWxBbmdsZSIsImRvbnV0U2l6ZSIsImRhdGFMYWJlbHNHcm91cCIsInNsaWNlTGFiZWxzIiwic2xpY2VTaXplcyIsInByZXZTZWN0b3JBbmdsZUFyciIsIm5lZ1RvWmVybyIsImRyYXdQb2xhckVsZW1lbnRzIiwiZHJhd0NpcmNsZSIsImRyYXdBcmNzIiwicmVuZGVySW5uZXJEYXRhTGFiZWxzIiwiaG9sbG93U2l6ZSIsImdldENoYW5nZWRQYXRoIiwicG9sYXJUb0NhcnRlc2lhbiIsImFuaW1hdGVQYXRocyIsInByZXZTdGFydEFuZ2xlIiwicHJldkVuZEFuZ2xlIiwiYW5pbWF0ZVN0YXJ0aW5nUG9zIiwic2hvdWxkU2V0UHJldlBhdGhzIiwiZHVyIiwicGllQ2xpY2tlZCIsInJldmVydERhdGFMYWJlbHNJbm5lciIsImFuaW1hdGVBcmMiLCJnZXRQaWVQYXRoIiwibWUiLCJhbmdsZSIsImR1cmluZyIsImlzVHJhY2siLCJkcmF3WUF4aXNUZXh0cyIsImRyYXdTcG9rZXMiLCJwcmludElubmVyTGFiZWxzIiwienQiLCJpc0xvZyIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJkYXRhUmFkaXVzT2ZQZXJjZW50IiwiZGF0YVJhZGl1cyIsImFuZ2xlQXJyIiwieWF4aXNMYWJlbHNUZXh0c1BvcyIsImRhdGFQb2ludHNMZW4iLCJkaXNBbmdsZSIsInlheGlzTGFiZWxzIiwiZ2V0RGF0YVBvaW50c1BvcyIsImNyZWF0ZVBhdGhzIiwibGluZVBhdGhzVG8iLCJsaW5lUGF0aHNGcm9tIiwiYXJlYVBhdGhzRnJvbSIsImFyZWFQYXRoc1RvIiwiaDQiLCJwNCIsImRyYXdQb2x5Z29ucyIsImRyYXdYQXhpc1RleHRzIiwiZ2V0UG9seWdvblBvcyIsImRyYXdQb2x5Z29uIiwiZ2V0VGV4dFBvcyIsIm5ld1giLCJuZXdZIiwiWHQiLCJ0b3RhbEFuZ2xlIiwidHJhY2tTdGFydEFuZ2xlIiwidHJhY2tFbmRBbmdsZSIsInJhZGlhbERhdGFMYWJlbHMiLCJvbkJhckxhYmVsQ2xpY2siLCJkcmF3VHJhY2tzIiwiY29sb3JBcnIiLCJlbEhvbGxvdyIsImRyYXdIb2xsb3dJbWFnZSIsImRyYXdIb2xsb3ciLCJsb2FkZWQiLCJFdCIsInJhbmdlQmFyT3B0aW9ucyIsInJhbmdlQmFyIiwiZGV0ZWN0T3ZlcmxhcHBpbmdCYXJzIiwic3J0eSIsImluaXRQb3NpdGlvbnMiLCJkcmF3UmFuZ2VCYXJQYXRocyIsInNydHgiLCJkcmF3UmFuZ2VDb2x1bW5QYXRocyIsImdldFJhbmdlVmFsdWUiLCJwcmV2ZW50QmFyT3ZlcmZsb3ciLCJZdCIsImxpbmVDdHgiLCJjYXRlZ29yeUF4aXNDb3JyZWN0aW9uIiwicGF0aEZyb21MaW5lIiwicGF0aEZyb21BcmVhIiwiYXBwZW5kUGF0aEZyb20iLCJsaW5lWVBvc2l0aW9uIiwicHJldlNlcmllc1kiLCJ6ZXJvWSIsIlJ0IiwiSHQiLCJGdCIsIkR0IiwiT3QiLCJwb2ludHNDaGFydCIsInNjYXR0ZXIiLCJub05lZ2F0aXZlcyIsImxpbmVIZWxwZXJzIiwic2FtZVZhbHVlU2VyaWVzRml4IiwiX2luaXRTZXJpZVZhcmlhYmxlcyIsImRldGVybWluZUZpcnN0UHJldlkiLCJfY2FsY3VsYXRlUGF0aHNGcm9tIiwicHJldlkyIiwicFgiLCJwWSIsInBhdGhzRnJvbSIsImxpbmVQYXRocyIsImFyZWFQYXRocyIsInkyQXJyaiIsIl9pdGVyYXRlT3ZlckRhdGFQb2ludHMiLCJpdGVyYXRpb25zIiwiX2hhbmRsZVBhdGhzIiwiZWxQb2ludHNNYWluIiwiekluZGV4IiwiYXJlYUJvdHRvbVkiLCJjaGVja1ByZXZpb3VzUGF0aHMiLCJsaW5lUGF0aCIsImFyZWFQYXRoIiwiQjIiLCJHMiIsIlYyIiwiY2FsY3VsYXRlUG9pbnRzIiwiajIiLCJfY3JlYXRlUGF0aHMiLCJwYXRoU3RhdGUiLCJzZWdtZW50U3RhcnRYIiwiaGFuZGxlTnVsbERhdGFQb2ludHMiLCJfaGFuZGxlTWFya2Vyc0FuZExhYmVscyIsInBsb3RDaGFydE1hcmtlcnMiLCJkcmF3RGF0YUxhYmVsIiwiaTQiLCJUcmVlbWFwU3F1YXJlZCIsImdlbmVyYXRlIiwieG9mZnNldCIsInlvZmZzZXQiLCJzaG9ydGVzdEVkZ2UiLCJnZXRDb29yZGluYXRlcyIsImN1dEFyZWEiLCJOdCIsIld0IiwiQnQiLCJhbmltYXRlVHJlZW1hcCIsImdldEZvbnRTaXplIiwidHJ1bmNhdGVMYWJlbHMiLCJyb3RhdGVUb0ZpdExhYmVsIiwiR3QiLCJWdCIsImp0IiwidGltZVNjYWxlQXJyYXkiLCJ1dGMiLCJkZXRlcm1pbmVJbnRlcnZhbCIsImdldFRpbWVVbml0c2Zyb21UaW1lc3RhbXAiLCJmaXJzdFZhbCIsImN1cnJlbnRNaWxsaXNlY29uZCIsImN1cnJlbnRTZWNvbmQiLCJjdXJyZW50TWludXRlIiwiY3VycmVudEhvdXIiLCJjdXJyZW50TW9udGhEYXRlIiwiY3VycmVudERhdGUiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsImRheXNXaWR0aE9uWEF4aXMiLCJob3Vyc1dpZHRoT25YQXhpcyIsIm1pbnV0ZXNXaWR0aE9uWEF4aXMiLCJzZWNvbmRzV2lkdGhPblhBeGlzIiwibnVtYmVyT2ZTZWNvbmRzIiwibnVtYmVyT2ZNaW51dGVzIiwibnVtYmVyT2ZIb3VycyIsIm51bWJlck9mRGF5cyIsIm51bWJlck9mTW9udGhzIiwibnVtYmVyT2ZZZWFycyIsInRpY2tJbnRlcnZhbCIsImdlbmVyYXRlWWVhclNjYWxlIiwiZ2VuZXJhdGVNb250aFNjYWxlIiwiZ2VuZXJhdGVEYXlTY2FsZSIsImdlbmVyYXRlSG91clNjYWxlIiwiZ2VuZXJhdGVNaW51dGVTY2FsZSIsImdlbmVyYXRlU2Vjb25kU2NhbGUiLCJmb3JtYXREYXRlcyIsInJlbW92ZU92ZXJsYXBwaW5nVFMiLCJwbG90Q29vcmRzIiwiZGV0ZXJtaW5lUmVtYWluaW5nRGF5c09mWWVhciIsImRldGVybWluZURheXNPZlllYXIiLCJfZ2V0WWVhciIsImRhdGUiLCJjcmVhdGVSYXdEYXRlU3RyaW5nIiwicGFyc2VEYXRlV2l0aFRpbWV6b25lIiwiZGF0ZVN0cmluZyIsIl90IiwiRG9jIiwic2V0U1ZHRGltZW5zaW9ucyIsImRlZnMiLCJyYW5nZUFyZWEiLCJkcmF3U2VyaWVzQnlHcm91cCIsImdldERpbWVuc2lvbnMiLCJkcmF3WENyb3NzaGFpcnMiLCJkcmF3WUNyb3NzaGFpcnMiLCJjYWxjdWxhdGVUaW1lU2NhbGVUaWNrcyIsInJlY2FsY0RpbWVuc2lvbnNCYXNlZE9uRm9ybWF0IiwiZ2V0Q2FsY3VsYXRlZFJhdGlvcyIsIkFwZXhDaGFydHMiLCJnZXRDaGFydEJ5SUQiLCJ1cGRhdGVTb3VyY2VDaGFydCIsIlV0IiwiZ2V0UHJldmlvdXNQYXRocyIsInVwZGF0ZSIsIl9leHRlbmRTZXJpZXMiLCJzdXBwb3J0ZWQiLCJwYXJzZXIiLCJwcmVwYXJlIiwibnMiLCJ4bWxucyIsInN2Z2pzIiwiZGlkIiwiZWlkIiwiaW5oZXJpdCIsImludmVudCIsIkNvbnRhaW5lciIsImFkb3B0IiwiaW5zdGFuY2UiLCJub2RlTmFtZSIsIlNWR0VsZW1lbnQiLCJOZXN0ZWQiLCJHcmFkaWVudCIsIkVsZW1lbnQiLCJuYW1lc3BhY2UiLCJzZXREYXRhIiwiZG9jdW1lbnRFbGVtZW50IiwibmVzdGVkIiwicG9seSIsInBvbHlsaW5lIiwibmF0aXZlIiwicmVnZXgiLCJudW1iZXJBbmRVbml0IiwiaGV4IiwicmVmZXJlbmNlIiwidHJhbnNmb3JtcyIsIndoaXRlc3BhY2UiLCJpc0hleCIsImlzUmdiIiwiaXNDc3MiLCJpc0JsYW5rIiwiaXNQZXJjZW50IiwiaXNJbWFnZSIsImRlbGltaXRlciIsImh5cGhlbiIsInBhdGhMZXR0ZXJzIiwiaXNQYXRoTGV0dGVyIiwibnVtYmVyc1dpdGhEb3RzIiwiZG90cyIsInV0aWxzIiwiZmlsdGVyU1ZHRWxlbWVudHMiLCJkZWZhdWx0cyIsIkNvbG9yIiwiZXhlYyIsInRvSGV4IiwidG9SZ2IiLCJicmlnaHRuZXNzIiwibW9ycGgiLCJkZXN0aW5hdGlvbiIsImlzQ29sb3IiLCJQb2ludEFycmF5IiwidG9VcHBlckNhc2UiLCJQYXRoQXJyYXkiLCJQb2ludCIsInRvSlNPTiIsInBsdXMiLCJtaW51cyIsInRpbWVzIiwiZGl2aWRlIiwicmVsYXRpdmUiLCJfc3Ryb2tlIiwiX2V2ZW50IiwiY2VudGVyIiwid3JpdGVEYXRhVG9Eb20iLCJhZnRlciIsInJlbW92ZUVsZW1lbnQiLCJhZGRUbyIsInB1dCIsInB1dEluIiwidmlzaWJsZSIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiZ2V0IiwibWF0Y2hlcyIsImRvYyIsInBhcmVudHMiLCJtYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJQYXJlbnQiLCJlYWNoIiwicmVtb3ZlQXR0cmlidXRlIiwiLSIsIjw+IiwiPiIsIjwiLCJNb3JwaE9iaiIsIlNpdHVhdGlvbiIsInJldmVyc2luZyIsImR1cmF0aW9uIiwiZmluaXNoIiwiZWFzZSIsImxvb3AiLCJsb29wcyIsInN0eWxlcyIsIm9uY2UiLCJGWCIsIl90YXJnZXQiLCJzaXR1YXRpb25zIiwic2l0dWF0aW9uIiwicGF1c2VkIiwibGFzdFBvcyIsImFic1BvcyIsIl9zcGVlZCIsInF1ZXVlIiwidGltZVRvQWJzUG9zIiwiYWJzUG9zVG9UaW1lIiwic3RhcnRBbmltRnJhbWUiLCJzdG9wQW5pbUZyYW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdGVwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzdGFydEN1cnJlbnQiLCJpbml0QW5pbWF0aW9ucyIsImRlcXVldWUiLCJzdG9wIiwiaW5pdGlhbFRyYW5zZm9ybWF0aW9uIiwibWF0cml4aWZ5IiwiY2xlYXJRdWV1ZSIsImNsZWFyQ3VycmVudCIsImF0RW5kIiwibGFzdCIsImRldGFpbCIsIl9jYWxsU3RhcnQiLCJlYXNlZCIsImVhY2hBdCIsIk1hdHJpeCIsIm11bHRpcGx5IiwidW5kbyIsImV4dHJhY3QiLCJtYXRyaXgiLCJtb3JwaEFycmF5IiwiQm94IiwiQkJveCIsIlNoYXBlIiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsImF0YW4yIiwidHJhbnNmb3JtZWRYIiwidHJhbnNmb3JtZWRZIiwicm90YXRpb24iLCJ0cmFuc2xhdGUiLCJjcmVhdGVTVkdNYXRyaXgiLCJjdG0iLCJnZXRDVE0iLCJzY3JlZW5DVE0iLCJnZXRTY3JlZW5DVE0iLCJwb2ludCIsImF0dHJpYnV0ZXMiLCJub2RlVmFsdWUiLCJsZWFkaW5nIiwicmVidWlsZCIsInVudHJhbnNmb3JtIiwidG9QYXJlbnQiLCJ0b0RvYyIsIlRyYW5zZm9ybWF0aW9uIiwiaW52ZXJzZWQiLCJUcmFuc2xhdGUiLCJjc3NUZXh0IiwiaGFzIiwiZmlyc3QiLCJjbGVhciIsImhhc0NoaWxkTm9kZXMiLCJfZGVmcyIsInVuZ3JvdXAiLCJEZWZzIiwiZmxhdHRlbiIsIlZpZXdCb3giLCJsaXN0ZW5lcnMiLCJoYW5kbGVyTWFwIiwibGlzdGVuZXJJZCIsIl9zdmdqc0xpc3RlbmVySWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJjYW5jZWxhYmxlIiwiZXZlbnQiLCJnZXRFbGVtZW50QnlJZCIsInZlcnNpb24iLCJTdG9wIiwiUGF0dGVybiIsInN5bWJvbCIsIlVzZSIsImVsZW1lbnQiLCJ1c2UiLCJSZWN0IiwiQ2lyY2xlIiwiRWxsaXBzZSIsImVsbGlwc2UiLCJMaW5lIiwiYXJyYXkiLCJ0b0xpbmUiLCJQb2x5bGluZSIsIlBvbHlnb24iLCJfYXJyYXkiLCJQYXRoIiwibG9hZCIsIl9sb2FkZWQiLCJyYXRpbyIsInVybCIsIl9lcnJvciIsIlRleHQiLCJfcmVidWlsZCIsIl9idWlsZCIsIm5vZGVUeXBlIiwibmV3TGluZWQiLCJidWlsZCIsInRleHRQYXRoIiwiVHNwYW4iLCJkeCIsImR5IiwiVGV4dFBhdGgiLCJwcmVmaXgiLCJnZXRUb3RhbExlbmd0aCIsInBvaW50QXQiLCJnZXRQb2ludEF0TGVuZ3RoIiwic2V0IiwicmVtZW1iZXIiLCJmb3JnZXQiLCJfbWVtb3J5IiwiYnViYmxlcyIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGVmaW5lIiwiYW1kIiwiYmFja2dyb3VuZEFscGhhIiwiYXV0b1NldEluIiwiQmxlbmRFZmZlY3QiLCJjb2xvck1hdHJpeCIsIkNvbG9yTWF0cml4RWZmZWN0IiwiY29udm9sdmVNYXRyaXgiLCJDb252b2x2ZU1hdHJpeEVmZmVjdCIsIkNvbXBvbmVudFRyYW5zZmVyRWZmZWN0IiwiQ29tcG9zaXRlRWZmZWN0IiwiRmxvb2RFZmZlY3QiLCJPZmZzZXRFZmZlY3QiLCJJbWFnZUVmZmVjdCIsIk1lcmdlRWZmZWN0IiwiR2F1c3NpYW5CbHVyRWZmZWN0IiwibW9ycGhvbG9neSIsIk1vcnBob2xvZ3lFZmZlY3QiLCJkaWZmdXNlTGlnaHRpbmciLCJEaWZmdXNlTGlnaHRpbmdFZmZlY3QiLCJkaXNwbGFjZW1lbnRNYXAiLCJEaXNwbGFjZW1lbnRNYXBFZmZlY3QiLCJzcGVjdWxhckxpZ2h0aW5nIiwiU3BlY3VsYXJMaWdodGluZ0VmZmVjdCIsInRpbGUiLCJUaWxlRWZmZWN0IiwidHVyYnVsZW5jZSIsIlR1cmJ1bGVuY2VFZmZlY3QiLCJFZmZlY3QiLCJpbiIsIlBhcmVudEVmZmVjdCIsIkNoaWxkRWZmZWN0IiwiaW4yIiwia2VybmVsTWF0cml4Iiwib3BlcmF0b3IiLCJ4Q2hhbm5lbFNlbGVjdG9yIiwieUNoYW5uZWxTZWxlY3RvciIsIm51bU9jdGF2ZXMiLCJzZWVkIiwic3RpdGNoVGlsZXMiLCJiYXNlRnJlcXVlbmN5IiwiTWVyZ2VOb2RlIiwic3VyZmFjZVNjYWxlIiwiZGlmZnVzZUNvbnN0YW50Iiwia2VybmVsVW5pdExlbmd0aCIsInNwZWN1bGFyRXhwb25lbnQiLCJkaXN0YW50TGlnaHQiLCJhemltdXRoIiwiZWxldmF0aW9uIiwicG9pbnRMaWdodCIsInNwb3RMaWdodCIsInBvaW50c0F0WCIsInBvaW50c0F0WSIsInBvaW50c0F0WiIsIm1lcmdlTm9kZSIsInNlcGlhdG9uZSIsImRlc3QiLCJyZWZsZWN0aW9uIiwiYWNvcyIsInRhbiIsInRyYW5zZm9ybVBvaW50IiwibWF0cml4VHJhbnNmb3JtIiwicmJveCIsImJ1dHRvbnMiLCJoYW5kbGVyIiwiZGVmYXVsdFByZXZlbnRlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNyZWF0ZVNWR1BvaW50Iiwic3RhcnRQb2ludHMiLCJib3giLCJkcmFnIiwic25hcFRvR3JpZCIsInBvaW50U2VsZWN0aW9uIiwiaXNTZWxlY3RlZCIsInJlY3RTZWxlY3Rpb24iLCJwb2ludHNMaXN0IiwicmIiLCJsYiIsInBvaW50Q29vcmQiLCJwb2ludENvb3JkcyIsInBvaW50c0V4Y2x1ZGUiLCJkZWVwU2VsZWN0Iiwic2VsZWN0UG9pbnRzIiwic2VsZWN0UmVjdCIsIm9ic2VydmUiLCJkcmF3UG9pbnRzIiwiZ2V0UG9pbnRBcnJheSIsInJldHVyblZhbHVlIiwicGFnZVgiLCJwYWdlWSIsImNsYXNzUG9pbnRzIiwidXBkYXRlUG9pbnRTZWxlY3Rpb24iLCJ1cGRhdGVSZWN0U2VsZWN0aW9uIiwicm90YXRpb25Qb2ludCIsImNsYXNzUmVjdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlckluc3QiLCJkaXNjb25uZWN0IiwicGFyYW1ldGVycyIsImxhc3RVcGRhdGVDYWxsIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIl9leHRyYWN0UG9zaXRpb24iLCJjYWxjIiwiY2hlY2tBc3BlY3RSYXRpbyIsInNuYXBUb0FuZ2xlIiwiY29uc3RyYWludFRvQm94Iiwic2F2ZUFzcGVjdFJhdGlvIiwicXQiLCJwdWJsaWNNZXRob2RzIiwiYXhlcyIsImxvY2FsaXphdGlvbiIsImZvcm1hdHRlcnMiLCJ0aXRsZVN1YnRpdGxlIiwiZGltZW5zaW9ucyIsInpvb21QYW5TZWxlY3Rpb24iLCJadCIsImlzVXBkYXRpbmciLCJkZXN0cm95IiwiY2xlYXJEb21FbGVtZW50cyIsImtpbGxTVkciLCIkdCIsIldlYWtNYXAiLCJKdCIsImluaXRNb2R1bGVzIiwid2luZG93UmVzaXplSGFuZGxlciIsIl93aW5kb3dSZXNpemVIYW5kbGVyIiwicGFyZW50UmVzaXplSGFuZGxlciIsIl9wYXJlbnRSZXNpemVDYWxsYmFjayIsIl9jaGFydEluc3RhbmNlcyIsInNldExvY2FsZSIsIk5vZGUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiUmVzaXplT2JzZXJ2ZXIiLCJnZXRSb290Tm9kZSIsIm93bmVyRG9jdW1lbnQiLCJwcmVwZW5kIiwiaGVhZCIsIm1vdW50IiwiY2hlY2tSZXNwb25zaXZlQ29uZmlnIiwic2V0dXBFbGVtZW50cyIsImNoZWNrQ29tYm9TZXJpZXMiLCJoYW5kbGVOb0RhdGEiLCJzZXR1cEV2ZW50SGFuZGxlcnMiLCJwYXJzZURhdGEiLCJzZXRHbG9iYWxNYXJrZXJTaXplIiwic2V0TGFiZWxGb3JtYXR0ZXJzIiwiaGFzQWxsU2VyaWVzRXF1YWxYIiwiY29yZUNhbGN1bGF0aW9ucyIsImhlYXRtYXBMYWJlbEZvcm1hdHRlcnMiLCJnZXRMYXJnZXN0TWFya2VyU2l6ZSIsInh5U2V0dGluZ3MiLCJjcmVhdGVHcmlkTWFzayIsInBsb3RDaGFydFR5cGUiLCJicmluZ0ZvcndhcmQiLCJkYXRhTGFiZWxzQmFja2dyb3VuZCIsInNoaWZ0R3JhcGhQb3NpdGlvbiIsImVsR3JhcGgiLCJkcmF3R3JpZCIsImRyYXdJbWFnZUFubm9zIiwiZHJhd1RleHRBbm5vcyIsImRyYXdBeGlzIiwieEF4aXNMYWJlbENvcnJlY3Rpb25zIiwic2V0WUF4aXNUZXh0QWxpZ25tZW50cyIsInlBeGlzVGl0bGVSb3RhdGUiLCJkcmF3QXhlc0Fubm90YXRpb25zIiwiZHJhd1Rvb2x0aXAiLCJjcmVhdGVUb29sYmFyIiwicmVzaXplTm9uQXhpc0NoYXJ0cyIsImRlbGV0ZSIsInJlc2V0U2VyaWVzIiwiZm9yY2VYQXhpc1VwZGF0ZSIsImZvcmNlWUF4aXNVcGRhdGUiLCJjbGVhclByZXZpb3VzUGF0aHMiLCJ1cGRhdGVUaGVtZU9wdGlvbnMiLCJ0b2dnbGVTZXJpZXMiLCJzaG93U2VyaWVzIiwiYWRkWGF4aXNBbm5vdGF0aW9uRXh0ZXJuYWwiLCJhZGRZYXhpc0Fubm90YXRpb25FeHRlcm5hbCIsImFkZFBvaW50QW5ub3RhdGlvbkV4dGVybmFsIiwiY2xlYXJBbm5vdGF0aW9ucyIsInJlbW92ZUFubm90YXRpb24iLCJnZXRTZXJpZXNUb3RhbHNYUmFuZ2UiLCJ0b2dnbGVEYXRhUG9pbnRTZWxlY3Rpb24iLCJzZXRDdXJyZW50TG9jYWxlVmFsdWVzIiwiX3dpbmRvd1Jlc2l6ZSIsInJlbmRlciIsImFwZXhjaGFydHNfM181NF8xX2V4cG9ydHMiLCJfX2V4cG9ydCIsImFwZXhjaGFydHNfM181NF8xX2RlZmF1bHQiLCJtb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3JlRXhwb3J0IiwiX190b0VTTSIsImltcG9ydF9hcGV4Y2hhcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSx5QkFBQSxHQUFBQyxVQUFBO0VBQUEsbURBQUFDLENBQUFDLE9BQUEsRUFBQUMsT0FBQTtJQUFBOztJQUthLFNBQVNDLEVBQUVDLEVBQUEsRUFBRUMsRUFBQSxFQUFFO01BQUMsQ0FBQyxRQUFNQSxFQUFBLElBQUdBLEVBQUEsR0FBRUQsRUFBQSxD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QUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsYUFBYSxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsWUFBWSxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsWUFBWSxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsWUFBWSxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsWUFBWSxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsY0FBYyxVQUFTeGpDLEVBQUEsRUFBRTtjQUFDbkUsRUFBQSxDQUFFczZDLE1BQUEsQ0FBT24yQyxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztZQUFDLENBQUUsR0FBRSxLQUFLbjdELEVBQUEsQ0FBR2srQixFQUFBLENBQUcsZ0JBQWdCLFVBQVN4akMsRUFBQSxFQUFFO2NBQUNuRSxFQUFBLENBQUVzNkMsTUFBQSxDQUFPbjJDLEVBQUEsSUFBR3dFLE1BQUEsQ0FBT2k4RCxLQUFLO1lBQUMsQ0FBRSxHQUFFLEtBQUs1TCxNQUFBLENBQU87VUFBQztRQUFDLEdBQUVqNUQsRUFBQSxDQUFFbUIsU0FBQSxDQUFVNC9ELElBQUEsR0FBSyxZQUFVO1VBQUMsT0FBTyxLQUFLcjNELEVBQUEsQ0FBR3l2QyxHQUFBLENBQUksV0FBVyxHQUFFLEtBQUt6dkMsRUFBQSxDQUFHeXZDLEdBQUEsQ0FBSSxXQUFXLEdBQUUsS0FBS3p2QyxFQUFBLENBQUd5dkMsR0FBQSxDQUFJLFdBQVcsR0FBRSxLQUFLenZDLEVBQUEsQ0FBR3l2QyxHQUFBLENBQUksV0FBVyxHQUFFLEtBQUt6dkMsRUFBQSxDQUFHeXZDLEdBQUEsQ0FBSSxVQUFVLEdBQUUsS0FBS3p2QyxFQUFBLENBQUd5dkMsR0FBQSxDQUFJLFVBQVUsR0FBRSxLQUFLenZDLEVBQUEsQ0FBR3l2QyxHQUFBLENBQUksVUFBVSxHQUFFLEtBQUt6dkMsRUFBQSxDQUFHeXZDLEdBQUEsQ0FBSSxVQUFVLEdBQUUsS0FBS3p2QyxFQUFBLENBQUd5dkMsR0FBQSxDQUFJLFlBQVksR0FBRSxLQUFLenZDLEVBQUEsQ0FBR3l2QyxHQUFBLENBQUksY0FBYyxHQUFFO1FBQUksR0FBRW41QyxFQUFBLENBQUVtQixTQUFBLENBQVVvNUMsTUFBQSxHQUFPLFVBQVMxNEMsRUFBQSxFQUFFO1VBQUMsSUFBSTVCLEVBQUEsR0FBRTtVQUFLLEtBQUs4RSxDQUFBLEdBQUUsS0FBSzJFLEVBQUEsQ0FBR3VDLElBQUEsQ0FBSzYyRCxZQUFBLENBQWEsRUFBRTMyQyxPQUFBLENBQVEsR0FBRSxLQUFLL2UsTUFBQSxHQUFPO1lBQUNwTSxDQUFBLEVBQUU0SCxNQUFBLENBQU9vbEUsV0FBQTtZQUFZeG1FLENBQUEsRUFBRW9CLE1BQUEsQ0FBT3FsRTtVQUFXO1VBQUUsSUFBSTl0RSxFQUFBLEdBQUUsS0FBSyt0RSxnQkFBQSxDQUFpQnJzRSxFQUFBLENBQUV5L0QsTUFBQSxDQUFPdUQsS0FBSztVQUFFLElBQUcsS0FBS2lKLFVBQUEsR0FBVztZQUFDdmpFLElBQUEsRUFBSyxLQUFLYixFQUFBLENBQUdhLElBQUE7WUFBS2xHLENBQUEsRUFBRSxLQUFLbW5FLGNBQUEsQ0FBZXJyRSxFQUFBLENBQUVhLENBQUEsRUFBRWIsRUFBQSxDQUFFcUgsQ0FBQztZQUFFeEcsQ0FBQSxFQUFFYSxFQUFBLENBQUV5L0QsTUFBQSxDQUFPdGdFLENBQUE7WUFBRXdHLENBQUEsRUFBRTNGLEVBQUEsQ0FBRXkvRCxNQUFBLENBQU85NUQsQ0FBQTtZQUFFeWtFLEdBQUEsRUFBSSxLQUFLdmlFLEVBQUEsQ0FBRzhMLElBQUEsQ0FBSztZQUFFZ3RELFFBQUEsRUFBUyxLQUFLOTRELEVBQUEsQ0FBRzJhLFNBQUEsQ0FBVSxFQUFFbStDO1VBQVEsR0FBRSxXQUFTLEtBQUs5NEQsRUFBQSxDQUFHYSxJQUFBLEtBQU8sS0FBS3VqRSxVQUFBLENBQVczNkQsUUFBQSxHQUFTLEtBQUt6SixFQUFBLENBQUdKLElBQUEsQ0FBSyxFQUFFLGVBQWMsV0FBU3pILEVBQUEsQ0FBRXkvRCxNQUFBLENBQU85Z0UsQ0FBQSxFQUFFO1lBQUMsSUFBSUosRUFBQSxHQUFFLEtBQUtzSixFQUFBLENBQUdpOEQsS0FBQSxDQUFNLEVBQUVyaUUsT0FBQSxDQUFRO1lBQUUsS0FBS3dxRSxVQUFBLENBQVd0dEUsQ0FBQSxHQUFFcUIsRUFBQSxDQUFFeS9ELE1BQUEsQ0FBTzlnRSxDQUFBLEVBQUUsS0FBS3N0RSxVQUFBLENBQVduQixXQUFBLEdBQVksQ0FBQ3ZzRSxFQUFBLENBQUV5QixFQUFBLENBQUV5L0QsTUFBQSxDQUFPOWdFLENBQUEsRUFBRyxJQUFHSixFQUFBLENBQUV5QixFQUFBLENBQUV5L0QsTUFBQSxDQUFPOWdFLENBQUEsRUFBRyxFQUFFO1VBQUM7VUFBQyxRQUFPcUIsRUFBQSxDQUFFMEksSUFBQTtZQUFBLEtBQVU7Y0FBSyxLQUFLNGpFLElBQUEsR0FBSyxVQUFTL3BFLEVBQUEsRUFBRVQsRUFBQSxFQUFFO2dCQUFDLElBQUlkLEVBQUEsR0FBRSxLQUFLc3BFLFVBQUEsQ0FBVy9uRSxFQUFBLEVBQUVULEVBQUM7Z0JBQUUsSUFBRyxLQUFLbXFFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTNrRSxLQUFBLEdBQU16RSxFQUFBLENBQUUsS0FBRyxLQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTzFFLEVBQUEsQ0FBRSxLQUFHLEdBQUU7a0JBQUMsSUFBRyxXQUFTLEtBQUtpckUsVUFBQSxDQUFXdmpFLElBQUEsRUFBSyxPQUFPLEtBQUtiLEVBQUEsQ0FBR3FwQixJQUFBLENBQUssS0FBSys2QyxVQUFBLENBQVc3QixHQUFBLENBQUlqckUsQ0FBQSxHQUFFNkIsRUFBQSxDQUFFLElBQUcsS0FBS2lyRSxVQUFBLENBQVc3QixHQUFBLENBQUl6a0UsQ0FBQyxHQUFFLEtBQUssS0FBS2tDLEVBQUEsQ0FBR0osSUFBQSxDQUFLLGFBQVksS0FBS3drRSxVQUFBLENBQVczNkQsUUFBQSxHQUFTdFEsRUFBQSxDQUFFLEVBQUU7a0JBQUVBLEVBQUEsR0FBRSxLQUFLdXJFLGdCQUFBLENBQWlCdnJFLEVBQUMsR0FBRSxLQUFLNkcsRUFBQSxDQUFHcXBCLElBQUEsQ0FBSyxLQUFLKzZDLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSWpyRSxDQUFBLEdBQUU2QixFQUFBLENBQUUsSUFBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFBLEdBQUUzRSxFQUFBLENBQUUsRUFBRSxFQUFFK0ksSUFBQSxDQUFLLEtBQUtraUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxJQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTzFFLEVBQUEsQ0FBRSxFQUFFO2dCQUFDO2NBQUM7Y0FBRTtZQUFBLEtBQVU7Y0FBSyxLQUFLc3JFLElBQUEsR0FBSyxVQUFTL3BFLEVBQUEsRUFBRVQsRUFBQSxFQUFFO2dCQUFDLElBQUlkLEVBQUEsR0FBRSxLQUFLc3BFLFVBQUEsQ0FBVy9uRSxFQUFBLEVBQUVULEVBQUEsRUFBRSxDQUFDO2dCQUFFLElBQUcsS0FBS21xRSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxHQUFNekUsRUFBQSxDQUFFLEtBQUcsS0FBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsS0FBRyxHQUFFO2tCQUFDLElBQUcsV0FBUyxLQUFLaXJFLFVBQUEsQ0FBV3ZqRSxJQUFBLEVBQUssT0FBTyxLQUFLYixFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsR0FBRTZCLEVBQUEsQ0FBRSxJQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJemtFLENBQUMsR0FBRSxLQUFLLEtBQUtrQyxFQUFBLENBQUdKLElBQUEsQ0FBSyxhQUFZLEtBQUt3a0UsVUFBQSxDQUFXMzZELFFBQUEsR0FBU3RRLEVBQUEsQ0FBRSxFQUFFO2tCQUFFQSxFQUFBLEdBQUUsS0FBS3VyRSxnQkFBQSxDQUFpQnZyRSxFQUFBLEVBQUUsSUFBRSxHQUFFLEtBQUs2RyxFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsRUFBRSxLQUFLOHNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFBLEdBQUUzRSxFQUFBLENBQUUsRUFBRSxFQUFFK0ksSUFBQSxDQUFLLEtBQUtraUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxJQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTzFFLEVBQUEsQ0FBRSxFQUFFO2dCQUFDO2NBQUM7Y0FBRTtZQUFBLEtBQVU7Y0FBSyxLQUFLc3JFLElBQUEsR0FBSyxVQUFTL3BFLEVBQUEsRUFBRVQsRUFBQSxFQUFFO2dCQUFDLElBQUlkLEVBQUEsR0FBRSxLQUFLc3BFLFVBQUEsQ0FBVy9uRSxFQUFBLEVBQUVULEVBQUEsRUFBRSxDQUFDO2dCQUFFLElBQUcsS0FBS21xRSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxHQUFNekUsRUFBQSxDQUFFLEtBQUcsS0FBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsS0FBRyxHQUFFO2tCQUFDLElBQUcsV0FBUyxLQUFLaXJFLFVBQUEsQ0FBV3ZqRSxJQUFBLEVBQUssT0FBTyxLQUFLYixFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsR0FBRTZCLEVBQUEsQ0FBRSxJQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJemtFLENBQUMsR0FBRSxLQUFLLEtBQUtrQyxFQUFBLENBQUdKLElBQUEsQ0FBSyxhQUFZLEtBQUt3a0UsVUFBQSxDQUFXMzZELFFBQUEsR0FBU3RRLEVBQUEsQ0FBRSxFQUFFO2tCQUFFQSxFQUFBLEdBQUUsS0FBS3VyRSxnQkFBQSxDQUFpQnZyRSxFQUFDLEdBQUUsS0FBSzZHLEVBQUEsQ0FBR3FwQixJQUFBLENBQUssS0FBSys2QyxVQUFBLENBQVc3QixHQUFBLENBQUlqckUsQ0FBQSxFQUFFLEtBQUs4c0UsVUFBQSxDQUFXN0IsR0FBQSxDQUFJemtFLENBQUMsRUFBRW9FLElBQUEsQ0FBSyxLQUFLa2lFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTNrRSxLQUFBLEdBQU16RSxFQUFBLENBQUUsSUFBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsRUFBRTtnQkFBQztjQUFDO2NBQUU7WUFBQSxLQUFVO2NBQUssS0FBS3NyRSxJQUFBLEdBQUssVUFBUy9wRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUUsS0FBS3NwRSxVQUFBLENBQVcvbkUsRUFBQSxFQUFFVCxFQUFBLEVBQUUsQ0FBQztnQkFBRSxJQUFHLEtBQUttcUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxLQUFHLEtBQUcsS0FBS2lyRSxVQUFBLENBQVc3QixHQUFBLENBQUkxa0UsTUFBQSxHQUFPMUUsRUFBQSxDQUFFLEtBQUcsR0FBRTtrQkFBQyxJQUFHLFdBQVMsS0FBS2lyRSxVQUFBLENBQVd2akUsSUFBQSxFQUFLLE9BQU8sS0FBS2IsRUFBQSxDQUFHcXBCLElBQUEsQ0FBSyxLQUFLKzZDLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSWpyRSxDQUFBLEdBQUU2QixFQUFBLENBQUUsSUFBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFDLEdBQUUsS0FBSyxLQUFLa0MsRUFBQSxDQUFHSixJQUFBLENBQUssYUFBWSxLQUFLd2tFLFVBQUEsQ0FBVzM2RCxRQUFBLEdBQVN0USxFQUFBLENBQUUsRUFBRTtrQkFBRUEsRUFBQSxHQUFFLEtBQUt1ckUsZ0JBQUEsQ0FBaUJ2ckUsRUFBQSxFQUFFLElBQUUsR0FBRSxLQUFLNkcsRUFBQSxDQUFHcXBCLElBQUEsQ0FBSyxLQUFLKzZDLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSWpyRSxDQUFBLEdBQUU2QixFQUFBLENBQUUsSUFBRyxLQUFLaXJFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFDLEVBQUVvRSxJQUFBLENBQUssS0FBS2tpRSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxHQUFNekUsRUFBQSxDQUFFLElBQUcsS0FBS2lyRSxVQUFBLENBQVc3QixHQUFBLENBQUkxa0UsTUFBQSxHQUFPMUUsRUFBQSxDQUFFLEVBQUU7Z0JBQUM7Y0FBQztjQUFFO1lBQUEsS0FBVTtjQUFJLEtBQUtzckUsSUFBQSxHQUFLLFVBQVMvcEUsRUFBQSxFQUFFVCxFQUFBLEVBQUU7Z0JBQUMsSUFBSWQsRUFBQSxHQUFFLEtBQUtzcEUsVUFBQSxDQUFXL25FLEVBQUEsRUFBRVQsRUFBQSxFQUFFLENBQUM7Z0JBQUUsSUFBRyxLQUFLbXFFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsS0FBRyxHQUFFO2tCQUFDLElBQUcsV0FBUyxLQUFLaXJFLFVBQUEsQ0FBV3ZqRSxJQUFBLEVBQUs7a0JBQU8sS0FBS2IsRUFBQSxDQUFHcXBCLElBQUEsQ0FBSyxLQUFLKzZDLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSWpyRSxDQUFBLEVBQUUsS0FBSzhzRSxVQUFBLENBQVc3QixHQUFBLENBQUl6a0UsQ0FBQSxHQUFFM0UsRUFBQSxDQUFFLEVBQUUsRUFBRTBFLE1BQUEsQ0FBTyxLQUFLdW1FLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsRUFBRTtnQkFBQztjQUFDO2NBQUU7WUFBQSxLQUFVO2NBQUksS0FBS3NyRSxJQUFBLEdBQUssVUFBUy9wRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUUsS0FBS3NwRSxVQUFBLENBQVcvbkUsRUFBQSxFQUFFVCxFQUFBLEVBQUUsQ0FBQztnQkFBRSxJQUFHLEtBQUttcUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxLQUFHLEdBQUU7a0JBQUMsSUFBRyxXQUFTLEtBQUtpckUsVUFBQSxDQUFXdmpFLElBQUEsRUFBSztrQkFBTyxLQUFLYixFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsRUFBRSxLQUFLOHNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFDLEVBQUVGLEtBQUEsQ0FBTSxLQUFLd21FLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTNrRSxLQUFBLEdBQU16RSxFQUFBLENBQUUsRUFBRTtnQkFBQztjQUFDO2NBQUU7WUFBQSxLQUFVO2NBQUksS0FBS3NyRSxJQUFBLEdBQUssVUFBUy9wRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUUsS0FBS3NwRSxVQUFBLENBQVcvbkUsRUFBQSxFQUFFVCxFQUFBLEVBQUUsQ0FBQztnQkFBRSxJQUFHLEtBQUttcUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTzFFLEVBQUEsQ0FBRSxLQUFHLEdBQUU7a0JBQUMsSUFBRyxXQUFTLEtBQUtpckUsVUFBQSxDQUFXdmpFLElBQUEsRUFBSztrQkFBTyxLQUFLYixFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsRUFBRSxLQUFLOHNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFDLEVBQUVELE1BQUEsQ0FBTyxLQUFLdW1FLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8xRSxFQUFBLENBQUUsRUFBRTtnQkFBQztjQUFDO2NBQUU7WUFBQSxLQUFVO2NBQUksS0FBS3NyRSxJQUFBLEdBQUssVUFBUy9wRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUUsS0FBS3NwRSxVQUFBLENBQVcvbkUsRUFBQSxFQUFFVCxFQUFBLEVBQUUsQ0FBQztnQkFBRSxJQUFHLEtBQUttcUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxLQUFHLEdBQUU7a0JBQUMsSUFBRyxXQUFTLEtBQUtpckUsVUFBQSxDQUFXdmpFLElBQUEsRUFBSztrQkFBTyxLQUFLYixFQUFBLENBQUdxcEIsSUFBQSxDQUFLLEtBQUsrNkMsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsR0FBRTZCLEVBQUEsQ0FBRSxJQUFHLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJemtFLENBQUMsRUFBRUYsS0FBQSxDQUFNLEtBQUt3bUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTXpFLEVBQUEsQ0FBRSxFQUFFO2dCQUFDO2NBQUM7Y0FBRTtZQUFBLEtBQVU7Y0FBTSxLQUFLc3JFLElBQUEsR0FBSyxVQUFTL3BFLEVBQUEsRUFBRVQsRUFBQSxFQUFFO2dCQUFDLElBQUlkLEVBQUEsR0FBRXVCLEVBQUEsR0FBRSxLQUFLMHBFLFVBQUEsQ0FBV3pwRSxDQUFBLENBQUVyRCxDQUFBO2tCQUFFd0UsRUFBQSxHQUFFN0IsRUFBQSxHQUFFLEtBQUttcUUsVUFBQSxDQUFXenBFLENBQUEsQ0FBRW1ELENBQUE7a0JBQUUvRixFQUFBLEdBQUV5RCxJQUFBLENBQUttOUQsS0FBQSxDQUFNLEtBQUt5TCxVQUFBLENBQVd6cEUsQ0FBQSxDQUFFbUQsQ0FBQSxHQUFFLEtBQUtzbUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJemtFLENBQUEsR0FBRSxLQUFLc21FLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTFrRSxNQUFBLEdBQU8sR0FBRSxLQUFLdW1FLFVBQUEsQ0FBV3pwRSxDQUFBLENBQUVyRCxDQUFBLEdBQUUsS0FBSzhzRSxVQUFBLENBQVc3QixHQUFBLENBQUlqckUsQ0FBQSxHQUFFLEtBQUs4c0UsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBTSxDQUFDO2tCQUFFdkYsRUFBQSxHQUFFbUQsSUFBQSxDQUFLbTlELEtBQUEsQ0FBTTc4RCxFQUFBLEdBQUUsS0FBS3NvRSxVQUFBLENBQVc3QixHQUFBLENBQUl6a0UsQ0FBQSxHQUFFLEtBQUtzbUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTyxHQUFFMUUsRUFBQSxHQUFFLEtBQUtpckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJanJFLENBQUEsR0FBRSxLQUFLOHNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTNrRSxLQUFBLEdBQU0sQ0FBQztrQkFBRXRGLEVBQUEsR0FBRSxLQUFLOHJFLFVBQUEsQ0FBV3RMLFFBQUEsR0FBUyxPQUFLemdFLEVBQUEsR0FBRU4sRUFBQSxJQUFHeUQsSUFBQSxDQUFLNEMsRUFBQSxHQUFHLEtBQUs2YyxPQUFBLENBQVEwcEQsV0FBQSxHQUFZO2dCQUFFLEtBQUsza0UsRUFBQSxDQUFHMnpELE1BQUEsQ0FBTyxLQUFLeVEsVUFBQSxDQUFXN0IsR0FBQSxDQUFJcjVELEVBQUEsRUFBRyxLQUFLazdELFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXA1RCxFQUFFLEVBQUV3UCxNQUFBLENBQU9yZ0IsRUFBQSxHQUFFQSxFQUFBLEdBQUUsS0FBSzJpQixPQUFBLENBQVEwcEQsV0FBQSxFQUFZLEtBQUtQLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXI1RCxFQUFBLEVBQUcsS0FBS2s3RCxVQUFBLENBQVc3QixHQUFBLENBQUlwNUQsRUFBRTtjQUFDO2NBQUU7WUFBQSxLQUFVO2NBQVEsS0FBS3M3RCxJQUFBLEdBQUssVUFBUy9wRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUUsS0FBS3NwRSxVQUFBLENBQVcvbkUsRUFBQSxFQUFFVCxFQUFBLEVBQUUsS0FBS21xRSxVQUFBLENBQVduQixXQUFBLENBQVksSUFBRyxLQUFLbUIsVUFBQSxDQUFXbkIsV0FBQSxDQUFZLEVBQUU7a0JBQUVubkUsRUFBQSxHQUFFLEtBQUtrRSxFQUFBLENBQUdpOEQsS0FBQSxDQUFNLEVBQUVyaUUsT0FBQSxDQUFRO2dCQUFFa0MsRUFBQSxDQUFFLEtBQUtzb0UsVUFBQSxDQUFXdHRFLENBQUEsRUFBRyxLQUFHLEtBQUtzdEUsVUFBQSxDQUFXbkIsV0FBQSxDQUFZLEtBQUc5cEUsRUFBQSxDQUFFLElBQUcyQyxFQUFBLENBQUUsS0FBS3NvRSxVQUFBLENBQVd0dEUsQ0FBQSxFQUFHLEtBQUcsS0FBS3N0RSxVQUFBLENBQVduQixXQUFBLENBQVksS0FBRzlwRSxFQUFBLENBQUUsSUFBRyxLQUFLNkcsRUFBQSxDQUFHMEIsSUFBQSxDQUFLNUYsRUFBQztjQUFDO1VBQUE7VUFBRSxLQUFLa0UsRUFBQSxDQUFHMHFDLElBQUEsQ0FBSyxlQUFjO1lBQUMweUIsRUFBQSxFQUFHLEtBQUtnSCxVQUFBLENBQVc5c0UsQ0FBQTtZQUFFK2xFLEVBQUEsRUFBRyxLQUFLK0csVUFBQSxDQUFXdG1FLENBQUE7WUFBRXE5RCxLQUFBLEVBQU1oakU7VUFBQyxDQUFDLEdBQUU2SixHQUFBLENBQUlrOEIsRUFBQSxDQUFHaC9CLE1BQUEsRUFBTyxvQkFBb0IsVUFBU3hFLEVBQUEsRUFBRTtZQUFDbkUsRUFBQSxDQUFFZzVELE1BQUEsQ0FBTzcwRCxFQUFBLElBQUd3RSxNQUFBLENBQU9pOEQsS0FBSztVQUFDLENBQUUsR0FBRW41RCxHQUFBLENBQUlrOEIsRUFBQSxDQUFHaC9CLE1BQUEsRUFBTyxtQkFBbUIsWUFBVTtZQUFDM0ksRUFBQSxDQUFFMEIsSUFBQSxDQUFLO1VBQUMsQ0FBRSxHQUFFK0osR0FBQSxDQUFJazhCLEVBQUEsQ0FBR2gvQixNQUFBLEVBQU8sb0JBQW9CLFVBQVN4RSxFQUFBLEVBQUU7WUFBQ25FLEVBQUEsQ0FBRWc1RCxNQUFBLENBQU83MEQsRUFBQSxJQUFHd0UsTUFBQSxDQUFPaThELEtBQUs7VUFBQyxDQUFFLEdBQUVuNUQsR0FBQSxDQUFJazhCLEVBQUEsQ0FBR2gvQixNQUFBLEVBQU8sa0JBQWtCLFlBQVU7WUFBQzNJLEVBQUEsQ0FBRTBCLElBQUEsQ0FBSztVQUFDLENBQUU7UUFBQyxHQUFFM0IsRUFBQSxDQUFFbUIsU0FBQSxDQUFVODNELE1BQUEsR0FBTyxVQUFTcDNELEVBQUEsRUFBRTtVQUFDLElBQUdBLEVBQUEsRUFBRTtZQUFDLElBQUk1QixFQUFBLEdBQUUsS0FBS2l1RSxnQkFBQSxDQUFpQnJzRSxFQUFDO2NBQUUxQixFQUFBLEdBQUUsS0FBS3FyRSxjQUFBLENBQWV2ckUsRUFBQSxDQUFFZSxDQUFBLEVBQUVmLEVBQUEsQ0FBRXVILENBQUM7Y0FBRXBILEVBQUEsR0FBRUQsRUFBQSxDQUFFYSxDQUFBLEdBQUUsS0FBSzhzRSxVQUFBLENBQVd6cEUsQ0FBQSxDQUFFckQsQ0FBQTtjQUFFUyxFQUFBLEdBQUV0QixFQUFBLENBQUVxSCxDQUFBLEdBQUUsS0FBS3NtRSxVQUFBLENBQVd6cEUsQ0FBQSxDQUFFbUQsQ0FBQTtZQUFFLEtBQUt1bUUsY0FBQSxHQUFlLENBQUMzdEUsRUFBQSxFQUFFcUIsRUFBQyxHQUFFLEtBQUswc0UsSUFBQSxDQUFLL3RFLEVBQUEsRUFBRXFCLEVBQUMsR0FBRSxLQUFLaUksRUFBQSxDQUFHMHFDLElBQUEsQ0FBSyxZQUFXO2NBQUMweUIsRUFBQSxFQUFHMW1FLEVBQUE7Y0FBRTJtRSxFQUFBLEVBQUd0bEUsRUFBQTtjQUFFb2pFLEtBQUEsRUFBTWhqRTtZQUFDLENBQUM7VUFBQyxPQUFNLEtBQUtrc0UsY0FBQSxJQUFnQixLQUFLSSxJQUFBLENBQUssS0FBS0osY0FBQSxDQUFlLElBQUcsS0FBS0EsY0FBQSxDQUFlLEVBQUU7UUFBQyxHQUFFL3RFLEVBQUEsQ0FBRW1CLFNBQUEsQ0FBVVEsSUFBQSxHQUFLLFlBQVU7VUFBQyxLQUFLb3NFLGNBQUEsR0FBZSxNQUFLcmlFLEdBQUEsQ0FBSXl0QyxHQUFBLENBQUl2d0MsTUFBQSxFQUFPLGtCQUFrQixHQUFFOEMsR0FBQSxDQUFJeXRDLEdBQUEsQ0FBSXZ3QyxNQUFBLEVBQU8sZ0JBQWdCLEdBQUU4QyxHQUFBLENBQUl5dEMsR0FBQSxDQUFJdndDLE1BQUEsRUFBTyxrQkFBa0IsR0FBRThDLEdBQUEsQ0FBSXl0QyxHQUFBLENBQUl2d0MsTUFBQSxFQUFPLGlCQUFpQixHQUFFLEtBQUtjLEVBQUEsQ0FBRzBxQyxJQUFBLENBQUssWUFBWTtRQUFDLEdBQUVwMEMsRUFBQSxDQUFFbUIsU0FBQSxDQUFVZ3JFLFVBQUEsR0FBVyxVQUFTdHFFLEVBQUEsRUFBRTVCLEVBQUEsRUFBRUUsRUFBQSxFQUFFQyxFQUFBLEVBQUU7VUFBQyxJQUFJcUIsRUFBQTtVQUFFLE9BQU8sV0FBU3JCLEVBQUEsR0FBRXFCLEVBQUEsR0FBRSxFQUFFdEIsRUFBQSxHQUFFMEIsRUFBQSxJQUFHLEtBQUs4aUIsT0FBQSxDQUFRd25ELFVBQUEsR0FBWS9yRSxFQUFBLEdBQUVILEVBQUEsSUFBRyxLQUFLMGtCLE9BQUEsQ0FBUXduRCxVQUFVLEtBQUdoc0UsRUFBQSxHQUFFLFFBQU1BLEVBQUEsR0FBRSxJQUFFQSxFQUFBLEVBQUVzQixFQUFBLEdBQUUsRUFBRSxLQUFLcXNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSWpyRSxDQUFBLEdBQUVhLEVBQUEsSUFBRyxJQUFFMUIsRUFBQSxHQUFFLElBQUUsS0FBSzJ0RSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxLQUFRLEtBQUtxZCxPQUFBLENBQVF3bkQsVUFBQSxHQUFZLEtBQUsyQixVQUFBLENBQVc3QixHQUFBLENBQUl6a0UsQ0FBQSxHQUFFdkgsRUFBQSxJQUFHLElBQUVFLEVBQUEsR0FBRSxJQUFFLEtBQUsydEUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsS0FBUyxLQUFLb2QsT0FBQSxDQUFRd25ELFVBQVUsSUFBR3RxRSxFQUFBLEdBQUUsTUFBSUosRUFBQSxDQUFFLE1BQUksS0FBS2tqQixPQUFBLENBQVF3bkQsVUFBQSxHQUFZbHNFLEVBQUEsR0FBRSxNQUFJd0IsRUFBQSxDQUFFLE1BQUksS0FBS2tqQixPQUFBLENBQVF3bkQsVUFBQSxHQUFZdHFFLEVBQUEsSUFBR3FELElBQUEsQ0FBSzJELEdBQUEsQ0FBSXBILEVBQUEsQ0FBRSxFQUFFLElBQUUsS0FBS2tqQixPQUFBLENBQVF3bkQsVUFBQSxHQUFXLElBQUUxcUUsRUFBQSxDQUFFLEtBQUdBLEVBQUEsQ0FBRSxNQUFJSSxFQUFBLEdBQUUsSUFBRSxDQUFDLEtBQUs4aUIsT0FBQSxDQUFRd25ELFVBQUEsR0FBVyxLQUFLeG5ELE9BQUEsQ0FBUXduRCxVQUFBLEdBQVlsc0UsRUFBQSxJQUFHaUYsSUFBQSxDQUFLMkQsR0FBQSxDQUFJcEgsRUFBQSxDQUFFLEVBQUUsSUFBRSxLQUFLa2pCLE9BQUEsQ0FBUXduRCxVQUFBLEdBQVcsSUFBRTFxRSxFQUFBLENBQUUsS0FBR0EsRUFBQSxDQUFFLE1BQUl4QixFQUFBLEdBQUUsSUFBRSxDQUFDLEtBQUswa0IsT0FBQSxDQUFRd25ELFVBQUEsR0FBVyxLQUFLeG5ELE9BQUEsQ0FBUXduRCxVQUFBLEdBQVksS0FBS21DLGVBQUEsQ0FBZ0J6c0UsRUFBQSxFQUFFNUIsRUFBQSxFQUFFRSxFQUFBLEVBQUVDLEVBQUM7UUFBQyxHQUFFSixFQUFBLENBQUVtQixTQUFBLENBQVVtdEUsZUFBQSxHQUFnQixVQUFTenNFLEVBQUEsRUFBRTVCLEVBQUEsRUFBRUUsRUFBQSxFQUFFQyxFQUFBLEVBQUU7VUFBQyxJQUFJcUIsRUFBQTtZQUFFTSxFQUFBO1lBQUVDLEVBQUEsR0FBRSxLQUFLMmlCLE9BQUEsQ0FBUTYxQixVQUFBLElBQVksQ0FBQztVQUFFLE9BQU8sV0FBU3A2QyxFQUFBLElBQUdxQixFQUFBLEdBQUV0QixFQUFBLEVBQUU0QixFQUFBLEdBQUUzQixFQUFBLEtBQUlxQixFQUFBLEdBQUUsS0FBS3FzRSxVQUFBLENBQVc3QixHQUFBLENBQUlqckUsQ0FBQSxJQUFHLElBQUViLEVBQUEsR0FBRSxJQUFFLEtBQUsydEUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJM2tFLEtBQUEsR0FBT3ZGLEVBQUEsR0FBRSxLQUFLK3JFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSXprRSxDQUFBLElBQUcsSUFBRXJILEVBQUEsR0FBRSxJQUFFLEtBQUsydEUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsSUFBUyxXQUFTdkYsRUFBQSxDQUFFaVYsSUFBQSxJQUFNeFYsRUFBQSxHQUFFSSxFQUFBLEdBQUVHLEVBQUEsQ0FBRWlWLElBQUEsS0FBT3BWLEVBQUEsR0FBRUcsRUFBQSxDQUFFaVYsSUFBQSxHQUFLeFYsRUFBQSxHQUFHLFdBQVNPLEVBQUEsQ0FBRWlXLElBQUEsSUFBTXhXLEVBQUEsR0FBRUksRUFBQSxHQUFFRyxFQUFBLENBQUVpVyxJQUFBLEtBQU9wVyxFQUFBLEdBQUVHLEVBQUEsQ0FBRWlXLElBQUEsR0FBS3hXLEVBQUEsR0FBRyxXQUFTTyxFQUFBLENBQUU4VixJQUFBLElBQU0vVixFQUFBLEdBQUU5QixFQUFBLEdBQUUrQixFQUFBLENBQUU4VixJQUFBLEtBQU83WCxFQUFBLEdBQUUrQixFQUFBLENBQUU4VixJQUFBLEdBQUsvVixFQUFBLEdBQUcsV0FBU0MsRUFBQSxDQUFFK1YsSUFBQSxJQUFNaFcsRUFBQSxHQUFFOUIsRUFBQSxHQUFFK0IsRUFBQSxDQUFFK1YsSUFBQSxLQUFPOVgsRUFBQSxHQUFFK0IsRUFBQSxDQUFFK1YsSUFBQSxHQUFLaFcsRUFBQSxHQUFHLENBQUNGLEVBQUEsRUFBRTVCLEVBQUM7UUFBQyxHQUFFRCxFQUFBLENBQUVtQixTQUFBLENBQVVpdEUsZ0JBQUEsR0FBaUIsVUFBU3ZzRSxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxJQUFHLENBQUMsS0FBSzBrQixPQUFBLENBQVE0cEQsZUFBQSxFQUFnQixPQUFPMXNFLEVBQUE7VUFBRSxJQUFJMUIsRUFBQSxHQUFFMEIsRUFBQSxDQUFFK0MsS0FBQSxDQUFNO1lBQUV4RSxFQUFBLEdBQUUsS0FBSzB0RSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxHQUFNLEtBQUt3bUUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUE7WUFBTzlGLEVBQUEsR0FBRSxLQUFLcXNFLFVBQUEsQ0FBVzdCLEdBQUEsQ0FBSTNrRSxLQUFBLEdBQU16RixFQUFBLENBQUU7WUFBR0UsRUFBQSxHQUFFLEtBQUsrckUsVUFBQSxDQUFXN0IsR0FBQSxDQUFJMWtFLE1BQUEsR0FBTzFGLEVBQUEsQ0FBRTtZQUFHRyxFQUFBLEdBQUVQLEVBQUEsR0FBRU0sRUFBQTtVQUFFLE9BQU9DLEVBQUEsR0FBRTVCLEVBQUEsSUFBR0QsRUFBQSxDQUFFLEtBQUdzQixFQUFBLEdBQUVyQixFQUFBLEdBQUUsS0FBSzB0RSxVQUFBLENBQVc3QixHQUFBLENBQUkxa0UsTUFBQSxFQUFPdEgsRUFBQSxLQUFJRSxFQUFBLENBQUUsS0FBRyxDQUFDQSxFQUFBLENBQUUsT0FBSzZCLEVBQUEsR0FBRTVCLEVBQUEsS0FBSUQsRUFBQSxDQUFFLEtBQUcsS0FBSzJ0RSxVQUFBLENBQVc3QixHQUFBLENBQUkza0UsS0FBQSxHQUFNdkYsRUFBQSxHQUFFM0IsRUFBQSxFQUFFSCxFQUFBLEtBQUlFLEVBQUEsQ0FBRSxLQUFHLENBQUNBLEVBQUEsQ0FBRSxNQUFLQSxFQUFBO1FBQUMsR0FBRXVMLEdBQUEsQ0FBSS9GLE1BQUEsQ0FBTytGLEdBQUEsQ0FBSTB1RCxPQUFBLEVBQVE7VUFBQzdmLE1BQUEsRUFBTyxTQUFBQSxDQUFTdDZDLEVBQUEsRUFBRTtZQUFDLFFBQU8sS0FBS3FuRSxRQUFBLENBQVMsZ0JBQWdCLEtBQUcsSUFBSXRuRSxFQUFBLENBQUUsSUFBSSxHQUFHdzFCLElBQUEsQ0FBS3YxQixFQUFBLElBQUcsQ0FBQyxDQUFDLEdBQUU7VUFBSTtRQUFDLENBQUMsR0FBRXlMLEdBQUEsQ0FBSTB1RCxPQUFBLENBQVFqNUQsU0FBQSxDQUFVbzVDLE1BQUEsQ0FBT3loQixRQUFBLEdBQVM7VUFBQ3FTLFdBQUEsRUFBWTtVQUFHbEMsVUFBQSxFQUFXO1VBQUUzeEIsVUFBQSxFQUFXLENBQUM7VUFBRSt6QixlQUFBLEVBQWdCO1FBQUU7TUFBQyxHQUFHcnNFLElBQUEsQ0FBSyxJQUFJO0lBQUMsRUFBRSxHQUFFLFdBQVMwRyxNQUFBLENBQU9rdEIsSUFBQSxLQUFPbHRCLE1BQUEsQ0FBT2t0QixJQUFBLEdBQUssQ0FBQztJQUFHLElBQUkwNEMsRUFBQSxHQUFHLFlBQVU7UUFBQyxTQUFTeHVFLEdBQUVDLEVBQUEsRUFBRTtVQUFDTyxDQUFBLENBQUUsTUFBS1IsRUFBQyxHQUFFLEtBQUs4SSxHQUFBLEdBQUk3SSxFQUFBLEVBQUUsS0FBSzhJLENBQUEsR0FBRTlJLEVBQUEsQ0FBRThJLENBQUE7UUFBQztRQUFDLE9BQU83SCxDQUFBLENBQUVsQixFQUFBLEVBQUUsQ0FBQztVQUFDaUIsR0FBQSxFQUFJO1VBQWNXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7WUFBQyxLQUFLa0gsR0FBQSxDQUFJMmxFLGFBQUEsR0FBYyxDQUFDLGlCQUFnQixnQkFBZSxjQUFhLGdCQUFlLGtCQUFpQixtQkFBa0IsZ0JBQWUsY0FBYSxjQUFhLGFBQVksZUFBYyxTQUFRLDRCQUEyQixXQUFVLGVBQWMsc0JBQXFCLHNCQUFxQixzQkFBcUIsb0JBQW1CLG9CQUFtQixTQUFRLFNBQVMsR0FBRSxLQUFLM2xFLEdBQUEsQ0FBSStrQyxTQUFBLEdBQVUsQ0FBQyxTQUFRLGFBQVksYUFBWSxjQUFhLGNBQWEsYUFBWSxjQUFhLFdBQVUsVUFBVSxHQUFFLEtBQUsva0MsR0FBQSxDQUFJTyxVQUFBLEdBQVcsSUFBSTdCLENBQUEsQ0FBRSxLQUFLc0IsR0FBRyxHQUFFLEtBQUtBLEdBQUEsQ0FBSTRsRSxJQUFBLEdBQUssSUFBSXZnQyxFQUFBLENBQUcsS0FBS3JsQyxHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJNDVCLElBQUEsR0FBSyxJQUFJczFCLEVBQUEsQ0FBRyxLQUFLbHZELEdBQUEsQ0FBSVksRUFBQSxFQUFHLEtBQUtaLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUlLLE1BQUEsR0FBTyxJQUFJa3NCLENBQUEsQ0FBRSxDQUFDLENBQUMsR0FBRSxLQUFLdnNCLEdBQUEsQ0FBSTZOLElBQUEsR0FBSyxJQUFJNnBCLENBQUEsQ0FBRSxLQUFLMTNCLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUk0bEIsSUFBQSxHQUFLLElBQUk4WixDQUFBLENBQUUsS0FBSzEvQixHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJMFIsUUFBQSxHQUFTLElBQUl4TSxDQUFBLENBQUUsS0FBS2xGLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUk4M0IsU0FBQSxHQUFVLElBQUlockIsQ0FBQSxDQUFFLEtBQUs5TSxHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJcWQsVUFBQSxHQUFXLElBQUlzb0IsRUFBQSxDQUFHLEtBQUszbEMsR0FBRyxHQUFFLEtBQUtBLEdBQUEsQ0FBSWlDLE1BQUEsR0FBTyxJQUFJMmlDLENBQUEsQ0FBRSxLQUFLNWtDLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUlqSixPQUFBLEdBQVEsSUFBSTBqQyxDQUFBLENBQUUsS0FBS3o2QixHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJZSxJQUFBLEdBQUssSUFBSTR4QixDQUFBLENBQUUsS0FBSzN5QixHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJNmxFLFlBQUEsR0FBYSxJQUFJemdDLEVBQUEsQ0FBRyxLQUFLcGxDLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUk2YixPQUFBLEdBQVEsSUFBSVksQ0FBQSxJQUFFLEtBQUt6YyxHQUFBLENBQUlpbkIsVUFBQSxHQUFXLElBQUl0ZCxFQUFBLENBQUcsS0FBSzNKLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUl3QyxNQUFBLEdBQU8sSUFBSTh6QixDQUFBLENBQUUsS0FBS3QyQixHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJc2EsS0FBQSxHQUFNLElBQUkyckIsRUFBQSxDQUFHLEtBQUtqbUMsR0FBRyxHQUFFLEtBQUtBLEdBQUEsQ0FBSThsRSxVQUFBLEdBQVcsSUFBSXB1RCxDQUFBLENBQUUsS0FBSzFYLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUkrbEUsYUFBQSxHQUFjLElBQUlwK0IsRUFBQSxDQUFHLEtBQUszbkMsR0FBRyxHQUFFLEtBQUtBLEdBQUEsQ0FBSTBZLE1BQUEsR0FBTyxJQUFJZ3pCLEVBQUEsQ0FBRyxLQUFLMXJDLEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUk4YixPQUFBLEdBQVEsSUFBSTR3QixFQUFBLENBQUcsS0FBSzFzQyxHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJNFgsT0FBQSxHQUFRLElBQUl1L0IsRUFBQSxDQUFHLEtBQUtuM0MsR0FBRyxHQUFFLEtBQUtBLEdBQUEsQ0FBSWdtRSxVQUFBLEdBQVcsSUFBSTc4QixFQUFBLENBQUcsS0FBS25wQyxHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJKzJCLGFBQUEsR0FBYyxJQUFJazVCLEVBQUEsQ0FBRyxLQUFLandELEdBQUcsR0FBRSxLQUFLQSxHQUFBLENBQUlpbUUsZ0JBQUEsR0FBaUIsSUFBSW4zQixFQUFBLENBQUcsS0FBSzl1QyxHQUFHLEdBQUUsS0FBS0EsR0FBQSxDQUFJQyxDQUFBLENBQUVFLE9BQUEsQ0FBUXlYLE9BQUEsR0FBUSxJQUFJdS9CLEVBQUEsQ0FBRyxLQUFLbjNDLEdBQUc7VUFBQztRQUFDLENBQUMsQ0FBQyxHQUFFOUksRUFBQTtNQUFDLEVBQUU7TUFBRWd2RSxFQUFBLEdBQUcsWUFBVTtRQUFDLFNBQVNodkUsR0FBRUMsRUFBQSxFQUFFO1VBQUNPLENBQUEsQ0FBRSxNQUFLUixFQUFDLEdBQUUsS0FBSzhJLEdBQUEsR0FBSTdJLEVBQUEsRUFBRSxLQUFLOEksQ0FBQSxHQUFFOUksRUFBQSxDQUFFOEksQ0FBQTtRQUFDO1FBQUMsT0FBTzdILENBQUEsQ0FBRWxCLEVBQUEsRUFBRSxDQUFDO1VBQUNpQixHQUFBLEVBQUk7VUFBUVcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtZQUFDLElBQUk1QixFQUFBLEdBQUU0QixFQUFBLENBQUVvdEUsVUFBQTtZQUFXLEtBQUtubUUsR0FBQSxDQUFJaW1FLGdCQUFBLElBQWtCLEtBQUtqbUUsR0FBQSxDQUFJaW1FLGdCQUFBLENBQWlCRyxPQUFBLENBQVEsR0FBRSxLQUFLcG1FLEdBQUEsQ0FBSThiLE9BQUEsSUFBUyxLQUFLOWIsR0FBQSxDQUFJOGIsT0FBQSxDQUFRc3FELE9BQUEsQ0FBUSxHQUFFLEtBQUtwbUUsR0FBQSxDQUFJTyxVQUFBLEdBQVcsTUFBSyxLQUFLUCxHQUFBLENBQUk0bEUsSUFBQSxHQUFLLE1BQUssS0FBSzVsRSxHQUFBLENBQUk4USxXQUFBLEdBQVksTUFBSyxLQUFLOVEsR0FBQSxDQUFJNDVCLElBQUEsR0FBSyxNQUFLLEtBQUs1NUIsR0FBQSxDQUFJNk4sSUFBQSxHQUFLLE1BQUssS0FBSzdOLEdBQUEsQ0FBSTRsQixJQUFBLEdBQUssTUFBSyxLQUFLNWxCLEdBQUEsQ0FBSXdDLE1BQUEsR0FBTyxNQUFLLEtBQUt4QyxHQUFBLENBQUlpbkIsVUFBQSxHQUFXLE1BQUssS0FBS2puQixHQUFBLENBQUlzYSxLQUFBLEdBQU0sTUFBSyxLQUFLdGEsR0FBQSxDQUFJOGxFLFVBQUEsR0FBVyxNQUFLLEtBQUs5bEUsR0FBQSxDQUFJK2xFLGFBQUEsR0FBYyxNQUFLLEtBQUsvbEUsR0FBQSxDQUFJMFksTUFBQSxHQUFPLE1BQUssS0FBSzFZLEdBQUEsQ0FBSWdtRSxVQUFBLEdBQVcsTUFBSyxLQUFLaG1FLEdBQUEsQ0FBSTZiLE9BQUEsR0FBUSxNQUFLLEtBQUs3YixHQUFBLENBQUlxZCxVQUFBLEdBQVcsTUFBSyxLQUFLcmQsR0FBQSxDQUFJaW1FLGdCQUFBLEdBQWlCLE1BQUssS0FBS2ptRSxHQUFBLENBQUkrMkIsYUFBQSxHQUFjLE1BQUssS0FBSy8yQixHQUFBLENBQUk4YixPQUFBLEdBQVEsTUFBSyxLQUFLOWIsR0FBQSxDQUFJNmxFLFlBQUEsR0FBYSxNQUFLLEtBQUs3bEUsR0FBQSxDQUFJQyxDQUFBLENBQUVFLE9BQUEsQ0FBUXlYLE9BQUEsR0FBUSxNQUFLLEtBQUt5dUQsZ0JBQUEsQ0FBaUI7Y0FBQ0YsVUFBQSxFQUFXaHZFO1lBQUMsQ0FBQztVQUFDO1FBQUMsR0FBRTtVQUFDZ0IsR0FBQSxFQUFJO1VBQVVXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7WUFBQ0EsRUFBQSxDQUFFODhELElBQUEsQ0FBTSxZQUFVO2NBQUMsS0FBS1osV0FBQSxDQUFZLEdBQUcsR0FBRSxLQUFLNWtCLEdBQUEsQ0FBSSxHQUFFLEtBQUs0bkIsSUFBQSxDQUFLO1lBQUMsR0FBRyxJQUFFLEdBQUVsL0QsRUFBQSxDQUFFbWlFLE9BQUEsQ0FBUSxHQUFFbmlFLEVBQUEsQ0FBRWdpRSxLQUFBLENBQU07VUFBQztRQUFDLEdBQUU7VUFBQzVpRSxHQUFBLEVBQUk7VUFBbUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7WUFBQyxJQUFJNUIsRUFBQSxHQUFFO2NBQUtFLEVBQUEsR0FBRTBCLEVBQUEsQ0FBRW90RSxVQUFBO2NBQVc3dUUsRUFBQSxHQUFFLEtBQUsySSxDQUFBLENBQUVFLE9BQUEsQ0FBUWlHLEdBQUEsQ0FBSUMsS0FBQSxDQUFNbEQsSUFBQTtZQUFLN0wsRUFBQSxDQUFFK2EsVUFBQSxJQUFZL2EsRUFBQSxDQUFFK2EsVUFBQSxDQUFXQSxVQUFBLElBQVksQ0FBQ2hiLEVBQUEsS0FBSUMsRUFBQSxDQUFFK2EsVUFBQSxDQUFXQSxVQUFBLENBQVc5UyxLQUFBLENBQU0wb0IsU0FBQSxHQUFVO1lBQVMsSUFBSXR2QixFQUFBLEdBQUUsS0FBS3NILENBQUEsQ0FBRUUsT0FBQSxDQUFRaUcsR0FBQSxDQUFJbUwsTUFBQTtZQUFPNVksRUFBQSxJQUFHLEtBQUtxSCxHQUFBLENBQUkra0MsU0FBQSxDQUFVOXBDLE9BQUEsQ0FBUyxVQUFTSyxFQUFBLEVBQUU7Y0FBQzNDLEVBQUEsQ0FBRStpRSxtQkFBQSxDQUFvQnBnRSxFQUFBLEVBQUVuRSxFQUFBLENBQUU2SSxHQUFBLENBQUlpQyxNQUFBLENBQU80aUMsYUFBYTtZQUFDLENBQUU7WUFBRSxJQUFJNXJDLEVBQUEsR0FBRSxLQUFLZ0gsQ0FBQSxDQUFFRSxPQUFBLENBQVFpRyxHQUFBO1lBQUksSUFBRyxTQUFPLEtBQUtwRyxHQUFBLENBQUlZLEVBQUEsRUFBRyxPQUFLLEtBQUtaLEdBQUEsQ0FBSVksRUFBQSxDQUFHa3FCLFVBQUEsR0FBWSxLQUFLOXFCLEdBQUEsQ0FBSVksRUFBQSxDQUFHbXFCLFdBQUEsQ0FBWSxLQUFLL3FCLEdBQUEsQ0FBSVksRUFBQSxDQUFHa3FCLFVBQVU7WUFBRSxLQUFLdzdDLE9BQUEsQ0FBUXJ0RSxFQUFBLENBQUVvTixLQUFLLEdBQUVwTixFQUFBLENBQUVvTixLQUFBLENBQU14RSxNQUFBLENBQU8sR0FBRTVJLEVBQUEsQ0FBRW9qQyxNQUFBLEdBQU8sTUFBS3BqQyxFQUFBLENBQUU0d0IsV0FBQSxHQUFZLE1BQUs1d0IsRUFBQSxDQUFFOHVDLFlBQUEsR0FBYSxNQUFLOXVDLEVBQUEsQ0FBRTZ4QyxlQUFBLEdBQWdCLE1BQUs3eEMsRUFBQSxDQUFFc1ksTUFBQSxHQUFPLE1BQUt0WSxFQUFBLENBQUVpbkMsVUFBQSxHQUFXLE1BQUtqbkMsRUFBQSxDQUFFNG1DLGNBQUEsR0FBZSxNQUFLNW1DLEVBQUEsQ0FBRTZtQyxpQkFBQSxHQUFrQixNQUFLN21DLEVBQUEsQ0FBRThtQyxvQkFBQSxHQUFxQixNQUFLOW1DLEVBQUEsQ0FBRSttQyxjQUFBLEdBQWUsTUFBSy9tQyxFQUFBLENBQUVnbkMsaUJBQUEsR0FBa0IsTUFBS2huQyxFQUFBLENBQUVvNkIsTUFBQSxHQUFPO1VBQUk7UUFBQyxDQUFDLENBQUMsR0FBRW44QixFQUFBO01BQUMsRUFBRTtNQUFFcXZFLEVBQUEsR0FBRyxtQkFBSUMsT0FBQTtJQUFRLElBQUlDLEVBQUEsR0FBRyxZQUFVO01BQUMsU0FBU3Z2RSxHQUFFQyxFQUFBLEVBQUVHLEVBQUEsRUFBRTtRQUFDSSxDQUFBLENBQUUsTUFBS1IsRUFBQyxHQUFFLEtBQUs2MEIsSUFBQSxHQUFLejBCLEVBQUEsRUFBRSxLQUFLMEksR0FBQSxHQUFJLE1BQUssS0FBS0MsQ0FBQSxHQUFFLElBQUl5eUIsQ0FBQSxDQUFFcDdCLEVBQUMsRUFBRW8xQixJQUFBLENBQUssR0FBRSxLQUFLOXJCLEVBQUEsR0FBR3pKLEVBQUEsRUFBRSxLQUFLOEksQ0FBQSxDQUFFRSxPQUFBLENBQVE0SSxJQUFBLEdBQUs5TSxDQUFBLENBQUV5dUIsUUFBQSxDQUFTLEdBQUUsS0FBS3pxQixDQUFBLENBQUVFLE9BQUEsQ0FBUW12QixPQUFBLEdBQVEsS0FBS3J2QixDQUFBLENBQUVJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNOFIsRUFBQSxHQUFHblcsQ0FBQSxDQUFFdzZCLFlBQUEsQ0FBYSxLQUFLeDJCLENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU04UixFQUFFLElBQUUsS0FBS25TLENBQUEsQ0FBRUUsT0FBQSxDQUFRNEksSUFBQSxFQUFLLElBQUkyOEQsRUFBQSxDQUFHLElBQUksRUFBRWdCLFdBQUEsQ0FBWSxHQUFFLEtBQUtyc0UsTUFBQSxHQUFPNEIsQ0FBQSxDQUFFL0IsSUFBQSxDQUFLLEtBQUtHLE1BQUEsRUFBTyxJQUFJLEdBQUUsS0FBS3NzRSxtQkFBQSxHQUFvQixLQUFLQyxvQkFBQSxDQUFxQjFzRSxJQUFBLENBQUssSUFBSSxHQUFFLEtBQUsyc0UsbUJBQUEsR0FBb0IsS0FBS0MscUJBQUEsQ0FBc0I1c0UsSUFBQSxDQUFLLElBQUk7TUFBQztNQUFDLE9BQU85QixDQUFBLENBQUVsQixFQUFBLEVBQUUsQ0FBQztRQUFDaUIsR0FBQSxFQUFJO1FBQVNXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7VUFBQyxJQUFJQyxFQUFBLEdBQUU7VUFBSyxPQUFPLElBQUk0aEMsT0FBQSxDQUFTLFVBQVN4akMsRUFBQSxFQUFFRSxFQUFBLEVBQUU7WUFBQyxJQUFHLFNBQU8wQixFQUFBLENBQUU2SCxFQUFBLEVBQUc7Y0FBQyxXQUFTb3NCLElBQUEsQ0FBSys1QyxlQUFBLEtBQWtCLzVDLElBQUEsQ0FBSys1QyxlQUFBLEdBQWdCLEVBQUMsR0FBR2h1RSxFQUFBLENBQUVrSCxDQUFBLENBQUVJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNOFIsRUFBQSxJQUFJNGEsSUFBQSxDQUFLKzVDLGVBQUEsQ0FBZ0Joc0UsSUFBQSxDQUFLO2dCQUFDcVgsRUFBQSxFQUFHclosRUFBQSxDQUFFa0gsQ0FBQSxDQUFFRSxPQUFBLENBQVFtdkIsT0FBQTtnQkFBUTluQixLQUFBLEVBQU16TyxFQUFBLENBQUVrSCxDQUFBLENBQUVJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNa0gsS0FBQTtnQkFBTWxILEtBQUEsRUFBTXZIO2NBQUMsQ0FBQyxHQUFFQSxFQUFBLENBQUVpdUUsU0FBQSxDQUFVanVFLEVBQUEsQ0FBRWtILENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU13ZCxhQUFhO2NBQUUsSUFBSXhtQixFQUFBLEdBQUV5QixFQUFBLENBQUVrSCxDQUFBLENBQUVJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNMkIsTUFBQSxDQUFPOGIsV0FBQTtjQUFZLGNBQVksT0FBT3ptQixFQUFBLElBQUdBLEVBQUEsQ0FBRXlCLEVBQUEsRUFBRUEsRUFBQSxDQUFFa0gsQ0FBQyxHQUFFbEgsRUFBQSxDQUFFa0osTUFBQSxDQUFPK0osU0FBQSxDQUFVLGVBQWMsQ0FBQ2pULEVBQUEsRUFBRUEsRUFBQSxDQUFFa0gsQ0FBQyxDQUFDLEdBQUVILE1BQUEsQ0FBT29KLGdCQUFBLENBQWlCLFVBQVNuUSxFQUFBLENBQUU0dEUsbUJBQW1CLEdBQUUsVUFBU3JyRSxFQUFBLEVBQUVULEVBQUEsRUFBRTtnQkFBQyxJQUFJZCxFQUFBLEdBQUU7Z0JBQUcsSUFBR3VCLEVBQUEsQ0FBRXFpRSxRQUFBLEtBQVdzSixJQUFBLENBQUtDLHNCQUFBLEVBQXVCO2tCQUFDLElBQUl4cUUsRUFBQSxHQUFFcEIsRUFBQSxDQUFFNkMscUJBQUEsQ0FBc0I7a0JBQUUsV0FBUzdDLEVBQUEsQ0FBRWlFLEtBQUEsQ0FBTXFvQixPQUFBLElBQVMsTUFBSWxyQixFQUFBLENBQUU4QixLQUFBLEtBQVF6RSxFQUFBLEdBQUU7Z0JBQUc7Z0JBQUMsSUFBSW9MLEVBQUEsR0FBRSxJQUFJZ2lFLGNBQUEsQ0FBZ0IsVUFBUzVrQyxFQUFBLEVBQUU7a0JBQUN4b0MsRUFBQSxJQUFHYyxFQUFBLENBQUV6QixJQUFBLENBQUtrQyxFQUFBLEVBQUVpbkMsRUFBQyxHQUFFeG9DLEVBQUEsR0FBRTtnQkFBRSxDQUFFO2dCQUFFdUIsRUFBQSxDQUFFcWlFLFFBQUEsS0FBV3NKLElBQUEsQ0FBS0Msc0JBQUEsR0FBdUIzdkUsS0FBQSxDQUFNaUUsSUFBQSxDQUFLRixFQUFBLENBQUVvcUMsUUFBUSxFQUFFenFDLE9BQUEsQ0FBUyxVQUFTMkQsRUFBQSxFQUFFO2tCQUFDLE9BQU91RyxFQUFBLENBQUUrK0QsT0FBQSxDQUFRdGxFLEVBQUM7Z0JBQUMsQ0FBRSxJQUFFdUcsRUFBQSxDQUFFKytELE9BQUEsQ0FBUTVvRSxFQUFDLEdBQUVpckUsRUFBQSxDQUFHaEksR0FBQSxDQUFJMWpFLEVBQUEsRUFBRXNLLEVBQUM7Y0FBQyxFQUFFcE0sRUFBQSxDQUFFNkgsRUFBQSxDQUFHeVIsVUFBQSxFQUFXdFosRUFBQSxDQUFFOHRFLG1CQUFtQjtjQUFFLElBQUlsdUUsRUFBQSxHQUFFSSxFQUFBLENBQUU2SCxFQUFBLENBQUd3bUUsV0FBQSxJQUFhcnVFLEVBQUEsQ0FBRTZILEVBQUEsQ0FBR3dtRSxXQUFBLENBQVk7Z0JBQUVudUUsRUFBQSxHQUFFZ0QsQ0FBQSxDQUFFYyxFQUFBLENBQUcsY0FBYXBFLEVBQUM7Z0JBQUVPLEVBQUEsR0FBRUgsRUFBQSxDQUFFNkgsRUFBQSxDQUFHeW1FLGFBQUE7Z0JBQWNsdUUsRUFBQSxHQUFFRixFQUFBLEdBQUVOLEVBQUEsQ0FBRXFqRSxjQUFBLENBQWUsZ0JBQWdCLElBQUU5aUUsRUFBQSxDQUFFOGlFLGNBQUEsQ0FBZSxnQkFBZ0I7Y0FBRSxJQUFHLENBQUM3aUUsRUFBQSxFQUFFO2dCQUFDLElBQUlpQyxFQUFBO2dCQUFFLENBQUNqQyxFQUFBLEdBQUUwNUIsUUFBQSxDQUFTOEksYUFBQSxDQUFjLE9BQU8sR0FBR3ZwQixFQUFBLEdBQUcsa0JBQWlCalosRUFBQSxDQUFFeVQsV0FBQSxHQUFZO2dCQUFteGIsSUFBSXZSLEVBQUEsSUFBRyxVQUFRRCxFQUFBLEdBQUVyQyxFQUFBLENBQUVnekIsSUFBQSxDQUFLenJCLEtBQUEsS0FBUSxXQUFTbEYsRUFBQSxHQUFFLFNBQU9BLEVBQUEsQ0FBRTBqQixLQUFBLEtBQVEvbEIsRUFBQSxDQUFFa0gsQ0FBQSxDQUFFSSxNQUFBLENBQU9DLEtBQUEsQ0FBTXdlLEtBQUE7Z0JBQU16akIsRUFBQSxJQUFHbEMsRUFBQSxDQUFFd0ssWUFBQSxDQUFhLFNBQVF0SSxFQUFDLEdBQUVwQyxFQUFBLEdBQUVOLEVBQUEsQ0FBRTJ1RSxPQUFBLENBQVFudUUsRUFBQyxJQUFFRCxFQUFBLENBQUVxdUUsSUFBQSxDQUFLeHpELFdBQUEsQ0FBWTVhLEVBQUM7Y0FBQztjQUFDLElBQUlpSSxFQUFBLEdBQUVySSxFQUFBLENBQUVzQixNQUFBLENBQU90QixFQUFBLENBQUVrSCxDQUFBLENBQUVJLE1BQUEsQ0FBT21DLE1BQUEsRUFBTyxDQUFDLENBQUM7Y0FBRSxJQUFHLENBQUNwQixFQUFBLEVBQUUsT0FBT2pLLEVBQUEsQ0FBRTRCLEVBQUM7Y0FBRUEsRUFBQSxDQUFFeXVFLEtBQUEsQ0FBTXBtRSxFQUFDLEVBQUUyNUIsSUFBQSxDQUFNLFlBQVU7Z0JBQUMsY0FBWSxPQUFPaGlDLEVBQUEsQ0FBRWtILENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU0yQixNQUFBLENBQU8rYixPQUFBLElBQVNqbEIsRUFBQSxDQUFFa0gsQ0FBQSxDQUFFSSxNQUFBLENBQU9DLEtBQUEsQ0FBTTJCLE1BQUEsQ0FBTytiLE9BQUEsQ0FBUWpsQixFQUFBLEVBQUVBLEVBQUEsQ0FBRWtILENBQUMsR0FBRWxILEVBQUEsQ0FBRWtKLE1BQUEsQ0FBTytKLFNBQUEsQ0FBVSxXQUFVLENBQUNqVCxFQUFBLEVBQUVBLEVBQUEsQ0FBRWtILENBQUMsQ0FBQyxHQUFFOUksRUFBQSxDQUFFaUssRUFBQztjQUFDLENBQUUsRUFBRWk2QixLQUFBLENBQU8sVUFBUy8vQixFQUFBLEVBQUU7Z0JBQUNqRSxFQUFBLENBQUVpRSxFQUFDO2NBQUMsQ0FBRTtZQUFDLE9BQU1qRSxFQUFBLENBQUUsSUFBSWcyQixLQUFBLENBQU0sbUJBQW1CLENBQUM7VUFBQyxDQUFFO1FBQUM7TUFBQyxHQUFFO1FBQUNsMUIsR0FBQSxFQUFJO1FBQVNXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxJQUFJRSxFQUFBLEdBQUU7WUFBS0MsRUFBQSxHQUFFLEtBQUsySSxDQUFBO1VBQUUsSUFBSXlsRSxFQUFBLENBQUcsSUFBSSxFQUFFZ0IsV0FBQSxDQUFZO1VBQUUsSUFBSS90RSxFQUFBLEdBQUUsS0FBS3NILENBQUEsQ0FBRUUsT0FBQTtVQUFRLENBQUN4SCxFQUFBLENBQUVvdUIsTUFBQSxHQUFPLE9BQUdwdUIsRUFBQSxDQUFFb0osY0FBQSxHQUFlLE9BQUcsS0FBS2tsQixVQUFBLENBQVd3Z0QscUJBQUEsQ0FBc0J0d0UsRUFBQyxHQUFFRyxFQUFBLENBQUUrSSxNQUFBLENBQU8wTixLQUFBLENBQU1DLHFCQUFBLEtBQXdCLElBQUk4ZCxDQUFBLENBQUV4MEIsRUFBQSxDQUFFK0ksTUFBTSxFQUFFbzVCLHdCQUFBLENBQXlCbmlDLEVBQUEsQ0FBRStJLE1BQUEsRUFBTyxLQUFLTCxHQUFHO1VBQUUsSUFBRyxTQUFPLEtBQUtZLEVBQUEsRUFBRyxPQUFPakksRUFBQSxDQUFFb0osY0FBQSxHQUFlLE1BQUc7VUFBSyxJQUFHLEtBQUs2M0IsSUFBQSxDQUFLOHRDLGFBQUEsQ0FBYyxHQUFFLGNBQVlwd0UsRUFBQSxDQUFFK0ksTUFBQSxDQUFPQyxLQUFBLENBQU1tQixJQUFBLEtBQU9uSyxFQUFBLENBQUUrSSxNQUFBLENBQU91bEIsSUFBQSxDQUFLMUwsSUFBQSxHQUFLLE9BQUc1aUIsRUFBQSxDQUFFK0ksTUFBQSxDQUFPNk0sS0FBQSxDQUFNLEdBQUdnTixJQUFBLEdBQUssUUFBSSxNQUFJdmhCLEVBQUEsQ0FBRXc0QixRQUFBLEVBQVMsT0FBT3g0QixFQUFBLENBQUVvSixjQUFBLEdBQWUsTUFBRztVQUFLLElBQUk5SSxFQUFBLEdBQUVGLEVBQUE7VUFBRUEsRUFBQSxDQUFFa0MsT0FBQSxDQUFTLFVBQVNLLEVBQUEsRUFBRVQsRUFBQSxFQUFFO1lBQUNTLEVBQUEsQ0FBRW13QyxNQUFBLEtBQVN4eUMsRUFBQSxHQUFFNUIsRUFBQSxDQUFFcWhCLE1BQUEsQ0FBT21lLGFBQUEsQ0FBYzJVLHdCQUFBLENBQXlCO2NBQUMzcUMsU0FBQSxFQUFVaEc7WUFBQyxDQUFDO1VBQUUsQ0FBRTtVQUFFLElBQUkzQixFQUFBLEdBQUU0VCxDQUFBLENBQUU2NkQsZ0JBQUEsQ0FBaUIxdUUsRUFBQSxFQUFFM0IsRUFBQSxDQUFFK0ksTUFBQSxDQUFPQyxLQUFBLENBQU1tQixJQUFJO1VBQUU5SSxFQUFBLENBQUVnSixXQUFBLEdBQVl6SSxFQUFBLENBQUV5SSxXQUFBLEVBQVloSixFQUFBLENBQUVpWSxhQUFBLEdBQWMxWCxFQUFBLENBQUUwWCxhQUFBO1VBQWMsSUFBSXpYLEVBQUEsR0FBRUYsRUFBQSxDQUFFNlUsS0FBQSxDQUFPLFVBQVN4UyxFQUFBLEVBQUU7WUFBQyxPQUFPQSxFQUFBLENBQUV1UyxJQUFBLElBQU0sTUFBSXZTLEVBQUEsQ0FBRXVTLElBQUEsQ0FBS3pXLE1BQUE7VUFBTSxDQUFFO1VBQUUsQ0FBQyxNQUFJNkIsRUFBQSxDQUFFN0IsTUFBQSxJQUFRK0IsRUFBQSxJQUFHUixFQUFBLENBQUV5M0IsZUFBQSxDQUFnQmg1QixNQUFBLEdBQU8sTUFBSSxLQUFLb0wsTUFBQSxDQUFPb2xFLFlBQUEsQ0FBYSxHQUFFLEtBQUszbEUsTUFBQSxDQUFPNGxFLGtCQUFBLENBQW1CLEdBQUUsS0FBS2g2RCxJQUFBLENBQUtpNkQsU0FBQSxDQUFVN3VFLEVBQUMsR0FBRSxLQUFLcWhCLEtBQUEsQ0FBTW9TLElBQUEsQ0FBSyxHQUFFLElBQUkrSCxDQUFBLENBQUUsSUFBSSxFQUFFc3pDLG1CQUFBLENBQW9CLEdBQUUsS0FBS2pDLFVBQUEsQ0FBV2tDLGtCQUFBLENBQW1CLEdBQUUsS0FBS2pDLGFBQUEsQ0FBY3AxRCxJQUFBLENBQUssR0FBRWhZLEVBQUEsQ0FBRW91QixNQUFBLElBQVFwdUIsRUFBQSxDQUFFeTNCLGVBQUEsQ0FBZ0JoNUIsTUFBQSxLQUFTdUIsRUFBQSxDQUFFNkosTUFBQSxDQUFPcEwsTUFBQSxJQUFRLENBQUNFLEVBQUEsQ0FBRStJLE1BQUEsQ0FBT3FZLE1BQUEsQ0FBT3NOLG1CQUFBLElBQXFCLEtBQUt0TixNQUFBLENBQU9nVSxJQUFBLENBQUssR0FBRSxLQUFLbHFCLE1BQUEsQ0FBT3lsRSxrQkFBQSxDQUFtQixHQUFFdHZFLEVBQUEsQ0FBRTh3QixVQUFBLEtBQWEsS0FBS21RLElBQUEsQ0FBS3N1QyxnQkFBQSxDQUFpQixHQUFFLGVBQWE1d0UsRUFBQSxDQUFFK0ksTUFBQSxDQUFPME4sS0FBQSxDQUFNdE0sSUFBQSxJQUFNLEtBQUtxa0UsVUFBQSxDQUFXa0Msa0JBQUEsQ0FBbUIsR0FBRSxLQUFLaG9FLEdBQUEsQ0FBSThiLE9BQUEsQ0FBUTNOLElBQUEsR0FBSzdXLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUWdPLElBQUEsRUFBSyxLQUFLbk8sR0FBQSxDQUFJOGIsT0FBQSxDQUFRM00sSUFBQSxHQUFLN1gsRUFBQSxDQUFFNkksT0FBQSxDQUFRZ1AsSUFBQSxHQUFNLEtBQUsyMkQsVUFBQSxDQUFXcUMsc0JBQUEsQ0FBdUIsR0FBRSxJQUFJcjdELENBQUEsQ0FBRSxJQUFJLEVBQUVzN0Qsb0JBQUEsQ0FBcUIsR0FBRSxLQUFLcEMsVUFBQSxDQUFXdFgsVUFBQSxDQUFXO1VBQUUsSUFBSXR6RCxFQUFBLEdBQUUsS0FBS3crQixJQUFBLENBQUt5dUMsVUFBQSxDQUFXO1VBQUUsS0FBS3ppRCxJQUFBLENBQUswaUQsY0FBQSxDQUFlO1VBQUUsSUFBSWp0RSxFQUFBLEdBQUUsS0FBS3UrQixJQUFBLENBQUsydUMsYUFBQSxDQUFjdHZFLEVBQUEsRUFBRW1DLEVBQUM7WUFBRWdHLEVBQUEsR0FBRSxJQUFJbzBCLENBQUEsQ0FBRSxJQUFJO1VBQUUsT0FBT3AwQixFQUFBLENBQUVvbkUsWUFBQSxDQUFhLEdBQUVseEUsRUFBQSxDQUFFK0ksTUFBQSxDQUFPMGhCLFVBQUEsQ0FBVzlQLFVBQUEsQ0FBVzNRLE9BQUEsSUFBU0YsRUFBQSxDQUFFcW5FLG9CQUFBLENBQXFCLEdBQUUsS0FBSzd1QyxJQUFBLENBQUs4dUMsa0JBQUEsQ0FBbUIsR0FBRTtZQUFDQyxPQUFBLEVBQVF0dEUsRUFBQTtZQUFFcTBDLFFBQUEsRUFBU3QwQyxFQUFBO1lBQUU0cUUsVUFBQSxFQUFXO2NBQUMxakUsSUFBQSxFQUFLO2dCQUFDL0QsSUFBQSxFQUFLakgsRUFBQSxDQUFFNkksT0FBQSxDQUFROHhCLFVBQUE7Z0JBQVc3ekIsR0FBQSxFQUFJOUcsRUFBQSxDQUFFNkksT0FBQSxDQUFRcWEsVUFBQTtnQkFBV2hjLEtBQUEsRUFBTWxILEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUXlKLFNBQUE7Z0JBQVVuTCxNQUFBLEVBQU9uSCxFQUFBLENBQUU2SSxPQUFBLENBQVFpQztjQUFVO1lBQUM7VUFBQztRQUFDO01BQUMsR0FBRTtRQUFDakssR0FBQSxFQUFJO1FBQVFXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7VUFBQyxJQUFJQyxFQUFBLEdBQUU7WUFBSzVCLEVBQUEsR0FBRTBDLFNBQUEsQ0FBVXpDLE1BQUEsR0FBTyxLQUFHLFdBQVN5QyxTQUFBLENBQVUsS0FBR0EsU0FBQSxDQUFVLEtBQUc7WUFBS3hDLEVBQUEsR0FBRTtZQUFLQyxFQUFBLEdBQUVELEVBQUEsQ0FBRTRJLENBQUE7VUFBRSxPQUFPLElBQUkwNkIsT0FBQSxDQUFTLFVBQVNoaUMsRUFBQSxFQUFFTSxFQUFBLEVBQUU7WUFBQyxJQUFHLFNBQU81QixFQUFBLENBQUV1SixFQUFBLEVBQUcsT0FBTzNILEVBQUEsQ0FBRSxJQUFJbzBCLEtBQUEsQ0FBTSx3REFBd0QsQ0FBQztZQUFFLENBQUMsU0FBT2wyQixFQUFBLElBQUdHLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUWd3QixrQkFBQSxLQUFxQjk0QixFQUFBLENBQUVtTCxNQUFBLENBQU9vbEUsWUFBQSxDQUFhLEdBQUV2d0UsRUFBQSxDQUFFdXVCLElBQUEsR0FBSyxJQUFJOFosQ0FBQSxDQUFFcm9DLEVBQUM7WUFBRSxJQUFJNkIsRUFBQTtjQUFFQyxFQUFBO2NBQUVpQyxFQUFBLEdBQUUvRCxFQUFBLENBQUV1dUIsSUFBQSxDQUFLZ2pELFFBQUEsQ0FBUztZQUFFLENBQUN2eEUsRUFBQSxDQUFFeVosV0FBQSxHQUFZLElBQUlxWSxDQUFBLENBQUU5eEIsRUFBQyxHQUFFQSxFQUFBLENBQUV5WixXQUFBLENBQVkrM0QsY0FBQSxDQUFlLEdBQUV4eEUsRUFBQSxDQUFFeVosV0FBQSxDQUFZZzRELGFBQUEsQ0FBYyxHQUFFLFdBQVN4eEUsRUFBQSxDQUFFK0ksTUFBQSxDQUFPdWxCLElBQUEsQ0FBS25VLFFBQUEsTUFBWXJXLEVBQUEsSUFBRzlELEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUWlHLEdBQUEsQ0FBSXlqQixXQUFBLENBQVkvbkIsR0FBQSxDQUFJMUcsRUFBQSxDQUFFd0YsRUFBRSxHQUFFLFFBQU14RixFQUFBLElBQUcsVUFBUWxDLEVBQUEsR0FBRWtDLEVBQUEsQ0FBRW1qQyxhQUFBLEtBQWdCLFdBQVNybEMsRUFBQSxJQUFHQSxFQUFBLENBQUVpSyxJQUFBLElBQU03TCxFQUFBLENBQUU2SSxPQUFBLENBQVFpRyxHQUFBLENBQUl5akIsV0FBQSxDQUFZL25CLEdBQUEsQ0FBSTFHLEVBQUEsQ0FBRW1qQyxhQUFhO1lBQUcsSUFBR2huQyxLQUFBLENBQU1rQixPQUFBLENBQVF0QixFQUFBLENBQUV3eEUsT0FBTyxHQUFFLFNBQVF0dEUsRUFBQSxHQUFFLEdBQUVBLEVBQUEsR0FBRWxFLEVBQUEsQ0FBRXd4RSxPQUFBLENBQVF2eEUsTUFBQSxFQUFPaUUsRUFBQSxJQUFJL0QsRUFBQSxDQUFFNkksT0FBQSxDQUFRaUcsR0FBQSxDQUFJeWpCLFdBQUEsQ0FBWS9uQixHQUFBLENBQUkzSyxFQUFBLENBQUV3eEUsT0FBQSxDQUFRdHRFLEVBQUEsQ0FBRSxPQUFPL0QsRUFBQSxDQUFFNkksT0FBQSxDQUFRaUcsR0FBQSxDQUFJeWpCLFdBQUEsQ0FBWS9uQixHQUFBLENBQUkzSyxFQUFBLENBQUV3eEUsT0FBTztZQUFFLFlBQVVyeEUsRUFBQSxDQUFFK0ksTUFBQSxDQUFPdWxCLElBQUEsQ0FBS25VLFFBQUEsS0FBV3JXLEVBQUEsSUFBRzlELEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUWlHLEdBQUEsQ0FBSXlqQixXQUFBLENBQVkvbkIsR0FBQSxDQUFJMUcsRUFBQSxDQUFFd0YsRUFBRSxHQUFFLFFBQU14RixFQUFBLElBQUcsVUFBUWpDLEVBQUEsR0FBRWlDLEVBQUEsQ0FBRW1qQyxhQUFBLEtBQWdCLFdBQVNwbEMsRUFBQSxJQUFHQSxFQUFBLENBQUVnSyxJQUFBLElBQU03TCxFQUFBLENBQUU2SSxPQUFBLENBQVFpRyxHQUFBLENBQUl5akIsV0FBQSxDQUFZL25CLEdBQUEsQ0FBSTFHLEVBQUEsQ0FBRW1qQyxhQUFhO1lBQUcsWUFBVWpuQyxFQUFBLENBQUUrSSxNQUFBLENBQU8wTixLQUFBLENBQU1zUCxVQUFBLENBQVc1TCxRQUFBLElBQVVwYSxFQUFBLENBQUVnbUIsVUFBQSxDQUFXb3lDLGVBQUEsQ0FBZ0IsR0FBRSxZQUFVbjRELEVBQUEsQ0FBRStJLE1BQUEsQ0FBTzZNLEtBQUEsQ0FBTSxHQUFHbVEsVUFBQSxDQUFXNUwsUUFBQSxJQUFVcGEsRUFBQSxDQUFFZ21CLFVBQUEsQ0FBV3F5QyxlQUFBLENBQWdCLEdBQUUsY0FBWXA0RCxFQUFBLENBQUUrSSxNQUFBLENBQU9DLEtBQUEsQ0FBTW1CLElBQUEsSUFBTXBLLEVBQUEsQ0FBRXV1RSxJQUFBLENBQUttRCxRQUFBLENBQVN6eEUsRUFBQSxDQUFFK0ksTUFBQSxDQUFPQyxLQUFBLENBQU1tQixJQUFBLEVBQUtyRyxFQUFDO1lBQUUsSUFBSWdHLEVBQUEsR0FBRSxJQUFJcThCLENBQUEsQ0FBRTFrQyxFQUFBLENBQUVpSCxHQUFBLEVBQUk1RSxFQUFDO2NBQUV3SixFQUFBLEdBQUUsSUFBSWcvQixDQUFBLENBQUU3cUMsRUFBQSxDQUFFaUgsR0FBQSxFQUFJNUUsRUFBQztZQUFFLElBQUcsU0FBT0EsRUFBQSxLQUFJZ0csRUFBQSxDQUFFNG5FLHFCQUFBLENBQXNCNXRFLEVBQUEsQ0FBRTZsQyxjQUFjLEdBQUVyOEIsRUFBQSxDQUFFcWtFLHNCQUFBLENBQXVCLEdBQUUzeEUsRUFBQSxDQUFFK0ksTUFBQSxDQUFPNk0sS0FBQSxDQUFNcFEsR0FBQSxDQUFLLFVBQVN4QixFQUFBLEVBQUVULEVBQUEsRUFBRTtjQUFDLE9BQUt2RCxFQUFBLENBQUU2SSxPQUFBLENBQVF1d0Isa0JBQUEsQ0FBbUI3d0IsT0FBQSxDQUFRaEYsRUFBQyxLQUFHK0osRUFBQSxDQUFFc2tFLGdCQUFBLENBQWlCcnVFLEVBQUEsRUFBRVMsRUFBQSxDQUFFbWYsUUFBUTtZQUFDLENBQUUsSUFBR3BqQixFQUFBLENBQUV5WixXQUFBLENBQVlxNEQsbUJBQUEsQ0FBb0IsR0FBRSxDQUFDN3hFLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUTRtQixNQUFBLEVBQU87Y0FBQyxJQUFHenZCLEVBQUEsQ0FBRStJLE1BQUEsQ0FBT3VYLE9BQUEsQ0FBUXRXLE9BQUEsSUFBUyxDQUFDaEssRUFBQSxDQUFFNkksT0FBQSxDQUFRNG1CLE1BQUEsSUFBUTF2QixFQUFBLENBQUU0SSxDQUFBLENBQUVFLE9BQUEsQ0FBUXlYLE9BQUEsQ0FBUXd4RCxXQUFBLENBQVlqeUUsRUFBQSxDQUFFdTRDLFFBQVEsR0FBRXA0QyxFQUFBLENBQUU2SSxPQUFBLENBQVFzcEIsVUFBQSxLQUFhbnlCLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUXN1QixVQUFBLElBQVluM0IsRUFBQSxDQUFFK0ksTUFBQSxDQUFPME4sS0FBQSxDQUFNQyxxQkFBQSxJQUF1QjFXLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUTI0QixVQUFBLEdBQVksQ0FBQ3hoQyxFQUFBLENBQUUrSSxNQUFBLENBQU9DLEtBQUEsQ0FBTWtmLElBQUEsQ0FBS2xlLE9BQUEsSUFBU2hLLEVBQUEsQ0FBRStJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNNmIsU0FBQSxJQUFXN2tCLEVBQUEsQ0FBRStJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNNmIsU0FBQSxDQUFVN2EsT0FBQSxJQUFTaEssRUFBQSxDQUFFK0ksTUFBQSxDQUFPQyxLQUFBLENBQU1pYyxHQUFBLElBQUtqbEIsRUFBQSxDQUFFK0ksTUFBQSxDQUFPQyxLQUFBLENBQU1pYyxHQUFBLENBQUlqYixPQUFBLEtBQVVqSyxFQUFBLENBQUU0dUUsZ0JBQUEsQ0FBaUJ2NUMsSUFBQSxDQUFLO2dCQUFDZ2pCLFFBQUEsRUFBU3Y0QyxFQUFBLENBQUV1NEM7Y0FBUSxDQUFDLE9BQU07Z0JBQUMsSUFBSWxxQyxFQUFBLEdBQUVsTyxFQUFBLENBQUUrSSxNQUFBLENBQU9DLEtBQUEsQ0FBTXdiLE9BQUEsQ0FBUXdELEtBQUE7Z0JBQU0sQ0FBQyxRQUFPLFVBQVMsV0FBVSxhQUFZLE9BQU0sT0FBTyxFQUFFcmtCLE9BQUEsQ0FBUyxVQUFTSyxFQUFBLEVBQUU7a0JBQUNrSyxFQUFBLENBQUVsSyxFQUFBLElBQUc7Z0JBQUUsQ0FBRTtjQUFDO2NBQUNoRSxFQUFBLENBQUUrSSxNQUFBLENBQU9DLEtBQUEsQ0FBTXdiLE9BQUEsQ0FBUTVCLElBQUEsSUFBTSxDQUFDNWlCLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUWd3QixrQkFBQSxJQUFvQjk0QixFQUFBLENBQUV5a0IsT0FBQSxDQUFRdXRELGFBQUEsQ0FBYztZQUFDO1lBQUMveEUsRUFBQSxDQUFFNkksT0FBQSxDQUFRcXFCLE1BQUEsQ0FBT0MsYUFBQSxDQUFjcnpCLE1BQUEsR0FBTyxLQUFHRSxFQUFBLENBQUU2SSxPQUFBLENBQVFxcUIsTUFBQSxDQUFPQyxhQUFBLENBQWN4dkIsT0FBQSxDQUFTLFVBQVNLLEVBQUEsRUFBRTtjQUFDQSxFQUFBLENBQUVxdkIsTUFBQSxDQUFPcnZCLEVBQUEsQ0FBRTZ1QixNQUFBLEVBQU8sT0FBRzd1QixFQUFBLENBQUUrdUIsT0FBTztZQUFDLENBQUUsR0FBRS95QixFQUFBLENBQUU2SSxPQUFBLENBQVFzcEIsVUFBQSxJQUFZbnlCLEVBQUEsQ0FBRTZJLE9BQUEsQ0FBUTRtQixNQUFBLElBQVExdkIsRUFBQSxDQUFFdWlDLElBQUEsQ0FBSzB2QyxtQkFBQSxDQUFvQixHQUFFM3dFLEVBQUEsQ0FBRXRCLEVBQUM7VUFBQyxDQUFFO1FBQUM7TUFBQyxHQUFFO1FBQUNjLEdBQUEsRUFBSTtRQUFVVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsSUFBSUMsRUFBQSxFQUFFNUIsRUFBQTtVQUFFMkksTUFBQSxDQUFPNDdELG1CQUFBLENBQW9CLFVBQVMsS0FBS2lMLG1CQUFtQixHQUFFLEtBQUsvbEUsRUFBQSxDQUFHeVIsVUFBQSxFQUFXdFosRUFBQSxHQUFFLEtBQUs4dEUsbUJBQUEsR0FBcUIxdkUsRUFBQSxHQUFFb3ZFLEVBQUEsQ0FBR3BSLEdBQUEsQ0FBSXA4RCxFQUFDLE9BQUs1QixFQUFBLENBQUU0dEUsVUFBQSxDQUFXLEdBQUV3QixFQUFBLENBQUdnRCxNQUFBLENBQU94d0UsRUFBQztVQUFHLElBQUkxQixFQUFBLEdBQUUsS0FBSzRJLENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU04UixFQUFBO1VBQUcvYSxFQUFBLElBQUcyMUIsSUFBQSxDQUFLKzVDLGVBQUEsQ0FBZ0I5ckUsT0FBQSxDQUFTLFVBQVNLLEVBQUEsRUFBRVQsRUFBQSxFQUFFO1lBQUNTLEVBQUEsQ0FBRThXLEVBQUEsS0FBS25XLENBQUEsQ0FBRXc2QixZQUFBLENBQWFwL0IsRUFBQyxLQUFHMjFCLElBQUEsQ0FBSys1QyxlQUFBLENBQWdCNW5FLE1BQUEsQ0FBT3RFLEVBQUEsRUFBRSxDQUFDO1VBQUMsQ0FBRSxHQUFFLElBQUlxckUsRUFBQSxDQUFHLEtBQUtsbUUsR0FBRyxFQUFFKzZELEtBQUEsQ0FBTTtZQUFDb0wsVUFBQSxFQUFXO1VBQUUsQ0FBQztRQUFDO01BQUMsR0FBRTtRQUFDaHVFLEdBQUEsRUFBSTtRQUFnQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtVQUFDLElBQUk1QixFQUFBLEdBQUU7WUFBS0UsRUFBQSxHQUFFd0MsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxNQUFJQSxTQUFBLENBQVU7WUFBR3ZDLEVBQUEsR0FBRSxFQUFFdUMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBR2xCLEVBQUEsR0FBRSxFQUFFa0IsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBR1osRUFBQSxHQUFFLEVBQUVZLFNBQUEsQ0FBVXpDLE1BQUEsR0FBTyxLQUFHLFdBQVN5QyxTQUFBLENBQVUsT0FBS0EsU0FBQSxDQUFVO1lBQUdYLEVBQUEsR0FBRSxLQUFLK0csQ0FBQTtVQUFFLE9BQU8vRyxFQUFBLENBQUVpSCxPQUFBLENBQVFnYyxTQUFBLEdBQVUsUUFBT3BqQixFQUFBLENBQUV5SixNQUFBLEtBQVMsS0FBS0EsTUFBQSxDQUFPZ25FLFdBQUEsQ0FBWSxPQUFHLE1BQUcsS0FBRSxHQUFFendFLEVBQUEsQ0FBRXlKLE1BQUEsQ0FBT3BMLE1BQUEsSUFBUTJCLEVBQUEsQ0FBRXlKLE1BQUEsQ0FBTyxHQUFHcUwsSUFBQSxLQUFPOVUsRUFBQSxDQUFFeUosTUFBQSxHQUFPekosRUFBQSxDQUFFeUosTUFBQSxDQUFPMUYsR0FBQSxDQUFLLFVBQVN4QixFQUFBLEVBQUV2QixFQUFBLEVBQUU7WUFBQyxPQUFPNUMsRUFBQSxDQUFFNC9CLGFBQUEsQ0FBY3E1QixhQUFBLENBQWM5MEQsRUFBQSxFQUFFdkIsRUFBQztVQUFDLENBQUUsSUFBRyxLQUFLZzlCLGFBQUEsQ0FBY0MsdUJBQUEsQ0FBd0IsSUFBR2orQixFQUFBLENBQUVnVixLQUFBLEtBQVFoVixFQUFBLEdBQUUsS0FBS2crQixhQUFBLENBQWMweUMsZ0JBQUEsQ0FBaUIxd0UsRUFBQyxJQUFHQSxFQUFBLENBQUVtVSxLQUFBLEtBQVFuVSxFQUFBLEdBQUUsS0FBS2crQixhQUFBLENBQWMyeUMsZ0JBQUEsQ0FBaUIzd0UsRUFBQyxJQUFHRyxFQUFBLENBQUVpSCxPQUFBLENBQVE4WixzQkFBQSxDQUF1QjdpQixNQUFBLEdBQU8sS0FBRyxLQUFLb0wsTUFBQSxDQUFPbW5FLGtCQUFBLENBQW1CLEdBQUU1d0UsRUFBQSxDQUFFdWhCLEtBQUEsS0FBUXZoQixFQUFBLEdBQUUsS0FBS3VoQixLQUFBLENBQU1zdkQsa0JBQUEsQ0FBbUI3d0UsRUFBQyxJQUFHLEtBQUtnK0IsYUFBQSxDQUFjNFgsY0FBQSxDQUFlNTFDLEVBQUEsRUFBRTFCLEVBQUEsRUFBRUMsRUFBQSxFQUFFcUIsRUFBQSxFQUFFTSxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNkLEdBQUEsRUFBSTtRQUFlVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsSUFBSUMsRUFBQSxHQUFFYyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLEtBQUdBLFNBQUEsQ0FBVSxLQUFHLEVBQUM7WUFBRTFDLEVBQUEsR0FBRSxFQUFFMEMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBR3hDLEVBQUEsR0FBRSxFQUFFd0MsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7VUFBRyxPQUFPLEtBQUsySSxNQUFBLENBQU9nbkUsV0FBQSxDQUFZLEtBQUUsR0FBRSxLQUFLenlDLGFBQUEsQ0FBY0MsdUJBQUEsQ0FBd0IsR0FBRSxLQUFLRCxhQUFBLENBQWNFLGFBQUEsQ0FBY2wrQixFQUFBLEVBQUU1QixFQUFBLEVBQUVFLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ2MsR0FBQSxFQUFJO1FBQWVXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7VUFBQyxJQUFJNUIsRUFBQSxHQUFFLEVBQUUwQyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLE9BQUtBLFNBQUEsQ0FBVTtZQUFHeEMsRUFBQSxHQUFFLEVBQUV3QyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLE9BQUtBLFNBQUEsQ0FBVTtZQUFHdkMsRUFBQSxHQUFFLEtBQUsySSxDQUFBLENBQUVJLE1BQUEsQ0FBT21DLE1BQUEsQ0FBTzFHLEtBQUEsQ0FBTTtVQUFFLE9BQU94RSxFQUFBLENBQUV5RCxJQUFBLENBQUtoQyxFQUFDLEdBQUUsS0FBS3lKLE1BQUEsQ0FBT2duRSxXQUFBLENBQVksS0FBRSxHQUFFLEtBQUt6eUMsYUFBQSxDQUFjQyx1QkFBQSxDQUF3QixHQUFFLEtBQUtELGFBQUEsQ0FBY0UsYUFBQSxDQUFjMy9CLEVBQUEsRUFBRUgsRUFBQSxFQUFFRSxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNjLEdBQUEsRUFBSTtRQUFhVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsSUFBSTVCLEVBQUEsR0FBRSxFQUFFMEMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBR3hDLEVBQUEsR0FBRTtVQUFLQSxFQUFBLENBQUU0SSxDQUFBLENBQUVFLE9BQUEsQ0FBUXFCLFdBQUEsR0FBWSxNQUFHbkssRUFBQSxDQUFFbUwsTUFBQSxDQUFPMHRELGdCQUFBLENBQWlCO1VBQUUsU0FBUTU0RCxFQUFBLEdBQUVELEVBQUEsQ0FBRTRJLENBQUEsQ0FBRUksTUFBQSxDQUFPbUMsTUFBQSxDQUFPMUcsS0FBQSxDQUFNLEdBQUVuRCxFQUFBLEdBQUUsR0FBRUEsRUFBQSxHQUFFckIsRUFBQSxDQUFFRixNQUFBLEVBQU91QixFQUFBLElBQUksSUFBRyxTQUFPSSxFQUFBLENBQUVKLEVBQUEsS0FBSSxXQUFTSSxFQUFBLENBQUVKLEVBQUEsR0FBRyxTQUFRTSxFQUFBLEdBQUUsR0FBRUEsRUFBQSxHQUFFRixFQUFBLENBQUVKLEVBQUEsRUFBR2tWLElBQUEsQ0FBS3pXLE1BQUEsRUFBTzZCLEVBQUEsSUFBSTNCLEVBQUEsQ0FBRXFCLEVBQUEsRUFBR2tWLElBQUEsQ0FBSzlTLElBQUEsQ0FBS2hDLEVBQUEsQ0FBRUosRUFBQSxFQUFHa1YsSUFBQSxDQUFLNVUsRUFBQSxDQUFFO1VBQUUsT0FBTzVCLEVBQUEsQ0FBRTRJLENBQUEsQ0FBRUksTUFBQSxDQUFPbUMsTUFBQSxHQUFPbEwsRUFBQSxFQUFFSCxFQUFBLEtBQUlFLEVBQUEsQ0FBRTRJLENBQUEsQ0FBRUUsT0FBQSxDQUFRNHZCLGFBQUEsR0FBYzl6QixDQUFBLENBQUVlLEtBQUEsQ0FBTTNGLEVBQUEsQ0FBRTRJLENBQUEsQ0FBRUksTUFBQSxDQUFPbUMsTUFBTSxJQUFHLEtBQUsydEQsTUFBQSxDQUFPO1FBQUM7TUFBQyxHQUFFO1FBQUNoNEQsR0FBQSxFQUFJO1FBQVNXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7VUFBQyxJQUFJNUIsRUFBQSxHQUFFO1VBQUssT0FBTyxJQUFJd2pDLE9BQUEsQ0FBUyxVQUFTdGpDLEVBQUEsRUFBRUMsRUFBQSxFQUFFO1lBQUMsSUFBSTR1RSxFQUFBLENBQUcvdUUsRUFBQSxDQUFFNkksR0FBRyxFQUFFKzZELEtBQUEsQ0FBTTtjQUFDb0wsVUFBQSxFQUFXO1lBQUUsQ0FBQztZQUFFLElBQUl4dEUsRUFBQSxHQUFFeEIsRUFBQSxDQUFFa0QsTUFBQSxDQUFPbEQsRUFBQSxDQUFFOEksQ0FBQSxDQUFFSSxNQUFBLENBQU9tQyxNQUFBLEVBQU96SixFQUFDO1lBQUUsSUFBRyxDQUFDSixFQUFBLEVBQUUsT0FBT3RCLEVBQUEsQ0FBRUYsRUFBQztZQUFFQSxFQUFBLENBQUVxd0UsS0FBQSxDQUFNN3VFLEVBQUMsRUFBRW9pQyxJQUFBLENBQU0sWUFBVTtjQUFDLGNBQVksT0FBTzVqQyxFQUFBLENBQUU4SSxDQUFBLENBQUVJLE1BQUEsQ0FBT0MsS0FBQSxDQUFNMkIsTUFBQSxDQUFPZ2MsT0FBQSxJQUFTOW1CLEVBQUEsQ0FBRThJLENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU0yQixNQUFBLENBQU9nYyxPQUFBLENBQVE5bUIsRUFBQSxFQUFFQSxFQUFBLENBQUU4SSxDQUFDLEdBQUU5SSxFQUFBLENBQUU4SyxNQUFBLENBQU8rSixTQUFBLENBQVUsV0FBVSxDQUFDN1UsRUFBQSxFQUFFQSxFQUFBLENBQUU4SSxDQUFDLENBQUMsR0FBRTlJLEVBQUEsQ0FBRThJLENBQUEsQ0FBRUUsT0FBQSxDQUFReXZCLE9BQUEsR0FBUSxNQUFHdjRCLEVBQUEsQ0FBRUYsRUFBQztZQUFDLENBQUUsRUFBRWtrQyxLQUFBLENBQU8sVUFBUy8vQixFQUFBLEVBQUU7Y0FBQ2hFLEVBQUEsQ0FBRWdFLEVBQUM7WUFBQyxDQUFFO1VBQUMsQ0FBRTtRQUFDO01BQUMsR0FBRTtRQUFDbkQsR0FBQSxFQUFJO1FBQWtCVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsSUFBSUMsRUFBQSxHQUFFLEtBQUsyL0MsZ0JBQUEsQ0FBaUI7WUFBRXZoRCxFQUFBLEdBQUUsQ0FBQyxJQUFJO1VBQUUsT0FBTzRCLEVBQUEsQ0FBRTNCLE1BQUEsS0FBU0QsRUFBQSxHQUFFLEVBQUMsRUFBRTRCLEVBQUEsQ0FBRWtDLE9BQUEsQ0FBUyxVQUFTSyxFQUFBLEVBQUU7WUFBQ25FLEVBQUEsQ0FBRTRELElBQUEsQ0FBS08sRUFBQztVQUFDLENBQUUsSUFBR25FLEVBQUE7UUFBQztNQUFDLEdBQUU7UUFBQ2dCLEdBQUEsRUFBSTtRQUFtQlcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLElBQUlDLEVBQUEsR0FBRTtVQUFLLE9BQU9pMEIsSUFBQSxDQUFLKzVDLGVBQUEsQ0FBZ0Juc0UsTUFBQSxDQUFRLFVBQVNVLEVBQUEsRUFBRTtZQUFDLElBQUdBLEVBQUEsQ0FBRWtNLEtBQUEsRUFBTSxPQUFNO1VBQUUsQ0FBRSxFQUFFMUssR0FBQSxDQUFLLFVBQVMzRixFQUFBLEVBQUU7WUFBQyxPQUFPNEIsRUFBQSxDQUFFa0gsQ0FBQSxDQUFFSSxNQUFBLENBQU9DLEtBQUEsQ0FBTWtILEtBQUEsS0FBUXJRLEVBQUEsQ0FBRXFRLEtBQUEsR0FBTXJRLEVBQUEsQ0FBRW1KLEtBQUEsR0FBTXZILEVBQUE7VUFBQyxDQUFFO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUFlVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsT0FBTyxLQUFLeUosTUFBQSxDQUFPcW5FLFlBQUEsQ0FBYTl3RSxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUErQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTVCLEVBQUEsRUFBRTtVQUFDLE9BQU8sS0FBS3FMLE1BQUEsQ0FBT2lxQyxtQkFBQSxDQUFvQjF6QyxFQUFBLEVBQUU1QixFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNnQixHQUFBLEVBQUk7UUFBYVcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtVQUFDLEtBQUt5SixNQUFBLENBQU9zbkUsVUFBQSxDQUFXL3dFLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ1osR0FBQSxFQUFJO1FBQWFXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7VUFBQyxLQUFLeUosTUFBQSxDQUFPMm9DLFVBQUEsQ0FBV3B5QyxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUFrQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtVQUFDLEtBQUt5SixNQUFBLENBQU8wMEIsZUFBQSxDQUFnQm4rQixFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUFpQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtVQUFDLEtBQUt5SixNQUFBLENBQU9vMEIsY0FBQSxDQUFlNzlCLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ1osR0FBQSxFQUFJO1FBQWNXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7VUFBQyxJQUFJQyxFQUFBLEdBQUUsRUFBRWMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBRzFDLEVBQUEsR0FBRSxFQUFFMEMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7VUFBRyxLQUFLMkksTUFBQSxDQUFPZ25FLFdBQUEsQ0FBWXp3RSxFQUFBLEVBQUU1QixFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNnQixHQUFBLEVBQUk7UUFBbUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxLQUFLOEssTUFBQSxDQUFPaUgsZ0JBQUEsQ0FBaUJuUSxFQUFBLEVBQUU1QixFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNnQixHQUFBLEVBQUk7UUFBc0JXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxLQUFLOEssTUFBQSxDQUFPeTVELG1CQUFBLENBQW9CM2lFLEVBQUEsRUFBRTVCLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ2dCLEdBQUEsRUFBSTtRQUFxQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTtVQUFDLElBQUk1QixFQUFBLEdBQUUsRUFBRTBDLFNBQUEsQ0FBVXpDLE1BQUEsR0FBTyxLQUFHLFdBQVN5QyxTQUFBLENBQVUsT0FBS0EsU0FBQSxDQUFVO1lBQUd4QyxFQUFBLEdBQUV3QyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLEtBQUdBLFNBQUEsQ0FBVSxLQUFHO1lBQU92QyxFQUFBLEdBQUU7VUFBS0QsRUFBQSxLQUFJQyxFQUFBLEdBQUVELEVBQUEsR0FBR0MsRUFBQSxDQUFFd1osV0FBQSxDQUFZaTVELDBCQUFBLENBQTJCaHhFLEVBQUEsRUFBRTVCLEVBQUEsRUFBRUcsRUFBQztRQUFDO01BQUMsR0FBRTtRQUFDYSxHQUFBLEVBQUk7UUFBcUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7VUFBQyxJQUFJNUIsRUFBQSxHQUFFLEVBQUUwQyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLE9BQUtBLFNBQUEsQ0FBVTtZQUFHeEMsRUFBQSxHQUFFd0MsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxLQUFHQSxTQUFBLENBQVUsS0FBRztZQUFPdkMsRUFBQSxHQUFFO1VBQUtELEVBQUEsS0FBSUMsRUFBQSxHQUFFRCxFQUFBLEdBQUdDLEVBQUEsQ0FBRXdaLFdBQUEsQ0FBWWs1RCwwQkFBQSxDQUEyQmp4RSxFQUFBLEVBQUU1QixFQUFBLEVBQUVHLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ2EsR0FBQSxFQUFJO1FBQXFCVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsSUFBSTVCLEVBQUEsR0FBRSxFQUFFMEMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxPQUFLQSxTQUFBLENBQVU7WUFBR3hDLEVBQUEsR0FBRXdDLFNBQUEsQ0FBVXpDLE1BQUEsR0FBTyxLQUFHLFdBQVN5QyxTQUFBLENBQVUsS0FBR0EsU0FBQSxDQUFVLEtBQUc7WUFBT3ZDLEVBQUEsR0FBRTtVQUFLRCxFQUFBLEtBQUlDLEVBQUEsR0FBRUQsRUFBQSxHQUFHQyxFQUFBLENBQUV3WixXQUFBLENBQVltNUQsMEJBQUEsQ0FBMkJseEUsRUFBQSxFQUFFNUIsRUFBQSxFQUFFRyxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNhLEdBQUEsRUFBSTtRQUFtQlcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLElBQUlDLEVBQUEsR0FBRWMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxLQUFHQSxTQUFBLENBQVUsS0FBRztZQUFPMUMsRUFBQSxHQUFFO1VBQUs0QixFQUFBLEtBQUk1QixFQUFBLEdBQUU0QixFQUFBLEdBQUc1QixFQUFBLENBQUUyWixXQUFBLENBQVlvNUQsZ0JBQUEsQ0FBaUIveUUsRUFBQztRQUFDO01BQUMsR0FBRTtRQUFDZ0IsR0FBQSxFQUFJO1FBQW1CVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsSUFBSTVCLEVBQUEsR0FBRTBDLFNBQUEsQ0FBVXpDLE1BQUEsR0FBTyxLQUFHLFdBQVN5QyxTQUFBLENBQVUsS0FBR0EsU0FBQSxDQUFVLEtBQUc7WUFBT3hDLEVBQUEsR0FBRTtVQUFLRixFQUFBLEtBQUlFLEVBQUEsR0FBRUYsRUFBQSxHQUFHRSxFQUFBLENBQUV5WixXQUFBLENBQVlxNUQsZ0JBQUEsQ0FBaUI5eUUsRUFBQSxFQUFFMEIsRUFBQztRQUFDO01BQUMsR0FBRTtRQUFDWixHQUFBLEVBQUk7UUFBZVcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLE9BQU8sS0FBS21ILENBQUEsQ0FBRUUsT0FBQSxDQUFRaUcsR0FBQSxDQUFJbUwsTUFBQSxDQUFPQyxhQUFBLENBQWMsbUJBQW1CO1FBQUM7TUFBQyxHQUFFO1FBQUNyWixHQUFBLEVBQUk7UUFBdUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxPQUFPLEtBQUsyZ0MsU0FBQSxDQUFVc3lDLHFCQUFBLENBQXNCcnhFLEVBQUEsRUFBRTVCLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ2dCLEdBQUEsRUFBSTtRQUEwQlcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLElBQUlDLEVBQUEsR0FBRWMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxLQUFHQSxTQUFBLENBQVUsS0FBRztVQUFFLE9BQU8sSUFBSTRvQyxDQUFBLENBQUUsS0FBS3ppQyxHQUFHLEVBQUVtakMsV0FBQSxDQUFZcHFDLEVBQUMsRUFBRW1xQyxRQUFBO1FBQVE7TUFBQyxHQUFFO1FBQUMvcUMsR0FBQSxFQUFJO1FBQXlCVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsSUFBSUMsRUFBQSxHQUFFYyxTQUFBLENBQVV6QyxNQUFBLEdBQU8sS0FBRyxXQUFTeUMsU0FBQSxDQUFVLEtBQUdBLFNBQUEsQ0FBVSxLQUFHO1VBQUUsT0FBTyxJQUFJNG9DLENBQUEsQ0FBRSxLQUFLemlDLEdBQUcsRUFBRW1qQyxXQUFBLENBQVlwcUMsRUFBQyxFQUFFa3FDLE9BQUE7UUFBTztNQUFDLEdBQUU7UUFBQzlxQyxHQUFBLEVBQUk7UUFBaUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7VUFBQyxPQUFPLEtBQUttSCxDQUFBLENBQUVFLE9BQUEsQ0FBUXFPLFlBQUE7UUFBWTtNQUFDLEdBQUU7UUFBQ3JXLEdBQUEsRUFBSTtRQUEyQlcsS0FBQSxFQUFNLFNBQUFBLENBQVNDLEVBQUEsRUFBRTVCLEVBQUEsRUFBRTtVQUFDLE9BQU8sS0FBSzQvQixhQUFBLENBQWNzekMsd0JBQUEsQ0FBeUJ0eEUsRUFBQSxFQUFFNUIsRUFBQztRQUFDO01BQUMsR0FBRTtRQUFDZ0IsR0FBQSxFQUFJO1FBQVFXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU1QixFQUFBLEVBQUU7VUFBQyxLQUFLNkksR0FBQSxDQUFJOGIsT0FBQSxDQUFRMHlCLGlCQUFBLENBQWtCejFDLEVBQUEsRUFBRTVCLEVBQUM7UUFBQztNQUFDLEdBQUU7UUFBQ2dCLEdBQUEsRUFBSTtRQUFZVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsS0FBSzhzRSxZQUFBLENBQWF5RSxzQkFBQSxDQUF1QnZ4RSxFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUFVVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFO1VBQUMsT0FBTyxJQUFJMGhDLENBQUEsQ0FBRSxLQUFLejZCLEdBQUcsRUFBRTg4QixPQUFBLENBQVEvakMsRUFBQztRQUFDO01BQUMsR0FBRTtRQUFDWixHQUFBLEVBQUk7UUFBY1csS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLElBQUlDLEVBQUEsR0FBRWMsU0FBQSxDQUFVekMsTUFBQSxHQUFPLEtBQUcsV0FBU3lDLFNBQUEsQ0FBVSxLQUFHQSxTQUFBLENBQVUsS0FBRyxDQUFDO1VBQUUsT0FBTyxJQUFJNGdDLENBQUEsQ0FBRSxLQUFLejZCLEdBQUcsRUFBRWljLFdBQUEsQ0FBWWxqQixFQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNaLEdBQUEsRUFBSTtRQUFRVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsT0FBTyxLQUFLbUgsQ0FBQSxDQUFFRSxPQUFBLENBQVFpRyxHQUFBLENBQUlDLEtBQUE7UUFBSztNQUFDLEdBQUU7UUFBQ2xPLEdBQUEsRUFBSTtRQUF3QlcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLEtBQUttSCxDQUFBLENBQUVFLE9BQUEsQ0FBUTRCLGNBQUEsSUFBZ0IsS0FBSzlCLENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU1zZSxvQkFBQSxJQUFzQixLQUFLMnJELGFBQUEsQ0FBYztRQUFDO01BQUMsR0FBRTtRQUFDcHlFLEdBQUEsRUFBSTtRQUFnQlcsS0FBQSxFQUFNLFNBQUFBLENBQUEsRUFBVTtVQUFDLElBQUlDLEVBQUEsR0FBRTtVQUFLcTRDLFlBQUEsQ0FBYSxLQUFLbnhDLENBQUEsQ0FBRUUsT0FBQSxDQUFRaXVCLFdBQVcsR0FBRSxLQUFLbnVCLENBQUEsQ0FBRUUsT0FBQSxDQUFRaXVCLFdBQUEsR0FBWXR1QixNQUFBLENBQU95MUIsVUFBQSxDQUFZLFlBQVU7WUFBQ3g4QixFQUFBLENBQUVrSCxDQUFBLENBQUVFLE9BQUEsQ0FBUXFJLE9BQUEsR0FBUSxNQUFHelAsRUFBQSxDQUFFa0gsQ0FBQSxDQUFFRSxPQUFBLENBQVFxQixXQUFBLEdBQVksT0FBR3pJLEVBQUEsQ0FBRWlILEdBQUEsQ0FBSW13RCxNQUFBLENBQU87VUFBQyxHQUFHLEdBQUc7UUFBQztNQUFDLEdBQUU7UUFBQ2g0RCxHQUFBLEVBQUk7UUFBdUJXLEtBQUEsRUFBTSxTQUFBQSxDQUFBLEVBQVU7VUFBQyxJQUFJQyxFQUFBLEdBQUUsS0FBS2tILENBQUEsQ0FBRUksTUFBQSxDQUFPQyxLQUFBLENBQU11ZSxvQkFBQTtVQUFxQixjQUFZLE9BQU85bEIsRUFBQSxLQUFJQSxFQUFBLEdBQUVBLEVBQUEsQ0FBRSxJQUFHQSxFQUFBLElBQUcsS0FBS3d4RSxhQUFBLENBQWM7UUFBQztNQUFDLENBQUMsR0FBRSxDQUFDO1FBQUNweUUsR0FBQSxFQUFJO1FBQWVXLEtBQUEsRUFBTSxTQUFBQSxDQUFTQyxFQUFBLEVBQUU7VUFBQyxJQUFJNUIsRUFBQSxHQUFFOEUsQ0FBQSxDQUFFdzZCLFlBQUEsQ0FBYTE5QixFQUFDO1VBQUUsSUFBR2kwQixJQUFBLENBQUsrNUMsZUFBQSxFQUFnQjtZQUFDLElBQUkxdkUsRUFBQSxHQUFFMjFCLElBQUEsQ0FBSys1QyxlQUFBLENBQWdCbnNFLE1BQUEsQ0FBUSxVQUFTVSxFQUFBLEVBQUU7Y0FBQyxPQUFPQSxFQUFBLENBQUU4VyxFQUFBLEtBQUtqYixFQUFBO1lBQUMsQ0FBRSxFQUFFO1lBQUcsT0FBT0UsRUFBQSxJQUFHQSxFQUFBLENBQUVpSixLQUFBO1VBQUs7UUFBQztNQUFDLEdBQUU7UUFBQ25JLEdBQUEsRUFBSTtRQUFhVyxLQUFBLEVBQU0sU0FBQUEsQ0FBQSxFQUFVO1VBQUMsU0FBUTNCLEVBQUEsR0FBRTA3QixRQUFBLENBQVNqSSxnQkFBQSxDQUFpQixtQkFBbUIsR0FBRXZ6QixFQUFBLEdBQUUsR0FBRUEsRUFBQSxHQUFFRixFQUFBLENBQUVDLE1BQUEsRUFBT0MsRUFBQSxJQUFJO1lBQUMsSUFBSUgsRUFBQSxDQUFFQyxFQUFBLENBQUVFLEVBQUEsR0FBR2tpQyxJQUFBLENBQUs3a0IsS0FBQSxDQUFNdmQsRUFBQSxDQUFFRSxFQUFBLEVBQUd1VSxZQUFBLENBQWEsY0FBYyxDQUFDLENBQUMsRUFBRTQrRCxNQUFBLENBQU87VUFBQztRQUFDO01BQUMsR0FBRTtRQUFDcnlFLEdBQUEsRUFBSTtRQUFPVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFNUIsRUFBQSxFQUFFO1VBQUMsSUFBSUUsRUFBQSxHQUFFLEtBQUswNEQsWUFBQSxDQUFhaDNELEVBQUM7VUFBRSxJQUFHMUIsRUFBQSxFQUFFO1lBQUNBLEVBQUEsQ0FBRTRJLENBQUEsQ0FBRUUsT0FBQSxDQUFRMHZCLFlBQUEsR0FBYTtZQUFHLElBQUl2NEIsRUFBQSxHQUFFO1lBQUssSUFBRyxPQUFLRCxFQUFBLENBQUVzdUUsYUFBQSxDQUFjOWxFLE9BQUEsQ0FBUTFJLEVBQUMsR0FBRTtjQUFDLFNBQVF3QixFQUFBLEdBQUVrQixTQUFBLENBQVV6QyxNQUFBLEVBQU82QixFQUFBLEdBQUUsSUFBSTFCLEtBQUEsQ0FBTW9CLEVBQUEsR0FBRSxJQUFFQSxFQUFBLEdBQUUsSUFBRSxDQUFDLEdBQUVPLEVBQUEsR0FBRSxHQUFFQSxFQUFBLEdBQUVQLEVBQUEsRUFBRU8sRUFBQSxJQUFJRCxFQUFBLENBQUVDLEVBQUEsR0FBRSxLQUFHVyxTQUFBLENBQVVYLEVBQUE7Y0FBRzVCLEVBQUEsR0FBRUQsRUFBQSxDQUFFRixFQUFBLEVBQUcyQyxLQUFBLENBQU16QyxFQUFBLEVBQUU0QixFQUFDO1lBQUM7WUFBQyxPQUFPM0IsRUFBQTtVQUFDO1FBQUM7TUFBQyxHQUFFO1FBQUNhLEdBQUEsRUFBSTtRQUFRVyxLQUFBLEVBQU0sU0FBQUEsQ0FBU0MsRUFBQSxFQUFFNUIsRUFBQSxFQUFFO1VBQUMsT0FBTzhFLENBQUEsQ0FBRVksTUFBQSxDQUFPOUQsRUFBQSxFQUFFNUIsRUFBQztRQUFDO01BQUMsQ0FBQyxDQUFDLEdBQUVELEVBQUE7SUFBQyxFQUFFO0lBQUVGLE9BQUEsQ0FBT0QsT0FBQSxHQUFRMHZFLEVBQUE7RUFBQTtBQUFBOzs7QUNiemcvQyxJQUFBZ0UseUJBQUE7QUFBQUMsUUFBQSxDQUFBRCx5QkFBQTtFQUFBL2lDLE9BQUEsRUFBQUEsQ0FBQSxLQUFBaWpDO0FBQUE7QUFBQUMsTUFBQSxDQUFBN3pFLE9BQUEsR0FBQTh6RSxZQUFBLENBQUFKLHlCQUFBO0FBQUFLLFVBQUEsQ0FBQUwseUJBQUEsRUFBY00sT0FBQSxDQUFBbjBFLHlCQUFBLEtBQWRnMEUsTUFBQSxDQUFBN3pFLE9BQUE7QUFFQSxJQUFBaTBFLGlCQUFBLEdBQXFCRCxPQUFBLENBQUFuMEUseUJBQUE7QUFDckIsSUFBTyt6RSx5QkFBQSxHQUFRSyxpQkFBQSxDQUFBdGpDLE9BQUEiLCJmaWxlIjoiIiwic291cmNlUm9vdCI6Ii9haS9haWxlYXJuL2NsaWVudC9hcHBzL2JldHRlci1taW5kL291dCJ9